(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var fix, fs;

fix = "interface ArrayBufferView {}\ndeclare var ArrayBufferView: {};\n\ninterface ArrayBuffer {}\ndeclare var ArrayBuffer: {};\n\ninterface Uint8Array {}\ndeclare var Uint8Array: {};\n\ninterface Int32Array {}\ndeclare var Int32Array: {};\n\ninterface Float32Array {}\ndeclare var Float32Array: {};";



SupAPI.registerPlugin('typescript', 'DOM', {
  defs: "/////////////////////////////\r\n/// IE DOM APIs\r\n/////////////////////////////\r\n\r\n\r\ninterface PositionOptions {\r\n    enableHighAccuracy?: boolean;\r\n    timeout?: number;\r\n    maximumAge?: number;\r\n}\r\n\r\ninterface ObjectURLOptions {\r\n    oneTimeOnly?: boolean;\r\n}\r\n\r\ninterface StoreExceptionsInformation extends ExceptionInformation {\r\n    siteName?: string;\r\n    explanationString?: string;\r\n    detailURI?: string;\r\n}\r\n\r\ninterface StoreSiteSpecificExceptionsInformation extends StoreExceptionsInformation {\r\n    arrayOfDomainStrings?: string[];\r\n}\r\n\r\ninterface ConfirmSiteSpecificExceptionsInformation extends ExceptionInformation {\r\n    arrayOfDomainStrings?: string[];\r\n}\r\n\r\ninterface AlgorithmParameters {\r\n}\r\n\r\ninterface MutationObserverInit {\r\n    childList?: boolean;\r\n    attributes?: boolean;\r\n    characterData?: boolean;\r\n    subtree?: boolean;\r\n    attributeOldValue?: boolean;\r\n    characterDataOldValue?: boolean;\r\n    attributeFilter?: string[];\r\n}\r\n\r\ninterface PointerEventInit extends MouseEventInit {\r\n    pointerId?: number;\r\n    width?: number;\r\n    height?: number;\r\n    pressure?: number;\r\n    tiltX?: number;\r\n    tiltY?: number;\r\n    pointerType?: string;\r\n    isPrimary?: boolean;\r\n}\r\n\r\ninterface ExceptionInformation {\r\n    domain?: string;\r\n}\r\n\r\ninterface DeviceAccelerationDict {\r\n    x?: number;\r\n    y?: number;\r\n    z?: number;\r\n}\r\n\r\ninterface MsZoomToOptions {\r\n    contentX?: number;\r\n    contentY?: number;\r\n    viewportX?: string;\r\n    viewportY?: string;\r\n    scaleFactor?: number;\r\n    animate?: string;\r\n}\r\n\r\ninterface DeviceRotationRateDict {\r\n    alpha?: number;\r\n    beta?: number;\r\n    gamma?: number;\r\n}\r\n\r\ninterface Algorithm {\r\n    name?: string;\r\n    params?: AlgorithmParameters;\r\n}\r\n\r\ninterface MouseEventInit {\r\n    bubbles?: boolean;\r\n    cancelable?: boolean;\r\n    view?: Window;\r\n    detail?: number;\r\n    screenX?: number;\r\n    screenY?: number;\r\n    clientX?: number;\r\n    clientY?: number;\r\n    ctrlKey?: boolean;\r\n    shiftKey?: boolean;\r\n    altKey?: boolean;\r\n    metaKey?: boolean;\r\n    button?: number;\r\n    buttons?: number;\r\n    relatedTarget?: EventTarget;\r\n}\r\n\r\ninterface WebGLContextAttributes {\r\n    alpha?: boolean;\r\n    depth?: boolean;\r\n    stencil?: boolean;\r\n    antialias?: boolean;\r\n    premultipliedAlpha?: boolean;\r\n    preserveDrawingBuffer?: boolean;\r\n}\r\n\r\ninterface NodeListOf<TNode extends Node> extends NodeList {\r\n    length: number;\r\n    item(index: number): TNode;\r\n    [index: number]: TNode;\r\n}\r\n\r\ninterface HTMLElement extends Element, ElementCSSInlineStyle, MSEventAttachmentTarget, MSNodeExtensions {\r\n    hidden: any;\r\n    readyState: any;\r\n    onmouseleave: (ev: MouseEvent) => any;\r\n    onbeforecut: (ev: DragEvent) => any;\r\n    onkeydown: (ev: KeyboardEvent) => any;\r\n    onmove: (ev: MSEventObj) => any;\r\n    onkeyup: (ev: KeyboardEvent) => any;\r\n    onreset: (ev: Event) => any;\r\n    onhelp: (ev: Event) => any;\r\n    ondragleave: (ev: DragEvent) => any;\r\n    className: string;\r\n    onfocusin: (ev: FocusEvent) => any;\r\n    onseeked: (ev: Event) => any;\r\n    recordNumber: any;\r\n    title: string;\r\n    parentTextEdit: Element;\r\n    outerHTML: string;\r\n    ondurationchange: (ev: Event) => any;\r\n    offsetHeight: number;\r\n    all: HTMLCollection;\r\n    onblur: (ev: FocusEvent) => any;\r\n    dir: string;\r\n    onemptied: (ev: Event) => any;\r\n    onseeking: (ev: Event) => any;\r\n    oncanplay: (ev: Event) => any;\r\n    ondeactivate: (ev: UIEvent) => any;\r\n    ondatasetchanged: (ev: MSEventObj) => any;\r\n    onrowsdelete: (ev: MSEventObj) => any;\r\n    sourceIndex: number;\r\n    onloadstart: (ev: Event) => any;\r\n    onlosecapture: (ev: MSEventObj) => any;\r\n    ondragenter: (ev: DragEvent) => any;\r\n    oncontrolselect: (ev: MSEventObj) => any;\r\n    onsubmit: (ev: Event) => any;\r\n    behaviorUrns: MSBehaviorUrnsCollection;\r\n    scopeName: string;\r\n    onchange: (ev: Event) => any;\r\n    id: string;\r\n    onlayoutcomplete: (ev: MSEventObj) => any;\r\n    uniqueID: string;\r\n    onbeforeactivate: (ev: UIEvent) => any;\r\n    oncanplaythrough: (ev: Event) => any;\r\n    onbeforeupdate: (ev: MSEventObj) => any;\r\n    onfilterchange: (ev: MSEventObj) => any;\r\n    offsetParent: Element;\r\n    ondatasetcomplete: (ev: MSEventObj) => any;\r\n    onsuspend: (ev: Event) => any;\r\n    onmouseenter: (ev: MouseEvent) => any;\r\n    innerText: string;\r\n    onerrorupdate: (ev: MSEventObj) => any;\r\n    onmouseout: (ev: MouseEvent) => any;\r\n    parentElement: HTMLElement;\r\n    onmousewheel: (ev: MouseWheelEvent) => any;\r\n    onvolumechange: (ev: Event) => any;\r\n    oncellchange: (ev: MSEventObj) => any;\r\n    onrowexit: (ev: MSEventObj) => any;\r\n    onrowsinserted: (ev: MSEventObj) => any;\r\n    onpropertychange: (ev: MSEventObj) => any;\r\n    filters: any;\r\n    children: HTMLCollection;\r\n    ondragend: (ev: DragEvent) => any;\r\n    onbeforepaste: (ev: DragEvent) => any;\r\n    ondragover: (ev: DragEvent) => any;\r\n    offsetTop: number;\r\n    onmouseup: (ev: MouseEvent) => any;\r\n    ondragstart: (ev: DragEvent) => any;\r\n    onbeforecopy: (ev: DragEvent) => any;\r\n    ondrag: (ev: DragEvent) => any;\r\n    innerHTML: string;\r\n    onmouseover: (ev: MouseEvent) => any;\r\n    lang: string;\r\n    uniqueNumber: number;\r\n    onpause: (ev: Event) => any;\r\n    tagUrn: string;\r\n    onmousedown: (ev: MouseEvent) => any;\r\n    onclick: (ev: MouseEvent) => any;\r\n    onwaiting: (ev: Event) => any;\r\n    onresizestart: (ev: MSEventObj) => any;\r\n    offsetLeft: number;\r\n    isTextEdit: boolean;\r\n    isDisabled: boolean;\r\n    onpaste: (ev: DragEvent) => any;\r\n    canHaveHTML: boolean;\r\n    onmoveend: (ev: MSEventObj) => any;\r\n    language: string;\r\n    onstalled: (ev: Event) => any;\r\n    onmousemove: (ev: MouseEvent) => any;\r\n    style: MSStyleCSSProperties;\r\n    isContentEditable: boolean;\r\n    onbeforeeditfocus: (ev: MSEventObj) => any;\r\n    onratechange: (ev: Event) => any;\r\n    contentEditable: string;\r\n    tabIndex: number;\r\n    document: Document;\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    ondblclick: (ev: MouseEvent) => any;\r\n    oncontextmenu: (ev: MouseEvent) => any;\r\n    onloadedmetadata: (ev: Event) => any;\r\n    onafterupdate: (ev: MSEventObj) => any;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    onplay: (ev: Event) => any;\r\n    onresizeend: (ev: MSEventObj) => any;\r\n    onplaying: (ev: Event) => any;\r\n    isMultiLine: boolean;\r\n    onfocusout: (ev: FocusEvent) => any;\r\n    onabort: (ev: UIEvent) => any;\r\n    ondataavailable: (ev: MSEventObj) => any;\r\n    hideFocus: boolean;\r\n    onreadystatechange: (ev: Event) => any;\r\n    onkeypress: (ev: KeyboardEvent) => any;\r\n    onloadeddata: (ev: Event) => any;\r\n    onbeforedeactivate: (ev: UIEvent) => any;\r\n    outerText: string;\r\n    disabled: boolean;\r\n    onactivate: (ev: UIEvent) => any;\r\n    accessKey: string;\r\n    onmovestart: (ev: MSEventObj) => any;\r\n    onselectstart: (ev: Event) => any;\r\n    onfocus: (ev: FocusEvent) => any;\r\n    ontimeupdate: (ev: Event) => any;\r\n    onresize: (ev: UIEvent) => any;\r\n    oncut: (ev: DragEvent) => any;\r\n    onselect: (ev: UIEvent) => any;\r\n    ondrop: (ev: DragEvent) => any;\r\n    offsetWidth: number;\r\n    oncopy: (ev: DragEvent) => any;\r\n    onended: (ev: Event) => any;\r\n    onscroll: (ev: UIEvent) => any;\r\n    onrowenter: (ev: MSEventObj) => any;\r\n    onload: (ev: Event) => any;\r\n    canHaveChildren: boolean;\r\n    oninput: (ev: Event) => any;\r\n    onmscontentzoom: (ev: MSEventObj) => any;\r\n    oncuechange: (ev: Event) => any;\r\n    spellcheck: boolean;\r\n    classList: DOMTokenList;\r\n    onmsmanipulationstatechanged: (ev: any) => any;\r\n    draggable: boolean;\r\n    dataset: DOMStringMap;\r\n    dragDrop(): boolean;\r\n    scrollIntoView(top?: boolean): void;\r\n    addFilter(filter: any): void;\r\n    setCapture(containerCapture?: boolean): void;\r\n    focus(): void;\r\n    getAdjacentText(where: string): string;\r\n    insertAdjacentText(where: string, text: string): void;\r\n    getElementsByClassName(classNames: string): NodeList;\r\n    setActive(): void;\r\n    removeFilter(filter: any): void;\r\n    blur(): void;\r\n    clearAttributes(): void;\r\n    releaseCapture(): void;\r\n    createControlRange(): ControlRangeCollection;\r\n    removeBehavior(cookie: number): boolean;\r\n    contains(child: HTMLElement): boolean;\r\n    click(): void;\r\n    insertAdjacentElement(position: string, insertedElement: Element): Element;\r\n    mergeAttributes(source: HTMLElement, preserveIdentity?: boolean): void;\r\n    replaceAdjacentText(where: string, newText: string): string;\r\n    applyElement(apply: Element, where?: string): Element;\r\n    addBehavior(bstrUrl: string, factory?: any): number;\r\n    insertAdjacentHTML(where: string, html: string): void;\r\n    msGetInputContext(): MSInputMethodContext;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerdown\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgotpointercapture\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturedoubletap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerhover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturehold\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointermove\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturechange\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturestart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointercancel\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgestureend\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturetap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerout\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msinertiastart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mslostpointercapture\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerup\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerenter\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerleave\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"move\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"help\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusin\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"datasetchanged\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowsdelete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"losecapture\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"controlselect\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"layoutcomplete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"filterchange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"datasetcomplete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"errorupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cellchange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowexit\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowsinserted\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"propertychange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforepaste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecopy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resizestart\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"paste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"moveend\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeeditfocus\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"afterupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resizeend\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusout\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dataavailable\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"readystatechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"movestart\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"copy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowenter\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mscontentzoom\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msmanipulationstatechanged\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var HTMLElement: {\r\n    prototype: HTMLElement;\r\n    new(): HTMLElement;\r\n}\r\n\r\ninterface Document extends Node, NodeSelector, MSEventAttachmentTarget, DocumentEvent, MSResourceMetadata, MSNodeExtensions, MSDocumentExtensions, GlobalEventHandlers {\r\n    /**\r\n      * Gets a reference to the root node of the document. \r\n      */\r\n    documentElement: HTMLElement;\r\n    /**\r\n      * Retrieves the collection of user agents and versions declared in the X-UA-Compatible\r\n      */\r\n    compatible: MSCompatibleInfoCollection;\r\n    /**\r\n      * Fires when the user presses a key.\r\n      * @param ev The keyboard event\r\n      */\r\n    onkeydown: (ev: KeyboardEvent) => any;\r\n    /**\r\n      * Fires when the user releases a key.\r\n      * @param ev The keyboard event\r\n      */\r\n    onkeyup: (ev: KeyboardEvent) => any;\r\n    /**\r\n      * Gets the implementation object of the current document. \r\n      */\r\n    implementation: DOMImplementation;\r\n    /**\r\n      * Fires when the user resets a form. \r\n      * @param ev The event.\r\n      */\r\n    onreset: (ev: Event) => any;\r\n    /**\r\n      * Retrieves a collection of all script objects in the document.\r\n      */\r\n    scripts: HTMLCollection;\r\n    /**\r\n      * Fires when the user presses the F1 key while the browser is the active window. \r\n      * @param ev The event.\r\n      */\r\n    onhelp: (ev: Event) => any;\r\n    /** \r\n      * Fires on the target object when the user moves the mouse out of a valid drop target during a drag operation.\r\n      * @param ev The drag event.\r\n      */\r\n    ondragleave: (ev: DragEvent) => any;\r\n    /**\r\n      * Gets or sets the character set used to encode the object.\r\n      */\r\n    charset: string;\r\n    /**\r\n      * Fires for an element just prior to setting focus on that element.\r\n      * @param ev The focus event\r\n      */\r\n    onfocusin: (ev: FocusEvent) => any;\r\n    /** \r\n      * Sets or gets the color of the links that the user has visited.\r\n      */\r\n    vlinkColor: string;\r\n    /**\r\n      * Occurs when the seek operation ends. \r\n      * @param ev The event.\r\n      */\r\n    onseeked: (ev: Event) => any;\r\n    security: string;\r\n    /**\r\n      * Contains the title of the document.\r\n      */\r\n    title: string;\r\n    /**\r\n      * Retrieves a collection of namespace objects.\r\n      */\r\n    namespaces: MSNamespaceInfoCollection;\r\n    /**\r\n      * Gets the default character set from the current regional language settings.\r\n      */\r\n    defaultCharset: string;\r\n    /**\r\n      * Retrieves a collection of all embed objects in the document.\r\n      */\r\n    embeds: HTMLCollection;\r\n    /**\r\n      * Retrieves a collection of styleSheet objects representing the style sheets that correspond to each instance of a link or style object in the document.\r\n      */\r\n    styleSheets: StyleSheetList;\r\n    /**\r\n      * Retrieves a collection of all window objects defined by the given document or defined by the document associated with the given window.\r\n      */\r\n    frames: Window;\r\n    /**\r\n      * Occurs when the duration attribute is updated. \r\n      * @param ev The event.\r\n      */\r\n    ondurationchange: (ev: Event) => any;\r\n    /**\r\n      * Returns a reference to the collection of elements contained by the object.\r\n      */\r\n    all: HTMLCollection;\r\n    /**\r\n      * Retrieves a collection, in source order, of all form objects in the document.\r\n      */\r\n    forms: HTMLCollection;\r\n    /** \r\n      * Fires when the object loses the input focus. \r\n      * @param ev The focus event.\r\n      */\r\n    onblur: (ev: FocusEvent) => any;\r\n    /**\r\n      * Sets or retrieves a value that indicates the reading order of the object. \r\n      */\r\n    dir: string;\r\n    /**\r\n      * Occurs when the media element is reset to its initial state. \r\n      * @param ev The event.\r\n      */\r\n    onemptied: (ev: Event) => any;\r\n    /**\r\n      * Sets or gets a value that indicates whether the document can be edited.\r\n      */\r\n    designMode: string;\r\n    /**\r\n      * Occurs when the current playback position is moved. \r\n      * @param ev The event.\r\n      */\r\n    onseeking: (ev: Event) => any;\r\n    /**\r\n      * Fires when the activeElement is changed from the current object to another object in the parent document.\r\n      * @param ev The UI Event\r\n      */\r\n    ondeactivate: (ev: UIEvent) => any;\r\n    /**\r\n      * Occurs when playback is possible, but would require further buffering. \r\n      * @param ev The event.\r\n      */\r\n    oncanplay: (ev: Event) => any;\r\n    /**\r\n      * Fires when the data set exposed by a data source object changes. \r\n      * @param ev The event.\r\n      */\r\n    ondatasetchanged: (ev: MSEventObj) => any;\r\n    /**\r\n      * Fires when rows are about to be deleted from the recordset.\r\n      * @param ev The event \r\n      */\r\n    onrowsdelete: (ev: MSEventObj) => any;\r\n    Script: MSScriptHost;\r\n    /**\r\n      * Occurs when Internet Explorer begins looking for media data. \r\n      * @param ev The event.\r\n      */\r\n    onloadstart: (ev: Event) => any;\r\n    /**\r\n      * Gets the URL for the document, stripped of any character encoding.\r\n      */\r\n    URLUnencoded: string;\r\n    defaultView: Window;\r\n    /**\r\n      * Fires when the user is about to make a control selection of the object.\r\n      * @param ev The event.\r\n      */\r\n    oncontrolselect: (ev: MSEventObj) => any;\r\n    /** \r\n      * Fires on the target element when the user drags the object to a valid drop target.\r\n      * @param ev The drag event.\r\n      */\r\n    ondragenter: (ev: DragEvent) => any;\r\n    onsubmit: (ev: Event) => any;\r\n    /**\r\n      * Returns the character encoding used to create the webpage that is loaded into the document object.\r\n      */\r\n    inputEncoding: string;\r\n    /**\r\n      * Gets the object that has the focus when the parent document has focus.\r\n      */\r\n    activeElement: Element;\r\n    /**\r\n      * Fires when the contents of the object or selection have changed. \r\n      * @param ev The event.\r\n      */\r\n    onchange: (ev: Event) => any;\r\n    /**\r\n      * Retrieves a collection of all a objects that specify the href property and all area objects in the document.\r\n      */\r\n    links: HTMLCollection;\r\n    /**\r\n      * Retrieves an autogenerated, unique identifier for the object. \r\n      */\r\n    uniqueID: string;\r\n    /**\r\n      * Sets or gets the URL for the current document. \r\n      */\r\n    URL: string;\r\n    /**\r\n      * Fires immediately before the object is set as the active element.\r\n      * @param ev The event.\r\n      */\r\n    onbeforeactivate: (ev: UIEvent) => any;\r\n    head: HTMLHeadElement;\r\n    cookie: string;\r\n    xmlEncoding: string;\r\n    oncanplaythrough: (ev: Event) => any;\r\n    /** \r\n      * Retrieves the document compatibility mode of the document.\r\n      */\r\n    documentMode: number;\r\n    characterSet: string;\r\n    /**\r\n      * Retrieves a collection of all a objects that have a name and/or id property. Objects in this collection are in HTML source order.\r\n      */\r\n    anchors: HTMLCollection;\r\n    onbeforeupdate: (ev: MSEventObj) => any;\r\n    /** \r\n      * Fires to indicate that all data is available from the data source object. \r\n      * @param ev The event.\r\n      */\r\n    ondatasetcomplete: (ev: MSEventObj) => any;\r\n    plugins: HTMLCollection;\r\n    /**\r\n      * Occurs if the load operation has been intentionally halted. \r\n      * @param ev The event.\r\n      */\r\n    onsuspend: (ev: Event) => any;\r\n    /**\r\n      * Gets the root svg element in the document hierarchy.\r\n      */\r\n    rootElement: SVGSVGElement;\r\n    /**\r\n      * Retrieves a value that indicates the current state of the object.\r\n      */\r\n    readyState: string;\r\n    /**\r\n      * Gets the URL of the location that referred the user to the current page.\r\n      */\r\n    referrer: string;\r\n    /**\r\n      * Sets or gets the color of all active links in the document.\r\n      */\r\n    alinkColor: string;\r\n    /**\r\n      * Fires on a databound object when an error occurs while updating the associated data in the data source object. \r\n      * @param ev The event.\r\n      */\r\n    onerrorupdate: (ev: MSEventObj) => any;\r\n    /**\r\n      * Gets a reference to the container object of the window.\r\n      */\r\n    parentWindow: Window;\r\n    /**\r\n      * Fires when the user moves the mouse pointer outside the boundaries of the object. \r\n      * @param ev The mouse event.\r\n      */\r\n    onmouseout: (ev: MouseEvent) => any;\r\n    /**\r\n      * Occurs when a user clicks a button in a Thumbnail Toolbar of a webpage running in Site Mode.\r\n      * @param ev The event.\r\n      */\r\n    onmsthumbnailclick: (ev: MSSiteModeEvent) => any;\r\n    /**\r\n      * Fires when the wheel button is rotated. \r\n      * @param ev The mouse event\r\n      */\r\n    onmousewheel: (ev: MouseWheelEvent) => any;\r\n    /**\r\n      * Occurs when the volume is changed, or playback is muted or unmuted.\r\n      * @param ev The event.\r\n      */\r\n    onvolumechange: (ev: Event) => any;\r\n    /** \r\n      * Fires when data changes in the data provider.\r\n      * @param ev The event.\r\n      */\r\n    oncellchange: (ev: MSEventObj) => any;\r\n    /**\r\n      * Fires just before the data source control changes the current row in the object. \r\n      * @param ev The event.\r\n      */\r\n    onrowexit: (ev: MSEventObj) => any;\r\n    /**\r\n      * Fires just after new rows are inserted in the current recordset.\r\n      * @param ev The event.\r\n      */\r\n    onrowsinserted: (ev: MSEventObj) => any;\r\n    /**\r\n      * Gets or sets the version attribute specified in the declaration of an XML document.\r\n      */\r\n    xmlVersion: string;\r\n    msCapsLockWarningOff: boolean;\r\n    /**\r\n      * Fires when a property changes on the object.\r\n      * @param ev The event.\r\n      */\r\n    onpropertychange: (ev: MSEventObj) => any;\r\n    /**\r\n      * Fires on the source object when the user releases the mouse at the close of a drag operation.\r\n      * @param ev The event.\r\n      */\r\n    ondragend: (ev: DragEvent) => any;\r\n    /**\r\n      * Gets an object representing the document type declaration associated with the current document. \r\n      */\r\n    doctype: DocumentType;\r\n    /**\r\n      * Fires on the target element continuously while the user drags the object over a valid drop target.\r\n      * @param ev The event.\r\n      */\r\n    ondragover: (ev: DragEvent) => any;\r\n    /**\r\n      * Deprecated. Sets or retrieves a value that indicates the background color behind the object. \r\n      */\r\n    bgColor: string;\r\n    /**\r\n      * Fires on the source object when the user starts to drag a text selection or selected object. \r\n      * @param ev The event.\r\n      */\r\n    ondragstart: (ev: DragEvent) => any;\r\n    /**\r\n      * Fires when the user releases a mouse button while the mouse is over the object. \r\n      * @param ev The mouse event.\r\n      */\r\n    onmouseup: (ev: MouseEvent) => any;\r\n    /**\r\n      * Fires on the source object continuously during a drag operation.\r\n      * @param ev The event.\r\n      */\r\n    ondrag: (ev: DragEvent) => any;\r\n    /**\r\n      * Fires when the user moves the mouse pointer into the object.\r\n      * @param ev The mouse event.\r\n      */\r\n    onmouseover: (ev: MouseEvent) => any;\r\n    /**\r\n      * Sets or gets the color of the document links. \r\n      */\r\n    linkColor: string;\r\n    /**\r\n      * Occurs when playback is paused.\r\n      * @param ev The event.\r\n      */\r\n    onpause: (ev: Event) => any;\r\n    /**\r\n      * Fires when the user clicks the object with either mouse button. \r\n      * @param ev The mouse event.\r\n      */\r\n    onmousedown: (ev: MouseEvent) => any;\r\n    /**\r\n      * Fires when the user clicks the left mouse button on the object\r\n      * @param ev The mouse event.\r\n      */\r\n    onclick: (ev: MouseEvent) => any;\r\n    /**\r\n      * Occurs when playback stops because the next frame of a video resource is not available. \r\n      * @param ev The event.\r\n      */\r\n    onwaiting: (ev: Event) => any;\r\n    /**\r\n      * Fires when the user clicks the Stop button or leaves the Web page.\r\n      * @param ev The event.\r\n      */\r\n    onstop: (ev: Event) => any;\r\n    /**\r\n      * Occurs when an item is removed from a Jump List of a webpage running in Site Mode. \r\n      * @param ev The event.\r\n      */\r\n    onmssitemodejumplistitemremoved: (ev: MSSiteModeEvent) => any;\r\n    /**\r\n      * Retrieves a collection of all applet objects in the document.\r\n      */\r\n    applets: HTMLCollection;\r\n    /**\r\n      * Specifies the beginning and end of the document body.\r\n      */\r\n    body: HTMLElement;\r\n    /**\r\n      * Sets or gets the security domain of the document. \r\n      */\r\n    domain: string;\r\n    xmlStandalone: boolean;\r\n    /**\r\n      * Represents the active selection, which is a highlighted block of text or other elements in the document that a user or a script can carry out some action on.\r\n      */\r\n    selection: MSSelection;\r\n    /**\r\n      * Occurs when the download has stopped. \r\n      * @param ev The event.\r\n      */\r\n    onstalled: (ev: Event) => any;\r\n    /**\r\n      * Fires when the user moves the mouse over the object. \r\n      * @param ev The mouse event.\r\n      */\r\n    onmousemove: (ev: MouseEvent) => any;\r\n    /**\r\n      * Fires before an object contained in an editable element enters a UI-activated state or when an editable container object is control selected.\r\n      * @param ev The event.\r\n      */\r\n    onbeforeeditfocus: (ev: MSEventObj) => any;\r\n    /**\r\n      * Occurs when the playback rate is increased or decreased. \r\n      * @param ev The event.\r\n      */\r\n    onratechange: (ev: Event) => any;\r\n    /**\r\n      * Occurs to indicate progress while downloading media data. \r\n      * @param ev The event.\r\n      */\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    /**\r\n      * Fires when the user double-clicks the object.\r\n      * @param ev The mouse event.\r\n      */\r\n    ondblclick: (ev: MouseEvent) => any;\r\n    /**\r\n      * Fires when the user clicks the right mouse button in the client area, opening the context menu. \r\n      * @param ev The mouse event.\r\n      */\r\n    oncontextmenu: (ev: MouseEvent) => any;\r\n    /**\r\n      * Occurs when the duration and dimensions of the media have been determined.\r\n      * @param ev The event.\r\n      */\r\n    onloadedmetadata: (ev: Event) => any;\r\n    media: string;\r\n    /**\r\n      * Fires when an error occurs during object loading.\r\n      * @param ev The event.\r\n      */\r\n    onerror: (ev: ErrorEvent) => any;\r\n    /**\r\n      * Occurs when the play method is requested. \r\n      * @param ev The event.\r\n      */\r\n    onplay: (ev: Event) => any;\r\n    onafterupdate: (ev: MSEventObj) => any;\r\n    /**\r\n      * Occurs when the audio or video has started playing. \r\n      * @param ev The event.\r\n      */\r\n    onplaying: (ev: Event) => any;\r\n    /**\r\n      * Retrieves a collection, in source order, of img objects in the document.\r\n      */\r\n    images: HTMLCollection;\r\n    /**\r\n      * Contains information about the current URL. \r\n      */\r\n    location: Location;\r\n    /**\r\n      * Fires when the user aborts the download.\r\n      * @param ev The event.\r\n      */\r\n    onabort: (ev: UIEvent) => any;\r\n    /**\r\n      * Fires for the current element with focus immediately after moving focus to another element. \r\n      * @param ev The event.\r\n      */\r\n    onfocusout: (ev: FocusEvent) => any;\r\n    /**\r\n      * Fires when the selection state of a document changes.\r\n      * @param ev The event.\r\n      */\r\n    onselectionchange: (ev: Event) => any;\r\n    /**\r\n      * Fires when a local DOM Storage area is written to disk.\r\n      * @param ev The event.\r\n      */\r\n    onstoragecommit: (ev: StorageEvent) => any;\r\n    /**\r\n      * Fires periodically as data arrives from data source objects that asynchronously transmit their data. \r\n      * @param ev The event.\r\n      */\r\n    ondataavailable: (ev: MSEventObj) => any;\r\n    /**\r\n      * Fires when the state of the object has changed.\r\n      * @param ev The event\r\n      */\r\n    onreadystatechange: (ev: Event) => any;\r\n    /**\r\n      * Gets the date that the page was last modified, if the page supplies one. \r\n      */\r\n    lastModified: string;\r\n    /**\r\n      * Fires when the user presses an alphanumeric key.\r\n      * @param ev The event.\r\n      */\r\n    onkeypress: (ev: KeyboardEvent) => any;\r\n    /**\r\n      * Occurs when media data is loaded at the current playback position. \r\n      * @param ev The event.\r\n      */\r\n    onloadeddata: (ev: Event) => any;\r\n    /**\r\n      * Fires immediately before the activeElement is changed from the current object to another object in the parent document.\r\n      * @param ev The event.\r\n      */\r\n    onbeforedeactivate: (ev: UIEvent) => any;\r\n    /**\r\n      * Fires when the object is set as the active element.\r\n      * @param ev The event.\r\n      */\r\n    onactivate: (ev: UIEvent) => any;\r\n    onselectstart: (ev: Event) => any;\r\n    /**\r\n      * Fires when the object receives focus. \r\n      * @param ev The event.\r\n      */\r\n    onfocus: (ev: FocusEvent) => any;\r\n    /**\r\n      * Sets or gets the foreground (text) color of the document.\r\n      */\r\n    fgColor: string;\r\n    /**\r\n      * Occurs to indicate the current playback position.\r\n      * @param ev The event.\r\n      */\r\n    ontimeupdate: (ev: Event) => any;\r\n    /**\r\n      * Fires when the current selection changes.\r\n      * @param ev The event.\r\n      */\r\n    onselect: (ev: UIEvent) => any;\r\n    ondrop: (ev: DragEvent) => any;\r\n    /**\r\n      * Occurs when the end of playback is reached. \r\n      * @param ev The event\r\n      */\r\n    onended: (ev: Event) => any;\r\n    /**\r\n      * Gets a value that indicates whether standards-compliant mode is switched on for the object.\r\n      */\r\n    compatMode: string;\r\n    /**\r\n      * Fires when the user repositions the scroll box in the scroll bar on the object. \r\n      * @param ev The event.\r\n      */\r\n    onscroll: (ev: UIEvent) => any;\r\n    /**\r\n      * Fires to indicate that the current row has changed in the data source and new data values are available on the object. \r\n      * @param ev The event.\r\n      */\r\n    onrowenter: (ev: MSEventObj) => any;\r\n    /**\r\n      * Fires immediately after the browser loads the object. \r\n      * @param ev The event.\r\n      */\r\n    onload: (ev: Event) => any;\r\n    oninput: (ev: Event) => any;\r\n    onmspointerdown: (ev: any) => any;\r\n    msHidden: boolean;\r\n    msVisibilityState: string;\r\n    onmsgesturedoubletap: (ev: any) => any;\r\n    visibilityState: string;\r\n    onmsmanipulationstatechanged: (ev: any) => any;\r\n    onmspointerhover: (ev: any) => any;\r\n    onmscontentzoom: (ev: MSEventObj) => any;\r\n    onmspointermove: (ev: any) => any;\r\n    onmsgesturehold: (ev: any) => any;\r\n    onmsgesturechange: (ev: any) => any;\r\n    onmsgesturestart: (ev: any) => any;\r\n    onmspointercancel: (ev: any) => any;\r\n    onmsgestureend: (ev: any) => any;\r\n    onmsgesturetap: (ev: any) => any;\r\n    onmspointerout: (ev: any) => any;\r\n    onmsinertiastart: (ev: any) => any;\r\n    msCSSOMElementFloatMetrics: boolean;\r\n    onmspointerover: (ev: any) => any;\r\n    hidden: boolean;\r\n    onmspointerup: (ev: any) => any;\r\n    msFullscreenEnabled: boolean;\r\n    onmsfullscreenerror: (ev: any) => any;\r\n    onmspointerenter: (ev: any) => any;\r\n    msFullscreenElement: Element;\r\n    onmsfullscreenchange: (ev: any) => any;\r\n    onmspointerleave: (ev: any) => any;\r\n    /**\r\n      * Returns a reference to the first object with the specified value of the ID or NAME attribute.\r\n      * @param elementId String that specifies the ID value. Case-insensitive.\r\n      */\r\n    getElementById(elementId: string): HTMLElement;\r\n    /**\r\n      * Returns the current value of the document, range, or current selection for the given command.\r\n      * @param commandId String that specifies a command identifier.\r\n      */\r\n    queryCommandValue(commandId: string): string;\r\n    adoptNode(source: Node): Node;\r\n    /**\r\n      * Returns a Boolean value that indicates whether the specified command is in the indeterminate state.\r\n      * @param commandId String that specifies a command identifier.\r\n      */\r\n    queryCommandIndeterm(commandId: string): boolean;\r\n    getElementsByTagNameNS(namespaceURI: string, localName: string): NodeList;\r\n    createProcessingInstruction(target: string, data: string): ProcessingInstruction;\r\n    /**\r\n      * Executes a command on the current document, current selection, or the given range.\r\n      * @param commandId String that specifies the command to execute. This command can be any of the command identifiers that can be executed in script.\r\n      * @param showUI Display the user interface, defaults to false.\r\n      * @param value Value to assign.\r\n      */\r\n    execCommand(commandId: string, showUI?: boolean, value?: any): boolean;\r\n    /**\r\n      * Returns the element for the specified x coordinate and the specified y coordinate. \r\n      * @param x The x-offset\r\n      * @param y The y-offset\r\n      */\r\n    elementFromPoint(x: number, y: number): Element;\r\n    createCDATASection(data: string): CDATASection;\r\n    /**\r\n      * Retrieves the string associated with a command.\r\n      * @param commandId String that contains the identifier of a command. This can be any command identifier given in the list of Command Identifiers. \r\n      */\r\n    queryCommandText(commandId: string): string;\r\n    /**\r\n      * Writes one or more HTML expressions to a document in the specified window. \r\n      * @param content Specifies the text and HTML tags to write.\r\n      */\r\n    write(...content: string[]): void;\r\n    /**\r\n      * Allows updating the print settings for the page.\r\n      */\r\n    updateSettings(): void;\r\n    /**\r\n      * Creates an instance of the element for the specified tag.\r\n      * @param tagName The name of an element.\r\n      */\r\n    createElement(tagName: \"a\"): HTMLAnchorElement;\r\n    createElement(tagName: \"abbr\"): HTMLPhraseElement;\r\n    createElement(tagName: \"acronym\"): HTMLPhraseElement;\r\n    createElement(tagName: \"address\"): HTMLBlockElement;\r\n    createElement(tagName: \"applet\"): HTMLAppletElement;\r\n    createElement(tagName: \"area\"): HTMLAreaElement;\r\n    createElement(tagName: \"article\"): HTMLElement;\r\n    createElement(tagName: \"aside\"): HTMLElement;\r\n    createElement(tagName: \"audio\"): HTMLAudioElement;\r\n    createElement(tagName: \"b\"): HTMLPhraseElement;\r\n    createElement(tagName: \"base\"): HTMLBaseElement;\r\n    createElement(tagName: \"basefont\"): HTMLBaseFontElement;\r\n    createElement(tagName: \"bdo\"): HTMLPhraseElement;\r\n    createElement(tagName: \"bgsound\"): HTMLBGSoundElement;\r\n    createElement(tagName: \"big\"): HTMLPhraseElement;\r\n    createElement(tagName: \"blockquote\"): HTMLBlockElement;\r\n    createElement(tagName: \"body\"): HTMLBodyElement;\r\n    createElement(tagName: \"br\"): HTMLBRElement;\r\n    createElement(tagName: \"button\"): HTMLButtonElement;\r\n    createElement(tagName: \"canvas\"): HTMLCanvasElement;\r\n    createElement(tagName: \"caption\"): HTMLTableCaptionElement;\r\n    createElement(tagName: \"center\"): HTMLBlockElement;\r\n    createElement(tagName: \"cite\"): HTMLPhraseElement;\r\n    createElement(tagName: \"code\"): HTMLPhraseElement;\r\n    createElement(tagName: \"col\"): HTMLTableColElement;\r\n    createElement(tagName: \"colgroup\"): HTMLTableColElement;\r\n    createElement(tagName: \"datalist\"): HTMLDataListElement;\r\n    createElement(tagName: \"dd\"): HTMLDDElement;\r\n    createElement(tagName: \"del\"): HTMLModElement;\r\n    createElement(tagName: \"dfn\"): HTMLPhraseElement;\r\n    createElement(tagName: \"dir\"): HTMLDirectoryElement;\r\n    createElement(tagName: \"div\"): HTMLDivElement;\r\n    createElement(tagName: \"dl\"): HTMLDListElement;\r\n    createElement(tagName: \"dt\"): HTMLDTElement;\r\n    createElement(tagName: \"em\"): HTMLPhraseElement;\r\n    createElement(tagName: \"embed\"): HTMLEmbedElement;\r\n    createElement(tagName: \"fieldset\"): HTMLFieldSetElement;\r\n    createElement(tagName: \"figcaption\"): HTMLElement;\r\n    createElement(tagName: \"figure\"): HTMLElement;\r\n    createElement(tagName: \"font\"): HTMLFontElement;\r\n    createElement(tagName: \"footer\"): HTMLElement;\r\n    createElement(tagName: \"form\"): HTMLFormElement;\r\n    createElement(tagName: \"frame\"): HTMLFrameElement;\r\n    createElement(tagName: \"frameset\"): HTMLFrameSetElement;\r\n    createElement(tagName: \"h1\"): HTMLHeadingElement;\r\n    createElement(tagName: \"h2\"): HTMLHeadingElement;\r\n    createElement(tagName: \"h3\"): HTMLHeadingElement;\r\n    createElement(tagName: \"h4\"): HTMLHeadingElement;\r\n    createElement(tagName: \"h5\"): HTMLHeadingElement;\r\n    createElement(tagName: \"h6\"): HTMLHeadingElement;\r\n    createElement(tagName: \"head\"): HTMLHeadElement;\r\n    createElement(tagName: \"header\"): HTMLElement;\r\n    createElement(tagName: \"hgroup\"): HTMLElement;\r\n    createElement(tagName: \"hr\"): HTMLHRElement;\r\n    createElement(tagName: \"html\"): HTMLHtmlElement;\r\n    createElement(tagName: \"i\"): HTMLPhraseElement;\r\n    createElement(tagName: \"iframe\"): HTMLIFrameElement;\r\n    createElement(tagName: \"img\"): HTMLImageElement;\r\n    createElement(tagName: \"input\"): HTMLInputElement;\r\n    createElement(tagName: \"ins\"): HTMLModElement;\r\n    createElement(tagName: \"isindex\"): HTMLIsIndexElement;\r\n    createElement(tagName: \"kbd\"): HTMLPhraseElement;\r\n    createElement(tagName: \"keygen\"): HTMLBlockElement;\r\n    createElement(tagName: \"label\"): HTMLLabelElement;\r\n    createElement(tagName: \"legend\"): HTMLLegendElement;\r\n    createElement(tagName: \"li\"): HTMLLIElement;\r\n    createElement(tagName: \"link\"): HTMLLinkElement;\r\n    createElement(tagName: \"listing\"): HTMLBlockElement;\r\n    createElement(tagName: \"map\"): HTMLMapElement;\r\n    createElement(tagName: \"mark\"): HTMLElement;\r\n    createElement(tagName: \"marquee\"): HTMLMarqueeElement;\r\n    createElement(tagName: \"menu\"): HTMLMenuElement;\r\n    createElement(tagName: \"meta\"): HTMLMetaElement;\r\n    createElement(tagName: \"nav\"): HTMLElement;\r\n    createElement(tagName: \"nextid\"): HTMLNextIdElement;\r\n    createElement(tagName: \"nobr\"): HTMLPhraseElement;\r\n    createElement(tagName: \"noframes\"): HTMLElement;\r\n    createElement(tagName: \"noscript\"): HTMLElement;\r\n    createElement(tagName: \"object\"): HTMLObjectElement;\r\n    createElement(tagName: \"ol\"): HTMLOListElement;\r\n    createElement(tagName: \"optgroup\"): HTMLOptGroupElement;\r\n    createElement(tagName: \"option\"): HTMLOptionElement;\r\n    createElement(tagName: \"p\"): HTMLParagraphElement;\r\n    createElement(tagName: \"param\"): HTMLParamElement;\r\n    createElement(tagName: \"plaintext\"): HTMLBlockElement;\r\n    createElement(tagName: \"pre\"): HTMLPreElement;\r\n    createElement(tagName: \"progress\"): HTMLProgressElement;\r\n    createElement(tagName: \"q\"): HTMLQuoteElement;\r\n    createElement(tagName: \"rt\"): HTMLPhraseElement;\r\n    createElement(tagName: \"ruby\"): HTMLPhraseElement;\r\n    createElement(tagName: \"s\"): HTMLPhraseElement;\r\n    createElement(tagName: \"samp\"): HTMLPhraseElement;\r\n    createElement(tagName: \"script\"): HTMLScriptElement;\r\n    createElement(tagName: \"section\"): HTMLElement;\r\n    createElement(tagName: \"select\"): HTMLSelectElement;\r\n    createElement(tagName: \"small\"): HTMLPhraseElement;\r\n    createElement(tagName: \"SOURCE\"): HTMLSourceElement;\r\n    createElement(tagName: \"span\"): HTMLSpanElement;\r\n    createElement(tagName: \"strike\"): HTMLPhraseElement;\r\n    createElement(tagName: \"strong\"): HTMLPhraseElement;\r\n    createElement(tagName: \"style\"): HTMLStyleElement;\r\n    createElement(tagName: \"sub\"): HTMLPhraseElement;\r\n    createElement(tagName: \"sup\"): HTMLPhraseElement;\r\n    createElement(tagName: \"table\"): HTMLTableElement;\r\n    createElement(tagName: \"tbody\"): HTMLTableSectionElement;\r\n    createElement(tagName: \"td\"): HTMLTableDataCellElement;\r\n    createElement(tagName: \"textarea\"): HTMLTextAreaElement;\r\n    createElement(tagName: \"tfoot\"): HTMLTableSectionElement;\r\n    createElement(tagName: \"th\"): HTMLTableHeaderCellElement;\r\n    createElement(tagName: \"thead\"): HTMLTableSectionElement;\r\n    createElement(tagName: \"title\"): HTMLTitleElement;\r\n    createElement(tagName: \"tr\"): HTMLTableRowElement;\r\n    createElement(tagName: \"track\"): HTMLTrackElement;\r\n    createElement(tagName: \"tt\"): HTMLPhraseElement;\r\n    createElement(tagName: \"u\"): HTMLPhraseElement;\r\n    createElement(tagName: \"ul\"): HTMLUListElement;\r\n    createElement(tagName: \"var\"): HTMLPhraseElement;\r\n    createElement(tagName: \"video\"): HTMLVideoElement;\r\n    createElement(tagName: \"wbr\"): HTMLElement;\r\n    createElement(tagName: \"x-ms-webview\"): MSHTMLWebViewElement;\r\n    createElement(tagName: \"xmp\"): HTMLBlockElement;\r\n    createElement(tagName: string): HTMLElement;\r\n    /**\r\n      * Removes mouse capture from the object in the current document.\r\n      */\r\n    releaseCapture(): void;\r\n    /**\r\n      * Writes one or more HTML expressions, followed by a carriage return, to a document in the specified window. \r\n      * @param content The text and HTML tags to write.\r\n      */\r\n    writeln(...content: string[]): void;\r\n    createElementNS(namespaceURI: string, qualifiedName: string): Element;\r\n    /**\r\n      * Opens a new window and loads a document specified by a given URL. Also, opens a new window that uses the url parameter and the name parameter to collect the output of the write method and the writeln method.\r\n      * @param url Specifies a MIME type for the document.\r\n      * @param name Specifies the name of the window. This name is used as the value for the TARGET attribute on a form or an anchor element.\r\n      * @param features Contains a list of items separated by commas. Each item consists of an option and a value, separated by an equals sign (for example, \"fullscreen=yes, toolbar=yes\"). The following values are supported.\r\n      * @param replace Specifies whether the existing entry for the document is replaced in the history list.\r\n      */\r\n    open(url?: string, name?: string, features?: string, replace?: boolean): any;\r\n    /**\r\n      * Returns a Boolean value that indicates whether the current command is supported on the current range.\r\n      * @param commandId Specifies a command identifier.\r\n      */\r\n    queryCommandSupported(commandId: string): boolean;\r\n    /**\r\n      * Creates a TreeWalker object that you can use to traverse filtered lists of nodes or elements in a document.\r\n      * @param root The root element or node to start traversing on.\r\n      * @param whatToShow The type of nodes or elements to appear in the node list. For more information, see whatToShow.\r\n      * @param filter A custom NodeFilter function to use.\r\n      * @param entityReferenceExpansion A flag that specifies whether entity reference nodes are expanded.\r\n      */\r\n    createTreeWalker(root: Node, whatToShow: number, filter: NodeFilter, entityReferenceExpansion: boolean): TreeWalker;\r\n    createAttributeNS(namespaceURI: string, qualifiedName: string): Attr;\r\n    /** \r\n      * Returns a Boolean value that indicates whether a specified command can be successfully executed using execCommand, given the current state of the document.\r\n      * @param commandId Specifies a command identifier.\r\n      */\r\n    queryCommandEnabled(commandId: string): boolean;\r\n    /**\r\n      * Causes the element to receive the focus and executes the code specified by the onfocus event.\r\n      */\r\n    focus(): void;\r\n    /**\r\n      * Closes an output stream and forces the sent data to display.\r\n      */\r\n    close(): void;\r\n    getElementsByClassName(classNames: string): NodeList;\r\n    importNode(importedNode: Node, deep: boolean): Node;\r\n    /**\r\n      *  Returns an empty range object that has both of its boundary points positioned at the beginning of the document. \r\n      */\r\n    createRange(): Range;\r\n    /**\r\n      * Fires a specified event on the object.\r\n      * @param eventName Specifies the name of the event to fire.\r\n      * @param eventObj Object that specifies the event object from which to obtain event object properties.\r\n      */\r\n    fireEvent(eventName: string, eventObj?: any): boolean;\r\n    /**\r\n      * Creates a comment object with the specified data.\r\n      * @param data Sets the comment object's data.\r\n      */\r\n    createComment(data: string): Comment;\r\n    /**\r\n      * Retrieves a collection of objects based on the specified element name.\r\n      * @param name Specifies the name of an element.\r\n      */\r\n    getElementsByTagName(name: \"a\"): NodeListOf<HTMLAnchorElement>;\r\n    getElementsByTagName(name: \"abbr\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"acronym\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"address\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(name: \"applet\"): NodeListOf<HTMLAppletElement>;\r\n    getElementsByTagName(name: \"area\"): NodeListOf<HTMLAreaElement>;\r\n    getElementsByTagName(name: \"article\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"aside\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"audio\"): NodeListOf<HTMLAudioElement>;\r\n    getElementsByTagName(name: \"b\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"base\"): NodeListOf<HTMLBaseElement>;\r\n    getElementsByTagName(name: \"basefont\"): NodeListOf<HTMLBaseFontElement>;\r\n    getElementsByTagName(name: \"bdo\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"bgsound\"): NodeListOf<HTMLBGSoundElement>;\r\n    getElementsByTagName(name: \"big\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"blockquote\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(name: \"body\"): NodeListOf<HTMLBodyElement>;\r\n    getElementsByTagName(name: \"br\"): NodeListOf<HTMLBRElement>;\r\n    getElementsByTagName(name: \"button\"): NodeListOf<HTMLButtonElement>;\r\n    getElementsByTagName(name: \"canvas\"): NodeListOf<HTMLCanvasElement>;\r\n    getElementsByTagName(name: \"caption\"): NodeListOf<HTMLTableCaptionElement>;\r\n    getElementsByTagName(name: \"center\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(name: \"cite\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"code\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"col\"): NodeListOf<HTMLTableColElement>;\r\n    getElementsByTagName(name: \"colgroup\"): NodeListOf<HTMLTableColElement>;\r\n    getElementsByTagName(name: \"datalist\"): NodeListOf<HTMLDataListElement>;\r\n    getElementsByTagName(name: \"dd\"): NodeListOf<HTMLDDElement>;\r\n    getElementsByTagName(name: \"del\"): NodeListOf<HTMLModElement>;\r\n    getElementsByTagName(name: \"dfn\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"dir\"): NodeListOf<HTMLDirectoryElement>;\r\n    getElementsByTagName(name: \"div\"): NodeListOf<HTMLDivElement>;\r\n    getElementsByTagName(name: \"dl\"): NodeListOf<HTMLDListElement>;\r\n    getElementsByTagName(name: \"dt\"): NodeListOf<HTMLDTElement>;\r\n    getElementsByTagName(name: \"em\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"embed\"): NodeListOf<HTMLEmbedElement>;\r\n    getElementsByTagName(name: \"fieldset\"): NodeListOf<HTMLFieldSetElement>;\r\n    getElementsByTagName(name: \"figcaption\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"figure\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"font\"): NodeListOf<HTMLFontElement>;\r\n    getElementsByTagName(name: \"footer\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"form\"): NodeListOf<HTMLFormElement>;\r\n    getElementsByTagName(name: \"frame\"): NodeListOf<HTMLFrameElement>;\r\n    getElementsByTagName(name: \"frameset\"): NodeListOf<HTMLFrameSetElement>;\r\n    getElementsByTagName(name: \"h1\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: \"h2\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: \"h3\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: \"h4\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: \"h5\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: \"h6\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: \"head\"): NodeListOf<HTMLHeadElement>;\r\n    getElementsByTagName(name: \"header\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"hgroup\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"hr\"): NodeListOf<HTMLHRElement>;\r\n    getElementsByTagName(name: \"html\"): NodeListOf<HTMLHtmlElement>;\r\n    getElementsByTagName(name: \"i\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"iframe\"): NodeListOf<HTMLIFrameElement>;\r\n    getElementsByTagName(name: \"img\"): NodeListOf<HTMLImageElement>;\r\n    getElementsByTagName(name: \"input\"): NodeListOf<HTMLInputElement>;\r\n    getElementsByTagName(name: \"ins\"): NodeListOf<HTMLModElement>;\r\n    getElementsByTagName(name: \"isindex\"): NodeListOf<HTMLIsIndexElement>;\r\n    getElementsByTagName(name: \"kbd\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"keygen\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(name: \"label\"): NodeListOf<HTMLLabelElement>;\r\n    getElementsByTagName(name: \"legend\"): NodeListOf<HTMLLegendElement>;\r\n    getElementsByTagName(name: \"li\"): NodeListOf<HTMLLIElement>;\r\n    getElementsByTagName(name: \"link\"): NodeListOf<HTMLLinkElement>;\r\n    getElementsByTagName(name: \"listing\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(name: \"map\"): NodeListOf<HTMLMapElement>;\r\n    getElementsByTagName(name: \"mark\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"marquee\"): NodeListOf<HTMLMarqueeElement>;\r\n    getElementsByTagName(name: \"menu\"): NodeListOf<HTMLMenuElement>;\r\n    getElementsByTagName(name: \"meta\"): NodeListOf<HTMLMetaElement>;\r\n    getElementsByTagName(name: \"nav\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"nextid\"): NodeListOf<HTMLNextIdElement>;\r\n    getElementsByTagName(name: \"nobr\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"noframes\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"noscript\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"object\"): NodeListOf<HTMLObjectElement>;\r\n    getElementsByTagName(name: \"ol\"): NodeListOf<HTMLOListElement>;\r\n    getElementsByTagName(name: \"optgroup\"): NodeListOf<HTMLOptGroupElement>;\r\n    getElementsByTagName(name: \"option\"): NodeListOf<HTMLOptionElement>;\r\n    getElementsByTagName(name: \"p\"): NodeListOf<HTMLParagraphElement>;\r\n    getElementsByTagName(name: \"param\"): NodeListOf<HTMLParamElement>;\r\n    getElementsByTagName(name: \"plaintext\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(name: \"pre\"): NodeListOf<HTMLPreElement>;\r\n    getElementsByTagName(name: \"progress\"): NodeListOf<HTMLProgressElement>;\r\n    getElementsByTagName(name: \"q\"): NodeListOf<HTMLQuoteElement>;\r\n    getElementsByTagName(name: \"rt\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"ruby\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"s\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"samp\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"script\"): NodeListOf<HTMLScriptElement>;\r\n    getElementsByTagName(name: \"section\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"select\"): NodeListOf<HTMLSelectElement>;\r\n    getElementsByTagName(name: \"small\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"SOURCE\"): NodeListOf<HTMLSourceElement>;\r\n    getElementsByTagName(name: \"span\"): NodeListOf<HTMLSpanElement>;\r\n    getElementsByTagName(name: \"strike\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"strong\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"style\"): NodeListOf<HTMLStyleElement>;\r\n    getElementsByTagName(name: \"sub\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"sup\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"table\"): NodeListOf<HTMLTableElement>;\r\n    getElementsByTagName(name: \"tbody\"): NodeListOf<HTMLTableSectionElement>;\r\n    getElementsByTagName(name: \"td\"): NodeListOf<HTMLTableDataCellElement>;\r\n    getElementsByTagName(name: \"textarea\"): NodeListOf<HTMLTextAreaElement>;\r\n    getElementsByTagName(name: \"tfoot\"): NodeListOf<HTMLTableSectionElement>;\r\n    getElementsByTagName(name: \"th\"): NodeListOf<HTMLTableHeaderCellElement>;\r\n    getElementsByTagName(name: \"thead\"): NodeListOf<HTMLTableSectionElement>;\r\n    getElementsByTagName(name: \"title\"): NodeListOf<HTMLTitleElement>;\r\n    getElementsByTagName(name: \"tr\"): NodeListOf<HTMLTableRowElement>;\r\n    getElementsByTagName(name: \"track\"): NodeListOf<HTMLTrackElement>;\r\n    getElementsByTagName(name: \"tt\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"u\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"ul\"): NodeListOf<HTMLUListElement>;\r\n    getElementsByTagName(name: \"var\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"video\"): NodeListOf<HTMLVideoElement>;\r\n    getElementsByTagName(name: \"wbr\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"x-ms-webview\"): NodeListOf<MSHTMLWebViewElement>;\r\n    getElementsByTagName(name: \"xmp\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(name: string): NodeList;\r\n    /**\r\n      * Creates a new document.\r\n      */\r\n    createDocumentFragment(): DocumentFragment;\r\n    /**\r\n      * Creates a style sheet for the document. \r\n      * @param href Specifies how to add the style sheet to the document. If a file name is specified for the URL, the style information is added as a link object. If the URL contains style information, it is added to the style object.\r\n      * @param index Specifies the index that indicates where the new style sheet is inserted in the styleSheets collection. The default is to insert the new style sheet at the end of the collection.\r\n      */\r\n    createStyleSheet(href?: string, index?: number): CSSStyleSheet;\r\n    /**\r\n      * Gets a collection of objects based on the value of the NAME or ID attribute.\r\n      * @param elementName Gets a collection of objects based on the value of the NAME or ID attribute.\r\n      */\r\n    getElementsByName(elementName: string): NodeList;\r\n    /**\r\n      * Returns a Boolean value that indicates the current state of the command.\r\n      * @param commandId String that specifies a command identifier.\r\n      */\r\n    queryCommandState(commandId: string): boolean;\r\n    /**\r\n      * Gets a value indicating whether the object currently has focus.\r\n      */\r\n    hasFocus(): boolean;\r\n    /**\r\n      * Displays help information for the given command identifier.\r\n      * @param commandId Displays help information for the given command identifier.\r\n      */\r\n    execCommandShowHelp(commandId: string): boolean;\r\n    /**\r\n      * Creates an attribute object with a specified name.\r\n      * @param name String that sets the attribute object's name.\r\n      */\r\n    createAttribute(name: string): Attr;\r\n    /**\r\n      * Creates a text string from the specified value. \r\n      * @param data String that specifies the nodeValue property of the text node.\r\n      */\r\n    createTextNode(data: string): Text;\r\n    /**\r\n      * Creates a NodeIterator object that you can use to traverse filtered lists of nodes or elements in a document. \r\n      * @param root The root element or node to start traversing on.\r\n      * @param whatToShow The type of nodes or elements to appear in the node list\r\n      * @param filter A custom NodeFilter function to use. For more information, see filter. Use null for no filter.\r\n      * @param entityReferenceExpansion A flag that specifies whether entity reference nodes are expanded.\r\n      */\r\n    createNodeIterator(root: Node, whatToShow: number, filter: NodeFilter, entityReferenceExpansion: boolean): NodeIterator;\r\n    /**\r\n      * Generates an event object to pass event context information when you use the fireEvent method.\r\n      * @param eventObj An object that specifies an existing event object on which to base the new object.\r\n      */\r\n    createEventObject(eventObj?: any): MSEventObj;\r\n    /**\r\n      * Returns an object representing the current selection of the document that is loaded into the object displaying a webpage.\r\n      */\r\n    getSelection(): Selection;\r\n    msElementsFromPoint(x: number, y: number): NodeList;\r\n    msElementsFromRect(left: number, top: number, width: number, height: number): NodeList;\r\n    clear(): void;\r\n    msExitFullscreen(): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"help\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusin\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"datasetchanged\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowsdelete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"controlselect\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"datasetcomplete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"errorupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msthumbnailclick\", listener: (ev: MSSiteModeEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cellchange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowexit\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowsinserted\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"propertychange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stop\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mssitemodejumplistitemremoved\", listener: (ev: MSSiteModeEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeeditfocus\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"afterupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusout\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectionchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"storagecommit\", listener: (ev: StorageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dataavailable\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"readystatechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowenter\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerdown\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturedoubletap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msmanipulationstatechanged\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerhover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mscontentzoom\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointermove\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturehold\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturechange\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturestart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointercancel\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgestureend\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturetap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerout\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msinertiastart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerup\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msfullscreenerror\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerenter\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msfullscreenchange\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerleave\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var Document: {\r\n    prototype: Document;\r\n    new(): Document;\r\n}\r\n\r\ninterface Console {\r\n    info(message?: any, ...optionalParams: any[]): void;\r\n    warn(message?: any, ...optionalParams: any[]): void;\r\n    error(message?: any, ...optionalParams: any[]): void;\r\n    log(message?: any, ...optionalParams: any[]): void;\r\n    profile(reportName?: string): void;\r\n    assert(test?: boolean, message?: string, ...optionalParams: any[]): void;\r\n    msIsIndependentlyComposed(element: Element): boolean;\r\n    clear(): void;\r\n    dir(value?: any, ...optionalParams: any[]): void;\r\n    profileEnd(): void;\r\n    count(countTitle?: string): void;\r\n    groupEnd(): void;\r\n    time(timerName?: string): void;\r\n    timeEnd(timerName?: string): void;\r\n    trace(): void;\r\n    group(groupTitle?: string): void;\r\n    dirxml(value: any): void;\r\n    debug(message?: string, ...optionalParams: any[]): void;\r\n    groupCollapsed(groupTitle?: string): void;\r\n    select(element: Element): void;\r\n}\r\ndeclare var Console: {\r\n    prototype: Console;\r\n    new(): Console;\r\n}\r\n\r\ninterface MSEventObj extends Event {\r\n    nextPage: string;\r\n    keyCode: number;\r\n    toElement: Element;\r\n    returnValue: any;\r\n    dataFld: string;\r\n    y: number;\r\n    dataTransfer: DataTransfer;\r\n    propertyName: string;\r\n    url: string;\r\n    offsetX: number;\r\n    recordset: any;\r\n    screenX: number;\r\n    buttonID: number;\r\n    wheelDelta: number;\r\n    reason: number;\r\n    origin: string;\r\n    data: string;\r\n    srcFilter: any;\r\n    boundElements: HTMLCollection;\r\n    cancelBubble: boolean;\r\n    altLeft: boolean;\r\n    behaviorCookie: number;\r\n    bookmarks: BookmarkCollection;\r\n    type: string;\r\n    repeat: boolean;\r\n    srcElement: Element;\r\n    source: Window;\r\n    fromElement: Element;\r\n    offsetY: number;\r\n    x: number;\r\n    behaviorPart: number;\r\n    qualifier: string;\r\n    altKey: boolean;\r\n    ctrlKey: boolean;\r\n    clientY: number;\r\n    shiftKey: boolean;\r\n    shiftLeft: boolean;\r\n    contentOverflow: boolean;\r\n    screenY: number;\r\n    ctrlLeft: boolean;\r\n    button: number;\r\n    srcUrn: string;\r\n    clientX: number;\r\n    actionURL: string;\r\n    getAttribute(strAttributeName: string, lFlags?: number): any;\r\n    setAttribute(strAttributeName: string, AttributeValue: any, lFlags?: number): void;\r\n    removeAttribute(strAttributeName: string, lFlags?: number): boolean;\r\n}\r\ndeclare var MSEventObj: {\r\n    prototype: MSEventObj;\r\n    new(): MSEventObj;\r\n}\r\n\r\ninterface HTMLCanvasElement extends HTMLElement {\r\n    /**\r\n      * Gets or sets the width of a canvas element on a document.\r\n      */\r\n    width: number;\r\n    /**\r\n      * Gets or sets the height of a canvas element on a document.\r\n      */\r\n    height: number;\r\n    /**\r\n      * Returns an object that provides methods and properties for drawing and manipulating images and graphics on a canvas element in a document. A context object includes information about colors, line widths, fonts, and other graphic parameters that can be drawn on a canvas.\r\n      * @param contextId The identifier (ID) of the type of canvas to create. Internet Explorer 9 and Internet Explorer 10 support only a 2-D context using canvas.getContext(\"2d\"); IE11 Preview also supports 3-D or WebGL context using canvas.getContext(\"experimental-webgl\");\r\n      */\r\n    getContext(contextId: \"2d\"): CanvasRenderingContext2D;\r\n    /**\r\n      * Returns an object that provides methods and properties for drawing and manipulating images and graphics on a canvas element in a document. A context object includes information about colors, line widths, fonts, and other graphic parameters that can be drawn on a canvas.\r\n      * @param contextId The identifier (ID) of the type of canvas to create. Internet Explorer 9 and Internet Explorer 10 support only a 2-D context using canvas.getContext(\"2d\"); IE11 Preview also supports 3-D or WebGL context using canvas.getContext(\"experimental-webgl\");\r\n      */\r\n    getContext(contextId: \"experimental-webgl\"): WebGLRenderingContext;\r\n    /**\r\n      * Returns an object that provides methods and properties for drawing and manipulating images and graphics on a canvas element in a document. A context object includes information about colors, line widths, fonts, and other graphic parameters that can be drawn on a canvas.\r\n      * @param contextId The identifier (ID) of the type of canvas to create. Internet Explorer 9 and Internet Explorer 10 support only a 2-D context using canvas.getContext(\"2d\"); IE11 Preview also supports 3-D or WebGL context using canvas.getContext(\"experimental-webgl\");\r\n      */\r\n    getContext(contextId: string, ...args: any[]): any;\r\n    /**\r\n      * Returns the content of the current canvas as an image that you can use as a source for another canvas or an HTML element.\r\n      * @param type The standard MIME type for the image format to return. If you do not specify this parameter, the default value is a PNG format image.\r\n      */\r\n    toDataURL(type?: string, ...args: any[]): string;\r\n    /**\r\n      * Returns a blob object encoded as a Portable Network Graphics (PNG) format from a canvas image or drawing.\r\n      */\r\n    msToBlob(): Blob;\r\n}\r\ndeclare var HTMLCanvasElement: {\r\n    prototype: HTMLCanvasElement;\r\n    new(): HTMLCanvasElement;\r\n}\r\n\r\ninterface Window extends EventTarget, MSEventAttachmentTarget, WindowLocalStorage, MSWindowExtensions, WindowSessionStorage, WindowTimers, WindowBase64, IDBEnvironment, WindowConsole, GlobalEventHandlers {\r\n    ondragend: (ev: DragEvent) => any;\r\n    onkeydown: (ev: KeyboardEvent) => any;\r\n    ondragover: (ev: DragEvent) => any;\r\n    onkeyup: (ev: KeyboardEvent) => any;\r\n    onreset: (ev: Event) => any;\r\n    onmouseup: (ev: MouseEvent) => any;\r\n    ondragstart: (ev: DragEvent) => any;\r\n    ondrag: (ev: DragEvent) => any;\r\n    screenX: number;\r\n    onmouseover: (ev: MouseEvent) => any;\r\n    ondragleave: (ev: DragEvent) => any;\r\n    history: History;\r\n    pageXOffset: number;\r\n    name: string;\r\n    onafterprint: (ev: Event) => any;\r\n    onpause: (ev: Event) => any;\r\n    onbeforeprint: (ev: Event) => any;\r\n    top: Window;\r\n    onmousedown: (ev: MouseEvent) => any;\r\n    onseeked: (ev: Event) => any;\r\n    opener: Window;\r\n    onclick: (ev: MouseEvent) => any;\r\n    innerHeight: number;\r\n    onwaiting: (ev: Event) => any;\r\n    ononline: (ev: Event) => any;\r\n    ondurationchange: (ev: Event) => any;\r\n    frames: Window;\r\n    onblur: (ev: FocusEvent) => any;\r\n    onemptied: (ev: Event) => any;\r\n    onseeking: (ev: Event) => any;\r\n    oncanplay: (ev: Event) => any;\r\n    outerWidth: number;\r\n    onstalled: (ev: Event) => any;\r\n    onmousemove: (ev: MouseEvent) => any;\r\n    innerWidth: number;\r\n    onoffline: (ev: Event) => any;\r\n    length: number;\r\n    screen: Screen;\r\n    onbeforeunload: (ev: BeforeUnloadEvent) => any;\r\n    onratechange: (ev: Event) => any;\r\n    onstorage: (ev: StorageEvent) => any;\r\n    onloadstart: (ev: Event) => any;\r\n    ondragenter: (ev: DragEvent) => any;\r\n    onsubmit: (ev: Event) => any;\r\n    self: Window;\r\n    document: Document;\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    ondblclick: (ev: MouseEvent) => any;\r\n    pageYOffset: number;\r\n    oncontextmenu: (ev: MouseEvent) => any;\r\n    onchange: (ev: Event) => any;\r\n    onloadedmetadata: (ev: Event) => any;\r\n    onplay: (ev: Event) => any;\r\n    onerror: ErrorEventHandler;\r\n    onplaying: (ev: Event) => any;\r\n    parent: Window;\r\n    location: Location;\r\n    oncanplaythrough: (ev: Event) => any;\r\n    onabort: (ev: UIEvent) => any;\r\n    onreadystatechange: (ev: Event) => any;\r\n    outerHeight: number;\r\n    onkeypress: (ev: KeyboardEvent) => any;\r\n    frameElement: Element;\r\n    onloadeddata: (ev: Event) => any;\r\n    onsuspend: (ev: Event) => any;\r\n    window: Window;\r\n    onfocus: (ev: FocusEvent) => any;\r\n    onmessage: (ev: MessageEvent) => any;\r\n    ontimeupdate: (ev: Event) => any;\r\n    onresize: (ev: UIEvent) => any;\r\n    onselect: (ev: UIEvent) => any;\r\n    navigator: Navigator;\r\n    styleMedia: StyleMedia;\r\n    ondrop: (ev: DragEvent) => any;\r\n    onmouseout: (ev: MouseEvent) => any;\r\n    onended: (ev: Event) => any;\r\n    onhashchange: (ev: Event) => any;\r\n    onunload: (ev: Event) => any;\r\n    onscroll: (ev: UIEvent) => any;\r\n    screenY: number;\r\n    onmousewheel: (ev: MouseWheelEvent) => any;\r\n    onload: (ev: Event) => any;\r\n    onvolumechange: (ev: Event) => any;\r\n    oninput: (ev: Event) => any;\r\n    performance: Performance;\r\n    onmspointerdown: (ev: any) => any;\r\n    animationStartTime: number;\r\n    onmsgesturedoubletap: (ev: any) => any;\r\n    onmspointerhover: (ev: any) => any;\r\n    onmsgesturehold: (ev: any) => any;\r\n    onmspointermove: (ev: any) => any;\r\n    onmsgesturechange: (ev: any) => any;\r\n    onmsgesturestart: (ev: any) => any;\r\n    onmspointercancel: (ev: any) => any;\r\n    onmsgestureend: (ev: any) => any;\r\n    onmsgesturetap: (ev: any) => any;\r\n    onmspointerout: (ev: any) => any;\r\n    msAnimationStartTime: number;\r\n    applicationCache: ApplicationCache;\r\n    onmsinertiastart: (ev: any) => any;\r\n    onmspointerover: (ev: any) => any;\r\n    onpopstate: (ev: PopStateEvent) => any;\r\n    onmspointerup: (ev: any) => any;\r\n    onpageshow: (ev: PageTransitionEvent) => any;\r\n    ondevicemotion: (ev: DeviceMotionEvent) => any;\r\n    devicePixelRatio: number;\r\n    msCrypto: Crypto;\r\n    ondeviceorientation: (ev: DeviceOrientationEvent) => any;\r\n    doNotTrack: string;\r\n    onmspointerenter: (ev: any) => any;\r\n    onpagehide: (ev: PageTransitionEvent) => any;\r\n    onmspointerleave: (ev: any) => any;\r\n    alert(message?: any): void;\r\n    scroll(x?: number, y?: number): void;\r\n    focus(): void;\r\n    scrollTo(x?: number, y?: number): void;\r\n    print(): void;\r\n    prompt(message?: string, _default?: string): string;\r\n    toString(): string;\r\n    open(url?: string, target?: string, features?: string, replace?: boolean): Window;\r\n    scrollBy(x?: number, y?: number): void;\r\n    confirm(message?: string): boolean;\r\n    close(): void;\r\n    postMessage(message: any, targetOrigin: string, ports?: any): void;\r\n    showModalDialog(url?: string, argument?: any, options?: any): any;\r\n    blur(): void;\r\n    getSelection(): Selection;\r\n    getComputedStyle(elt: Element, pseudoElt?: string): CSSStyleDeclaration;\r\n    msCancelRequestAnimationFrame(handle: number): void;\r\n    matchMedia(mediaQuery: string): MediaQueryList;\r\n    cancelAnimationFrame(handle: number): void;\r\n    msIsStaticHTML(html: string): boolean;\r\n    msMatchMedia(mediaQuery: string): MediaQueryList;\r\n    requestAnimationFrame(callback: FrameRequestCallback): number;\r\n    msRequestAnimationFrame(callback: FrameRequestCallback): number;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"help\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusout\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusin\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"afterprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"online\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"offline\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeunload\", listener: (ev: BeforeUnloadEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"storage\", listener: (ev: StorageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"readystatechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"hashchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"unload\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerdown\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturedoubletap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerhover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturehold\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointermove\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturechange\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturestart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointercancel\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgestureend\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturetap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerout\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msinertiastart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"popstate\", listener: (ev: PopStateEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerup\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pageshow\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"devicemotion\", listener: (ev: DeviceMotionEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deviceorientation\", listener: (ev: DeviceOrientationEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerenter\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pagehide\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerleave\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var Window: {\r\n    prototype: Window;\r\n    new(): Window;\r\n}\r\n\r\ninterface HTMLCollection extends MSHTMLCollectionExtensions {\r\n    /**\r\n      * Sets or retrieves the number of objects in a collection.\r\n      */\r\n    length: number;\r\n    /**\r\n      * Retrieves an object from various collections.\r\n      */\r\n    item(nameOrIndex?: any, optionalIndex?: any): Element;\r\n    /**\r\n      * Retrieves a select object or an object from an options collection.\r\n      */\r\n    namedItem(name: string): Element;\r\n    // [name: string]: Element;\r\n    [index: number]: Element;\r\n}\r\ndeclare var HTMLCollection: {\r\n    prototype: HTMLCollection;\r\n    new(): HTMLCollection;\r\n}\r\n\r\ninterface BlobPropertyBag {\r\n    type?: string;\r\n    endings?: string;\r\n}\r\n\r\ninterface Blob {\r\n    type: string;\r\n    size: number;\r\n    msDetachStream(): any;\r\n    slice(start?: number, end?: number, contentType?: string): Blob;\r\n    msClose(): void;\r\n}\r\ndeclare var Blob: {\r\n    prototype: Blob;\r\n    new (blobParts?: any[], options?: BlobPropertyBag): Blob;\r\n}\r\n\r\ninterface NavigatorID {\r\n    appVersion: string;\r\n    appName: string;\r\n    userAgent: string;\r\n    platform: string;\r\n    product: string;\r\n    vendor: string;\r\n}\r\n\r\ninterface HTMLTableElement extends HTMLElement, MSDataBindingTableExtensions, MSDataBindingExtensions, DOML2DeprecatedBackgroundStyle, DOML2DeprecatedBackgroundColorStyle {\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: string;\r\n    /**\r\n      * Sets or retrieves the color for one of the two colors used to draw the 3-D border of the object.\r\n      */\r\n    borderColorLight: any;\r\n    /**\r\n      * Sets or retrieves the amount of space between cells in a table.\r\n      */\r\n    cellSpacing: string;\r\n    /**\r\n      * Retrieves the tFoot object of the table.\r\n      */\r\n    tFoot: HTMLTableSectionElement;\r\n    /**\r\n      * Sets or retrieves the way the border frame around the table is displayed.\r\n      */\r\n    frame: string;\r\n    /**\r\n      * Sets or retrieves the border color of the object. \r\n      */\r\n    borderColor: any;\r\n    /**\r\n      * Sets or retrieves the number of horizontal rows contained in the object.\r\n      */\r\n    rows: HTMLCollection;\r\n    /**\r\n      * Sets or retrieves which dividing lines (inner borders) are displayed.\r\n      */\r\n    rules: string;\r\n    /**\r\n      * Sets or retrieves the number of columns in the table.\r\n      */\r\n    cols: number;\r\n    /**\r\n      * Sets or retrieves a description and/or structure of the object.\r\n      */\r\n    summary: string;\r\n    /**\r\n      * Retrieves the caption object of a table.\r\n      */\r\n    caption: HTMLTableCaptionElement;\r\n    /**\r\n      * Retrieves a collection of all tBody objects in the table. Objects in this collection are in source order.\r\n      */\r\n    tBodies: HTMLCollection;\r\n    /**\r\n      * Retrieves the tHead object of the table.\r\n      */\r\n    tHead: HTMLTableSectionElement;\r\n    /**\r\n      * Sets or retrieves a value that indicates the table alignment.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Retrieves a collection of all cells in the table row or in the entire table.\r\n      */\r\n    cells: HTMLCollection;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: any;\r\n    /**\r\n      * Sets or retrieves the amount of space between the border of the cell and the content of the cell.\r\n      */\r\n    cellPadding: string;\r\n    /**\r\n      * Sets or retrieves the width of the border to draw around the object.\r\n      */\r\n    border: string;\r\n    /**\r\n      * Sets or retrieves the color for one of the two colors used to draw the 3-D border of the object.\r\n      */\r\n    borderColorDark: any;\r\n    /**\r\n      * Removes the specified row (tr) from the element and from the rows collection.\r\n      * @param index Number that specifies the zero-based position in the rows collection of the row to remove.\r\n      */\r\n    deleteRow(index?: number): void;\r\n    /**\r\n      * Creates an empty tBody element in the table.\r\n      */\r\n    createTBody(): HTMLElement;\r\n    /**\r\n      * Deletes the caption element and its contents from the table.\r\n      */\r\n    deleteCaption(): void;\r\n    /**\r\n      * Creates a new row (tr) in the table, and adds the row to the rows collection.\r\n      * @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.\r\n      */\r\n    insertRow(index?: number): HTMLElement;\r\n    /**\r\n      * Deletes the tFoot element and its contents from the table.\r\n      */\r\n    deleteTFoot(): void;\r\n    /**\r\n      * Returns the tHead element object if successful, or null otherwise.\r\n      */\r\n    createTHead(): HTMLElement;\r\n    /**\r\n      * Deletes the tHead element and its contents from the table.\r\n      */\r\n    deleteTHead(): void;\r\n    /**\r\n      * Creates an empty caption element in the table.\r\n      */\r\n    createCaption(): HTMLElement;\r\n    /**\r\n      * Moves a table row to a new position.\r\n      * @param indexFrom Number that specifies the index in the rows collection of the table row that is moved.\r\n      * @param indexTo Number that specifies where the row is moved within the rows collection.\r\n      */\r\n    moveRow(indexFrom?: number, indexTo?: number): any;\r\n    /**\r\n      * Creates an empty tFoot element in the table.\r\n      */\r\n    createTFoot(): HTMLElement;\r\n}\r\ndeclare var HTMLTableElement: {\r\n    prototype: HTMLTableElement;\r\n    new(): HTMLTableElement;\r\n}\r\n\r\ninterface TreeWalker {\r\n    whatToShow: number;\r\n    filter: NodeFilter;\r\n    root: Node;\r\n    currentNode: Node;\r\n    expandEntityReferences: boolean;\r\n    previousSibling(): Node;\r\n    lastChild(): Node;\r\n    nextSibling(): Node;\r\n    nextNode(): Node;\r\n    parentNode(): Node;\r\n    firstChild(): Node;\r\n    previousNode(): Node;\r\n}\r\ndeclare var TreeWalker: {\r\n    prototype: TreeWalker;\r\n    new(): TreeWalker;\r\n}\r\n\r\ninterface GetSVGDocument {\r\n    getSVGDocument(): Document;\r\n}\r\n\r\ninterface SVGPathSegCurvetoQuadraticRel extends SVGPathSeg {\r\n    y: number;\r\n    y1: number;\r\n    x: number;\r\n    x1: number;\r\n}\r\ndeclare var SVGPathSegCurvetoQuadraticRel: {\r\n    prototype: SVGPathSegCurvetoQuadraticRel;\r\n    new(): SVGPathSegCurvetoQuadraticRel;\r\n}\r\n\r\ninterface Performance {\r\n    navigation: PerformanceNavigation;\r\n    timing: PerformanceTiming;\r\n    getEntriesByType(entryType: string): any;\r\n    toJSON(): any;\r\n    getMeasures(measureName?: string): any;\r\n    clearMarks(markName?: string): void;\r\n    getMarks(markName?: string): any;\r\n    clearResourceTimings(): void;\r\n    mark(markName: string): void;\r\n    measure(measureName: string, startMarkName?: string, endMarkName?: string): void;\r\n    getEntriesByName(name: string, entryType?: string): any;\r\n    getEntries(): any;\r\n    clearMeasures(measureName?: string): void;\r\n    setResourceTimingBufferSize(maxSize: number): void;\r\n    now(): number;\r\n}\r\ndeclare var Performance: {\r\n    prototype: Performance;\r\n    new(): Performance;\r\n}\r\n\r\ninterface MSDataBindingTableExtensions {\r\n    dataPageSize: number;\r\n    nextPage(): void;\r\n    firstPage(): void;\r\n    refresh(): void;\r\n    previousPage(): void;\r\n    lastPage(): void;\r\n}\r\n\r\ninterface CompositionEvent extends UIEvent {\r\n    data: string;\r\n    locale: string;\r\n    initCompositionEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, dataArg: string, locale: string): void;\r\n}\r\ndeclare var CompositionEvent: {\r\n    prototype: CompositionEvent;\r\n    new(): CompositionEvent;\r\n}\r\n\r\ninterface WindowTimers extends WindowTimersExtension {\r\n    clearTimeout(handle: number): void;\r\n    setTimeout(handler: any, timeout?: any, ...args: any[]): number;\r\n    clearInterval(handle: number): void;\r\n    setInterval(handler: any, timeout?: any, ...args: any[]): number;\r\n}\r\n\r\ninterface SVGMarkerElement extends SVGElement, SVGStylable, SVGLangSpace, SVGFitToViewBox, SVGExternalResourcesRequired {\r\n    orientType: SVGAnimatedEnumeration;\r\n    markerUnits: SVGAnimatedEnumeration;\r\n    markerWidth: SVGAnimatedLength;\r\n    markerHeight: SVGAnimatedLength;\r\n    orientAngle: SVGAnimatedAngle;\r\n    refY: SVGAnimatedLength;\r\n    refX: SVGAnimatedLength;\r\n    setOrientToAngle(angle: SVGAngle): void;\r\n    setOrientToAuto(): void;\r\n    SVG_MARKER_ORIENT_UNKNOWN: number;\r\n    SVG_MARKER_ORIENT_ANGLE: number;\r\n    SVG_MARKERUNITS_UNKNOWN: number;\r\n    SVG_MARKERUNITS_STROKEWIDTH: number;\r\n    SVG_MARKER_ORIENT_AUTO: number;\r\n    SVG_MARKERUNITS_USERSPACEONUSE: number;\r\n}\r\ndeclare var SVGMarkerElement: {\r\n    prototype: SVGMarkerElement;\r\n    new(): SVGMarkerElement;\r\n    SVG_MARKER_ORIENT_UNKNOWN: number;\r\n    SVG_MARKER_ORIENT_ANGLE: number;\r\n    SVG_MARKERUNITS_UNKNOWN: number;\r\n    SVG_MARKERUNITS_STROKEWIDTH: number;\r\n    SVG_MARKER_ORIENT_AUTO: number;\r\n    SVG_MARKERUNITS_USERSPACEONUSE: number;\r\n}\r\n\r\ninterface CSSStyleDeclaration {\r\n    backgroundAttachment: string;\r\n    visibility: string;\r\n    textAlignLast: string;\r\n    borderRightStyle: string;\r\n    counterIncrement: string;\r\n    orphans: string;\r\n    cssText: string;\r\n    borderStyle: string;\r\n    pointerEvents: string;\r\n    borderTopColor: string;\r\n    markerEnd: string;\r\n    textIndent: string;\r\n    listStyleImage: string;\r\n    cursor: string;\r\n    listStylePosition: string;\r\n    wordWrap: string;\r\n    borderTopStyle: string;\r\n    alignmentBaseline: string;\r\n    opacity: string;\r\n    direction: string;\r\n    strokeMiterlimit: string;\r\n    maxWidth: string;\r\n    color: string;\r\n    clip: string;\r\n    borderRightWidth: string;\r\n    verticalAlign: string;\r\n    overflow: string;\r\n    mask: string;\r\n    borderLeftStyle: string;\r\n    emptyCells: string;\r\n    stopOpacity: string;\r\n    paddingRight: string;\r\n    parentRule: CSSRule;\r\n    background: string;\r\n    boxSizing: string;\r\n    textJustify: string;\r\n    height: string;\r\n    paddingTop: string;\r\n    length: number;\r\n    right: string;\r\n    baselineShift: string;\r\n    borderLeft: string;\r\n    widows: string;\r\n    lineHeight: string;\r\n    left: string;\r\n    textUnderlinePosition: string;\r\n    glyphOrientationHorizontal: string;\r\n    display: string;\r\n    textAnchor: string;\r\n    cssFloat: string;\r\n    strokeDasharray: string;\r\n    rubyAlign: string;\r\n    fontSizeAdjust: string;\r\n    borderLeftColor: string;\r\n    backgroundImage: string;\r\n    listStyleType: string;\r\n    strokeWidth: string;\r\n    textOverflow: string;\r\n    fillRule: string;\r\n    borderBottomColor: string;\r\n    zIndex: string;\r\n    position: string;\r\n    listStyle: string;\r\n    msTransformOrigin: string;\r\n    dominantBaseline: string;\r\n    overflowY: string;\r\n    fill: string;\r\n    captionSide: string;\r\n    borderCollapse: string;\r\n    boxShadow: string;\r\n    quotes: string;\r\n    tableLayout: string;\r\n    unicodeBidi: string;\r\n    borderBottomWidth: string;\r\n    backgroundSize: string;\r\n    textDecoration: string;\r\n    strokeDashoffset: string;\r\n    fontSize: string;\r\n    border: string;\r\n    pageBreakBefore: string;\r\n    borderTopRightRadius: string;\r\n    msTransform: string;\r\n    borderBottomLeftRadius: string;\r\n    textTransform: string;\r\n    rubyPosition: string;\r\n    strokeLinejoin: string;\r\n    clipPath: string;\r\n    borderRightColor: string;\r\n    fontFamily: string;\r\n    clear: string;\r\n    content: string;\r\n    backgroundClip: string;\r\n    marginBottom: string;\r\n    counterReset: string;\r\n    outlineWidth: string;\r\n    marginRight: string;\r\n    paddingLeft: string;\r\n    borderBottom: string;\r\n    wordBreak: string;\r\n    marginTop: string;\r\n    top: string;\r\n    fontWeight: string;\r\n    borderRight: string;\r\n    width: string;\r\n    kerning: string;\r\n    pageBreakAfter: string;\r\n    borderBottomStyle: string;\r\n    fontStretch: string;\r\n    padding: string;\r\n    strokeOpacity: string;\r\n    markerStart: string;\r\n    bottom: string;\r\n    borderLeftWidth: string;\r\n    clipRule: string;\r\n    backgroundPosition: string;\r\n    backgroundColor: string;\r\n    pageBreakInside: string;\r\n    backgroundOrigin: string;\r\n    strokeLinecap: string;\r\n    borderTopWidth: string;\r\n    outlineStyle: string;\r\n    borderTop: string;\r\n    outlineColor: string;\r\n    paddingBottom: string;\r\n    marginLeft: string;\r\n    font: string;\r\n    outline: string;\r\n    wordSpacing: string;\r\n    maxHeight: string;\r\n    fillOpacity: string;\r\n    letterSpacing: string;\r\n    borderSpacing: string;\r\n    backgroundRepeat: string;\r\n    borderRadius: string;\r\n    borderWidth: string;\r\n    borderBottomRightRadius: string;\r\n    whiteSpace: string;\r\n    fontStyle: string;\r\n    minWidth: string;\r\n    stopColor: string;\r\n    borderTopLeftRadius: string;\r\n    borderColor: string;\r\n    marker: string;\r\n    glyphOrientationVertical: string;\r\n    markerMid: string;\r\n    fontVariant: string;\r\n    minHeight: string;\r\n    stroke: string;\r\n    rubyOverhang: string;\r\n    overflowX: string;\r\n    textAlign: string;\r\n    margin: string;\r\n    animationFillMode: string;\r\n    floodColor: string;\r\n    animationIterationCount: string;\r\n    textShadow: string;\r\n    backfaceVisibility: string;\r\n    msAnimationIterationCount: string;\r\n    animationDelay: string;\r\n    animationTimingFunction: string;\r\n    columnWidth: any;\r\n    msScrollSnapX: string;\r\n    columnRuleColor: any;\r\n    columnRuleWidth: any;\r\n    transitionDelay: string;\r\n    transition: string;\r\n    msFlowFrom: string;\r\n    msScrollSnapType: string;\r\n    msContentZoomSnapType: string;\r\n    msGridColumns: string;\r\n    msAnimationName: string;\r\n    msGridRowAlign: string;\r\n    msContentZoomChaining: string;\r\n    msGridColumn: any;\r\n    msHyphenateLimitZone: any;\r\n    msScrollRails: string;\r\n    msAnimationDelay: string;\r\n    enableBackground: string;\r\n    msWrapThrough: string;\r\n    columnRuleStyle: string;\r\n    msAnimation: string;\r\n    msFlexFlow: string;\r\n    msScrollSnapY: string;\r\n    msHyphenateLimitLines: any;\r\n    msTouchAction: string;\r\n    msScrollLimit: string;\r\n    animation: string;\r\n    transform: string;\r\n    filter: string;\r\n    colorInterpolationFilters: string;\r\n    transitionTimingFunction: string;\r\n    msBackfaceVisibility: string;\r\n    animationPlayState: string;\r\n    transformOrigin: string;\r\n    msScrollLimitYMin: any;\r\n    msFontFeatureSettings: string;\r\n    msContentZoomLimitMin: any;\r\n    columnGap: any;\r\n    transitionProperty: string;\r\n    msAnimationDuration: string;\r\n    msAnimationFillMode: string;\r\n    msFlexDirection: string;\r\n    msTransitionDuration: string;\r\n    fontFeatureSettings: string;\r\n    breakBefore: string;\r\n    msFlexWrap: string;\r\n    perspective: string;\r\n    msFlowInto: string;\r\n    msTransformStyle: string;\r\n    msScrollTranslation: string;\r\n    msTransitionProperty: string;\r\n    msUserSelect: string;\r\n    msOverflowStyle: string;\r\n    msScrollSnapPointsY: string;\r\n    animationDirection: string;\r\n    animationDuration: string;\r\n    msFlex: string;\r\n    msTransitionTimingFunction: string;\r\n    animationName: string;\r\n    columnRule: string;\r\n    msGridColumnSpan: any;\r\n    msFlexNegative: string;\r\n    columnFill: string;\r\n    msGridRow: any;\r\n    msFlexOrder: string;\r\n    msFlexItemAlign: string;\r\n    msFlexPositive: string;\r\n    msContentZoomLimitMax: any;\r\n    msScrollLimitYMax: any;\r\n    msGridColumnAlign: string;\r\n    perspectiveOrigin: string;\r\n    lightingColor: string;\r\n    columns: string;\r\n    msScrollChaining: string;\r\n    msHyphenateLimitChars: string;\r\n    msTouchSelect: string;\r\n    floodOpacity: string;\r\n    msAnimationDirection: string;\r\n    msAnimationPlayState: string;\r\n    columnSpan: string;\r\n    msContentZooming: string;\r\n    msPerspective: string;\r\n    msFlexPack: string;\r\n    msScrollSnapPointsX: string;\r\n    msContentZoomSnapPoints: string;\r\n    msGridRowSpan: any;\r\n    msContentZoomSnap: string;\r\n    msScrollLimitXMin: any;\r\n    breakInside: string;\r\n    msHighContrastAdjust: string;\r\n    msFlexLinePack: string;\r\n    msGridRows: string;\r\n    transitionDuration: string;\r\n    msHyphens: string;\r\n    breakAfter: string;\r\n    msTransition: string;\r\n    msPerspectiveOrigin: string;\r\n    msContentZoomLimit: string;\r\n    msScrollLimitXMax: any;\r\n    msFlexAlign: string;\r\n    msWrapMargin: any;\r\n    columnCount: any;\r\n    msAnimationTimingFunction: string;\r\n    msTransitionDelay: string;\r\n    transformStyle: string;\r\n    msWrapFlow: string;\r\n    msFlexPreferredSize: string;\r\n    alignItems: string;\r\n    borderImageSource: string;\r\n    flexBasis: string;\r\n    borderImageWidth: string;\r\n    borderImageRepeat: string;\r\n    order: string;\r\n    flex: string;\r\n    alignContent: string;\r\n    msImeAlign: string;\r\n    flexShrink: string;\r\n    flexGrow: string;\r\n    borderImageSlice: string;\r\n    flexWrap: string;\r\n    borderImageOutset: string;\r\n    flexDirection: string;\r\n    touchAction: string;\r\n    flexFlow: string;\r\n    borderImage: string;\r\n    justifyContent: string;\r\n    alignSelf: string;\r\n    msTextCombineHorizontal: string;\r\n    getPropertyPriority(propertyName: string): string;\r\n    getPropertyValue(propertyName: string): string;\r\n    removeProperty(propertyName: string): string;\r\n    item(index: number): string;\r\n    [index: number]: string;\r\n    setProperty(propertyName: string, value: string, priority?: string): void;\r\n}\r\ndeclare var CSSStyleDeclaration: {\r\n    prototype: CSSStyleDeclaration;\r\n    new(): CSSStyleDeclaration;\r\n}\r\n\r\ninterface SVGGElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired {\r\n}\r\ndeclare var SVGGElement: {\r\n    prototype: SVGGElement;\r\n    new(): SVGGElement;\r\n}\r\n\r\ninterface MSStyleCSSProperties extends MSCSSProperties {\r\n    pixelWidth: number;\r\n    posHeight: number;\r\n    posLeft: number;\r\n    pixelTop: number;\r\n    pixelBottom: number;\r\n    textDecorationNone: boolean;\r\n    pixelLeft: number;\r\n    posTop: number;\r\n    posBottom: number;\r\n    textDecorationOverline: boolean;\r\n    posWidth: number;\r\n    textDecorationLineThrough: boolean;\r\n    pixelHeight: number;\r\n    textDecorationBlink: boolean;\r\n    posRight: number;\r\n    pixelRight: number;\r\n    textDecorationUnderline: boolean;\r\n}\r\ndeclare var MSStyleCSSProperties: {\r\n    prototype: MSStyleCSSProperties;\r\n    new(): MSStyleCSSProperties;\r\n}\r\n\r\ninterface Navigator extends NavigatorID, NavigatorOnLine, NavigatorContentUtils, MSNavigatorExtensions, NavigatorGeolocation, MSNavigatorDoNotTrack, NavigatorStorageUtils, MSFileSaver {\r\n    msMaxTouchPoints: number;\r\n    msPointerEnabled: boolean;\r\n    msManipulationViewsEnabled: boolean;\r\n    pointerEnabled: boolean;\r\n    maxTouchPoints: number;\r\n    msLaunchUri(uri: string, successCallback?: MSLaunchUriCallback, noHandlerCallback?: MSLaunchUriCallback): void;\r\n}\r\ndeclare var Navigator: {\r\n    prototype: Navigator;\r\n    new(): Navigator;\r\n}\r\n\r\ninterface SVGPathSegCurvetoCubicSmoothAbs extends SVGPathSeg {\r\n    y: number;\r\n    x2: number;\r\n    x: number;\r\n    y2: number;\r\n}\r\ndeclare var SVGPathSegCurvetoCubicSmoothAbs: {\r\n    prototype: SVGPathSegCurvetoCubicSmoothAbs;\r\n    new(): SVGPathSegCurvetoCubicSmoothAbs;\r\n}\r\n\r\ninterface SVGZoomEvent extends UIEvent {\r\n    zoomRectScreen: SVGRect;\r\n    previousScale: number;\r\n    newScale: number;\r\n    previousTranslate: SVGPoint;\r\n    newTranslate: SVGPoint;\r\n}\r\ndeclare var SVGZoomEvent: {\r\n    prototype: SVGZoomEvent;\r\n    new(): SVGZoomEvent;\r\n}\r\n\r\ninterface NodeSelector {\r\n    querySelectorAll(selectors: string): NodeList;\r\n    querySelector(selectors: string): Element;\r\n}\r\n\r\ninterface HTMLTableDataCellElement extends HTMLTableCellElement {\r\n}\r\ndeclare var HTMLTableDataCellElement: {\r\n    prototype: HTMLTableDataCellElement;\r\n    new(): HTMLTableDataCellElement;\r\n}\r\n\r\ninterface HTMLBaseElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the window or frame at which to target content.\r\n      */\r\n    target: string;\r\n    /**\r\n      * Gets or sets the baseline URL on which relative links are based.\r\n      */\r\n    href: string;\r\n}\r\ndeclare var HTMLBaseElement: {\r\n    prototype: HTMLBaseElement;\r\n    new(): HTMLBaseElement;\r\n}\r\n\r\ninterface ClientRect {\r\n    left: number;\r\n    width: number;\r\n    right: number;\r\n    top: number;\r\n    bottom: number;\r\n    height: number;\r\n}\r\ndeclare var ClientRect: {\r\n    prototype: ClientRect;\r\n    new(): ClientRect;\r\n}\r\n\r\ninterface PositionErrorCallback {\r\n    (error: PositionError): void;\r\n}\r\n\r\ninterface DOMImplementation {\r\n    createDocumentType(qualifiedName: string, publicId: string, systemId: string): DocumentType;\r\n    createDocument(namespaceURI: string, qualifiedName: string, doctype: DocumentType): Document;\r\n    hasFeature(feature: string, version?: string): boolean;\r\n    createHTMLDocument(title: string): Document;\r\n}\r\ndeclare var DOMImplementation: {\r\n    prototype: DOMImplementation;\r\n    new(): DOMImplementation;\r\n}\r\n\r\ninterface SVGUnitTypes {\r\n    SVG_UNIT_TYPE_UNKNOWN: number;\r\n    SVG_UNIT_TYPE_OBJECTBOUNDINGBOX: number;\r\n    SVG_UNIT_TYPE_USERSPACEONUSE: number;\r\n}\r\ndeclare var SVGUnitTypes: SVGUnitTypes;\r\n\r\ninterface Element extends Node, NodeSelector, ElementTraversal, GlobalEventHandlers {\r\n    scrollTop: number;\r\n    clientLeft: number;\r\n    scrollLeft: number;\r\n    tagName: string;\r\n    clientWidth: number;\r\n    scrollWidth: number;\r\n    clientHeight: number;\r\n    clientTop: number;\r\n    scrollHeight: number;\r\n    msRegionOverflow: string;\r\n    onmspointerdown: (ev: any) => any;\r\n    onmsgotpointercapture: (ev: any) => any;\r\n    onmsgesturedoubletap: (ev: any) => any;\r\n    onmspointerhover: (ev: any) => any;\r\n    onmsgesturehold: (ev: any) => any;\r\n    onmspointermove: (ev: any) => any;\r\n    onmsgesturechange: (ev: any) => any;\r\n    onmsgesturestart: (ev: any) => any;\r\n    onmspointercancel: (ev: any) => any;\r\n    onmsgestureend: (ev: any) => any;\r\n    onmsgesturetap: (ev: any) => any;\r\n    onmspointerout: (ev: any) => any;\r\n    onmsinertiastart: (ev: any) => any;\r\n    onmslostpointercapture: (ev: any) => any;\r\n    onmspointerover: (ev: any) => any;\r\n    msContentZoomFactor: number;\r\n    onmspointerup: (ev: any) => any;\r\n    onlostpointercapture: (ev: PointerEvent) => any;\r\n    onmspointerenter: (ev: any) => any;\r\n    ongotpointercapture: (ev: PointerEvent) => any;\r\n    onmspointerleave: (ev: any) => any;\r\n    getAttribute(name?: string): string;\r\n    getElementsByTagNameNS(namespaceURI: string, localName: string): NodeList;\r\n    hasAttributeNS(namespaceURI: string, localName: string): boolean;\r\n    getBoundingClientRect(): ClientRect;\r\n    getAttributeNS(namespaceURI: string, localName: string): string;\r\n    getAttributeNodeNS(namespaceURI: string, localName: string): Attr;\r\n    setAttributeNodeNS(newAttr: Attr): Attr;\r\n    msMatchesSelector(selectors: string): boolean;\r\n    hasAttribute(name: string): boolean;\r\n    removeAttribute(name?: string): void;\r\n    setAttributeNS(namespaceURI: string, qualifiedName: string, value: string): void;\r\n    getAttributeNode(name: string): Attr;\r\n    fireEvent(eventName: string, eventObj?: any): boolean;\r\n    getElementsByTagName(name: \"a\"): NodeListOf<HTMLAnchorElement>;\r\n    getElementsByTagName(name: \"abbr\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"acronym\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"address\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(name: \"applet\"): NodeListOf<HTMLAppletElement>;\r\n    getElementsByTagName(name: \"area\"): NodeListOf<HTMLAreaElement>;\r\n    getElementsByTagName(name: \"article\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"aside\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"audio\"): NodeListOf<HTMLAudioElement>;\r\n    getElementsByTagName(name: \"b\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"base\"): NodeListOf<HTMLBaseElement>;\r\n    getElementsByTagName(name: \"basefont\"): NodeListOf<HTMLBaseFontElement>;\r\n    getElementsByTagName(name: \"bdo\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"bgsound\"): NodeListOf<HTMLBGSoundElement>;\r\n    getElementsByTagName(name: \"big\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"blockquote\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(name: \"body\"): NodeListOf<HTMLBodyElement>;\r\n    getElementsByTagName(name: \"br\"): NodeListOf<HTMLBRElement>;\r\n    getElementsByTagName(name: \"button\"): NodeListOf<HTMLButtonElement>;\r\n    getElementsByTagName(name: \"canvas\"): NodeListOf<HTMLCanvasElement>;\r\n    getElementsByTagName(name: \"caption\"): NodeListOf<HTMLTableCaptionElement>;\r\n    getElementsByTagName(name: \"center\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(name: \"cite\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"code\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"col\"): NodeListOf<HTMLTableColElement>;\r\n    getElementsByTagName(name: \"colgroup\"): NodeListOf<HTMLTableColElement>;\r\n    getElementsByTagName(name: \"datalist\"): NodeListOf<HTMLDataListElement>;\r\n    getElementsByTagName(name: \"dd\"): NodeListOf<HTMLDDElement>;\r\n    getElementsByTagName(name: \"del\"): NodeListOf<HTMLModElement>;\r\n    getElementsByTagName(name: \"dfn\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"dir\"): NodeListOf<HTMLDirectoryElement>;\r\n    getElementsByTagName(name: \"div\"): NodeListOf<HTMLDivElement>;\r\n    getElementsByTagName(name: \"dl\"): NodeListOf<HTMLDListElement>;\r\n    getElementsByTagName(name: \"dt\"): NodeListOf<HTMLDTElement>;\r\n    getElementsByTagName(name: \"em\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"embed\"): NodeListOf<HTMLEmbedElement>;\r\n    getElementsByTagName(name: \"fieldset\"): NodeListOf<HTMLFieldSetElement>;\r\n    getElementsByTagName(name: \"figcaption\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"figure\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"font\"): NodeListOf<HTMLFontElement>;\r\n    getElementsByTagName(name: \"footer\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"form\"): NodeListOf<HTMLFormElement>;\r\n    getElementsByTagName(name: \"frame\"): NodeListOf<HTMLFrameElement>;\r\n    getElementsByTagName(name: \"frameset\"): NodeListOf<HTMLFrameSetElement>;\r\n    getElementsByTagName(name: \"h1\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: \"h2\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: \"h3\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: \"h4\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: \"h5\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: \"h6\"): NodeListOf<HTMLHeadingElement>;\r\n    getElementsByTagName(name: \"head\"): NodeListOf<HTMLHeadElement>;\r\n    getElementsByTagName(name: \"header\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"hgroup\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"hr\"): NodeListOf<HTMLHRElement>;\r\n    getElementsByTagName(name: \"html\"): NodeListOf<HTMLHtmlElement>;\r\n    getElementsByTagName(name: \"i\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"iframe\"): NodeListOf<HTMLIFrameElement>;\r\n    getElementsByTagName(name: \"img\"): NodeListOf<HTMLImageElement>;\r\n    getElementsByTagName(name: \"input\"): NodeListOf<HTMLInputElement>;\r\n    getElementsByTagName(name: \"ins\"): NodeListOf<HTMLModElement>;\r\n    getElementsByTagName(name: \"isindex\"): NodeListOf<HTMLIsIndexElement>;\r\n    getElementsByTagName(name: \"kbd\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"keygen\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(name: \"label\"): NodeListOf<HTMLLabelElement>;\r\n    getElementsByTagName(name: \"legend\"): NodeListOf<HTMLLegendElement>;\r\n    getElementsByTagName(name: \"li\"): NodeListOf<HTMLLIElement>;\r\n    getElementsByTagName(name: \"link\"): NodeListOf<HTMLLinkElement>;\r\n    getElementsByTagName(name: \"listing\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(name: \"map\"): NodeListOf<HTMLMapElement>;\r\n    getElementsByTagName(name: \"mark\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"marquee\"): NodeListOf<HTMLMarqueeElement>;\r\n    getElementsByTagName(name: \"menu\"): NodeListOf<HTMLMenuElement>;\r\n    getElementsByTagName(name: \"meta\"): NodeListOf<HTMLMetaElement>;\r\n    getElementsByTagName(name: \"nav\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"nextid\"): NodeListOf<HTMLNextIdElement>;\r\n    getElementsByTagName(name: \"nobr\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"noframes\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"noscript\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"object\"): NodeListOf<HTMLObjectElement>;\r\n    getElementsByTagName(name: \"ol\"): NodeListOf<HTMLOListElement>;\r\n    getElementsByTagName(name: \"optgroup\"): NodeListOf<HTMLOptGroupElement>;\r\n    getElementsByTagName(name: \"option\"): NodeListOf<HTMLOptionElement>;\r\n    getElementsByTagName(name: \"p\"): NodeListOf<HTMLParagraphElement>;\r\n    getElementsByTagName(name: \"param\"): NodeListOf<HTMLParamElement>;\r\n    getElementsByTagName(name: \"plaintext\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(name: \"pre\"): NodeListOf<HTMLPreElement>;\r\n    getElementsByTagName(name: \"progress\"): NodeListOf<HTMLProgressElement>;\r\n    getElementsByTagName(name: \"q\"): NodeListOf<HTMLQuoteElement>;\r\n    getElementsByTagName(name: \"rt\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"ruby\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"s\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"samp\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"script\"): NodeListOf<HTMLScriptElement>;\r\n    getElementsByTagName(name: \"section\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"select\"): NodeListOf<HTMLSelectElement>;\r\n    getElementsByTagName(name: \"small\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"SOURCE\"): NodeListOf<HTMLSourceElement>;\r\n    getElementsByTagName(name: \"span\"): NodeListOf<HTMLSpanElement>;\r\n    getElementsByTagName(name: \"strike\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"strong\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"style\"): NodeListOf<HTMLStyleElement>;\r\n    getElementsByTagName(name: \"sub\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"sup\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"table\"): NodeListOf<HTMLTableElement>;\r\n    getElementsByTagName(name: \"tbody\"): NodeListOf<HTMLTableSectionElement>;\r\n    getElementsByTagName(name: \"td\"): NodeListOf<HTMLTableDataCellElement>;\r\n    getElementsByTagName(name: \"textarea\"): NodeListOf<HTMLTextAreaElement>;\r\n    getElementsByTagName(name: \"tfoot\"): NodeListOf<HTMLTableSectionElement>;\r\n    getElementsByTagName(name: \"th\"): NodeListOf<HTMLTableHeaderCellElement>;\r\n    getElementsByTagName(name: \"thead\"): NodeListOf<HTMLTableSectionElement>;\r\n    getElementsByTagName(name: \"title\"): NodeListOf<HTMLTitleElement>;\r\n    getElementsByTagName(name: \"tr\"): NodeListOf<HTMLTableRowElement>;\r\n    getElementsByTagName(name: \"track\"): NodeListOf<HTMLTrackElement>;\r\n    getElementsByTagName(name: \"tt\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"u\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"ul\"): NodeListOf<HTMLUListElement>;\r\n    getElementsByTagName(name: \"var\"): NodeListOf<HTMLPhraseElement>;\r\n    getElementsByTagName(name: \"video\"): NodeListOf<HTMLVideoElement>;\r\n    getElementsByTagName(name: \"wbr\"): NodeListOf<HTMLElement>;\r\n    getElementsByTagName(name: \"x-ms-webview\"): NodeListOf<MSHTMLWebViewElement>;\r\n    getElementsByTagName(name: \"xmp\"): NodeListOf<HTMLBlockElement>;\r\n    getElementsByTagName(name: string): NodeList;\r\n    getClientRects(): ClientRectList;\r\n    setAttributeNode(newAttr: Attr): Attr;\r\n    removeAttributeNode(oldAttr: Attr): Attr;\r\n    setAttribute(name?: string, value?: string): void;\r\n    removeAttributeNS(namespaceURI: string, localName: string): void;\r\n    msGetRegionContent(): MSRangeCollection;\r\n    msReleasePointerCapture(pointerId: number): void;\r\n    msSetPointerCapture(pointerId: number): void;\r\n    msZoomTo(args: MsZoomToOptions): void;\r\n    setPointerCapture(pointerId: number): void;\r\n    msGetUntransformedBounds(): ClientRect;\r\n    releasePointerCapture(pointerId: number): void;\r\n    msRequestFullscreen(): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerdown\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgotpointercapture\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturedoubletap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerhover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturehold\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointermove\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturechange\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturestart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointercancel\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgestureend\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturetap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerout\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msinertiastart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mslostpointercapture\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerup\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerenter\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerleave\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var Element: {\r\n    prototype: Element;\r\n    new(): Element;\r\n}\r\n\r\ninterface HTMLNextIdElement extends HTMLElement {\r\n    n: string;\r\n}\r\ndeclare var HTMLNextIdElement: {\r\n    prototype: HTMLNextIdElement;\r\n    new(): HTMLNextIdElement;\r\n}\r\n\r\ninterface SVGPathSegMovetoRel extends SVGPathSeg {\r\n    y: number;\r\n    x: number;\r\n}\r\ndeclare var SVGPathSegMovetoRel: {\r\n    prototype: SVGPathSegMovetoRel;\r\n    new(): SVGPathSegMovetoRel;\r\n}\r\n\r\ninterface SVGLineElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired {\r\n    y1: SVGAnimatedLength;\r\n    x2: SVGAnimatedLength;\r\n    x1: SVGAnimatedLength;\r\n    y2: SVGAnimatedLength;\r\n}\r\ndeclare var SVGLineElement: {\r\n    prototype: SVGLineElement;\r\n    new(): SVGLineElement;\r\n}\r\n\r\ninterface HTMLParagraphElement extends HTMLElement, DOML2DeprecatedTextFlowControl {\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text. \r\n      */\r\n    align: string;\r\n}\r\ndeclare var HTMLParagraphElement: {\r\n    prototype: HTMLParagraphElement;\r\n    new(): HTMLParagraphElement;\r\n}\r\n\r\ninterface HTMLAreasCollection extends HTMLCollection {\r\n    /**\r\n      * Removes an element from the collection.\r\n      */\r\n    remove(index?: number): void;\r\n    /**\r\n      * Adds an element to the areas, controlRange, or options collection.\r\n      */\r\n    add(element: HTMLElement, before?: any): void;\r\n}\r\ndeclare var HTMLAreasCollection: {\r\n    prototype: HTMLAreasCollection;\r\n    new(): HTMLAreasCollection;\r\n}\r\n\r\ninterface SVGDescElement extends SVGElement, SVGStylable, SVGLangSpace {\r\n}\r\ndeclare var SVGDescElement: {\r\n    prototype: SVGDescElement;\r\n    new(): SVGDescElement;\r\n}\r\n\r\ninterface Node extends EventTarget {\r\n    nodeType: number;\r\n    previousSibling: Node;\r\n    localName: string;\r\n    namespaceURI: string;\r\n    textContent: string;\r\n    parentNode: Node;\r\n    nextSibling: Node;\r\n    nodeValue: string;\r\n    lastChild: Node;\r\n    childNodes: NodeList;\r\n    nodeName: string;\r\n    ownerDocument: Document;\r\n    attributes: NamedNodeMap;\r\n    firstChild: Node;\r\n    prefix: string;\r\n    removeChild(oldChild: Node): Node;\r\n    appendChild(newChild: Node): Node;\r\n    isSupported(feature: string, version: string): boolean;\r\n    isEqualNode(arg: Node): boolean;\r\n    lookupPrefix(namespaceURI: string): string;\r\n    isDefaultNamespace(namespaceURI: string): boolean;\r\n    compareDocumentPosition(other: Node): number;\r\n    normalize(): void;\r\n    isSameNode(other: Node): boolean;\r\n    hasAttributes(): boolean;\r\n    lookupNamespaceURI(prefix: string): string;\r\n    cloneNode(deep?: boolean): Node;\r\n    hasChildNodes(): boolean;\r\n    replaceChild(newChild: Node, oldChild: Node): Node;\r\n    insertBefore(newChild: Node, refChild?: Node): Node;\r\n    ENTITY_REFERENCE_NODE: number;\r\n    ATTRIBUTE_NODE: number;\r\n    DOCUMENT_FRAGMENT_NODE: number;\r\n    TEXT_NODE: number;\r\n    ELEMENT_NODE: number;\r\n    COMMENT_NODE: number;\r\n    DOCUMENT_POSITION_DISCONNECTED: number;\r\n    DOCUMENT_POSITION_CONTAINED_BY: number;\r\n    DOCUMENT_POSITION_CONTAINS: number;\r\n    DOCUMENT_TYPE_NODE: number;\r\n    DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;\r\n    DOCUMENT_NODE: number;\r\n    ENTITY_NODE: number;\r\n    PROCESSING_INSTRUCTION_NODE: number;\r\n    CDATA_SECTION_NODE: number;\r\n    NOTATION_NODE: number;\r\n    DOCUMENT_POSITION_FOLLOWING: number;\r\n    DOCUMENT_POSITION_PRECEDING: number;\r\n}\r\ndeclare var Node: {\r\n    prototype: Node;\r\n    new(): Node;\r\n    ENTITY_REFERENCE_NODE: number;\r\n    ATTRIBUTE_NODE: number;\r\n    DOCUMENT_FRAGMENT_NODE: number;\r\n    TEXT_NODE: number;\r\n    ELEMENT_NODE: number;\r\n    COMMENT_NODE: number;\r\n    DOCUMENT_POSITION_DISCONNECTED: number;\r\n    DOCUMENT_POSITION_CONTAINED_BY: number;\r\n    DOCUMENT_POSITION_CONTAINS: number;\r\n    DOCUMENT_TYPE_NODE: number;\r\n    DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: number;\r\n    DOCUMENT_NODE: number;\r\n    ENTITY_NODE: number;\r\n    PROCESSING_INSTRUCTION_NODE: number;\r\n    CDATA_SECTION_NODE: number;\r\n    NOTATION_NODE: number;\r\n    DOCUMENT_POSITION_FOLLOWING: number;\r\n    DOCUMENT_POSITION_PRECEDING: number;\r\n}\r\n\r\ninterface SVGPathSegCurvetoQuadraticSmoothRel extends SVGPathSeg {\r\n    y: number;\r\n    x: number;\r\n}\r\ndeclare var SVGPathSegCurvetoQuadraticSmoothRel: {\r\n    prototype: SVGPathSegCurvetoQuadraticSmoothRel;\r\n    new(): SVGPathSegCurvetoQuadraticSmoothRel;\r\n}\r\n\r\ninterface DOML2DeprecatedListSpaceReduction {\r\n    compact: boolean;\r\n}\r\n\r\ninterface MSScriptHost {\r\n}\r\ndeclare var MSScriptHost: {\r\n    prototype: MSScriptHost;\r\n    new(): MSScriptHost;\r\n}\r\n\r\ninterface SVGClipPathElement extends SVGElement, SVGUnitTypes, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired {\r\n    clipPathUnits: SVGAnimatedEnumeration;\r\n}\r\ndeclare var SVGClipPathElement: {\r\n    prototype: SVGClipPathElement;\r\n    new(): SVGClipPathElement;\r\n}\r\n\r\ninterface MouseEvent extends UIEvent {\r\n    toElement: Element;\r\n    layerY: number;\r\n    fromElement: Element;\r\n    which: number;\r\n    pageX: number;\r\n    offsetY: number;\r\n    x: number;\r\n    y: number;\r\n    metaKey: boolean;\r\n    altKey: boolean;\r\n    ctrlKey: boolean;\r\n    offsetX: number;\r\n    screenX: number;\r\n    clientY: number;\r\n    shiftKey: boolean;\r\n    layerX: number;\r\n    screenY: number;\r\n    relatedTarget: EventTarget;\r\n    button: number;\r\n    pageY: number;\r\n    buttons: number;\r\n    clientX: number;\r\n    initMouseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget): void;\r\n    getModifierState(keyArg: string): boolean;\r\n}\r\ndeclare var MouseEvent: {\r\n    prototype: MouseEvent;\r\n    new(): MouseEvent;\r\n}\r\n\r\ninterface RangeException {\r\n    code: number;\r\n    message: string;\r\n    name: string;\r\n    toString(): string;\r\n    INVALID_NODE_TYPE_ERR: number;\r\n    BAD_BOUNDARYPOINTS_ERR: number;\r\n}\r\ndeclare var RangeException: {\r\n    prototype: RangeException;\r\n    new(): RangeException;\r\n    INVALID_NODE_TYPE_ERR: number;\r\n    BAD_BOUNDARYPOINTS_ERR: number;\r\n}\r\n\r\ninterface SVGTextPositioningElement extends SVGTextContentElement {\r\n    y: SVGAnimatedLengthList;\r\n    rotate: SVGAnimatedNumberList;\r\n    dy: SVGAnimatedLengthList;\r\n    x: SVGAnimatedLengthList;\r\n    dx: SVGAnimatedLengthList;\r\n}\r\ndeclare var SVGTextPositioningElement: {\r\n    prototype: SVGTextPositioningElement;\r\n    new(): SVGTextPositioningElement;\r\n}\r\n\r\ninterface HTMLAppletElement extends HTMLElement, DOML2DeprecatedMarginStyle, DOML2DeprecatedBorderStyle, DOML2DeprecatedAlignmentStyle, MSDataBindingExtensions, MSDataBindingRecordSetExtensions {\r\n    width: number;\r\n    /**\r\n      * Sets or retrieves the Internet media type for the code associated with the object.\r\n      */\r\n    codeType: string;\r\n    object: string;\r\n    form: HTMLFormElement;\r\n    code: string;\r\n    /**\r\n      * Sets or retrieves a character string that can be used to implement your own archive functionality for the object.\r\n      */\r\n    archive: string;\r\n    /**\r\n      * Sets or retrieves a text alternative to the graphic.\r\n      */\r\n    alt: string;\r\n    /**\r\n      * Sets or retrieves a message to be displayed while an object is loading.\r\n      */\r\n    standby: string;\r\n    /**\r\n      * Sets or retrieves the class identifier for the object.\r\n      */\r\n    classid: string;\r\n    /**\r\n      * Sets or retrieves the shape of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\r\n      */\r\n    useMap: string;\r\n    /**\r\n      * Sets or retrieves the URL that references the data of the object.\r\n      */\r\n    data: string;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: string;\r\n    /**\r\n      * Gets or sets the optional alternative HTML script to execute if the object fails to load.\r\n      */\r\n    altHtml: string;\r\n    /**\r\n      * Address of a pointer to the document this page or frame contains. If there is no document, then null will be returned.\r\n      */\r\n    contentDocument: Document;\r\n    /**\r\n      * Sets or retrieves the URL of the component.\r\n      */\r\n    codeBase: string;\r\n    /**\r\n      * Sets or retrieves a character string that can be used to implement your own declare functionality for the object.\r\n      */\r\n    declare: boolean;\r\n    /**\r\n      * Returns the content type of the object.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Retrieves a string of the URL where the object tag can be found. This is often the href of the document that the object is in, or the value set by a base element.\r\n      */\r\n    BaseHref: string;\r\n}\r\ndeclare var HTMLAppletElement: {\r\n    prototype: HTMLAppletElement;\r\n    new(): HTMLAppletElement;\r\n}\r\n\r\ninterface TextMetrics {\r\n    width: number;\r\n}\r\ndeclare var TextMetrics: {\r\n    prototype: TextMetrics;\r\n    new(): TextMetrics;\r\n}\r\n\r\ninterface DocumentEvent {\r\n    createEvent(eventInterface: \"AnimationEvent\"): AnimationEvent;\r\n    createEvent(eventInterface: \"CloseEvent\"): CloseEvent;\r\n    createEvent(eventInterface: \"CompositionEvent\"): CompositionEvent;\r\n    createEvent(eventInterface: \"CustomEvent\"): CustomEvent;\r\n    createEvent(eventInterface: \"DeviceMotionEvent\"): DeviceMotionEvent;\r\n    createEvent(eventInterface: \"DeviceOrientationEvent\"): DeviceOrientationEvent;\r\n    createEvent(eventInterface: \"DragEvent\"): DragEvent;\r\n    createEvent(eventInterface: \"ErrorEvent\"): ErrorEvent;\r\n    createEvent(eventInterface: \"Event\"): Event;\r\n    createEvent(eventInterface: \"Events\"): Event;\r\n    createEvent(eventInterface: \"FocusEvent\"): FocusEvent;\r\n    createEvent(eventInterface: \"HTMLEvents\"): Event;\r\n    createEvent(eventInterface: \"IDBVersionChangeEvent\"): IDBVersionChangeEvent;\r\n    createEvent(eventInterface: \"KeyboardEvent\"): KeyboardEvent;\r\n    createEvent(eventInterface: \"LongRunningScriptDetectedEvent\"): LongRunningScriptDetectedEvent;\r\n    createEvent(eventInterface: \"MessageEvent\"): MessageEvent;\r\n    createEvent(eventInterface: \"MouseEvent\"): MouseEvent;\r\n    createEvent(eventInterface: \"MouseEvents\"): MouseEvent;\r\n    createEvent(eventInterface: \"MouseWheelEvent\"): MouseWheelEvent;\r\n    createEvent(eventInterface: \"MSGestureEvent\"): MSGestureEvent;\r\n    createEvent(eventInterface: \"MSPointerEvent\"): MSPointerEvent;\r\n    createEvent(eventInterface: \"MutationEvent\"): MutationEvent;\r\n    createEvent(eventInterface: \"MutationEvents\"): MutationEvent;\r\n    createEvent(eventInterface: \"NavigationCompletedEvent\"): NavigationCompletedEvent;\r\n    createEvent(eventInterface: \"NavigationEvent\"): NavigationEvent;\r\n    createEvent(eventInterface: \"PageTransitionEvent\"): PageTransitionEvent;\r\n    createEvent(eventInterface: \"PointerEvent\"): MSPointerEvent;\r\n    createEvent(eventInterface: \"PopStateEvent\"): PopStateEvent;\r\n    createEvent(eventInterface: \"ProgressEvent\"): ProgressEvent;\r\n    createEvent(eventInterface: \"StorageEvent\"): StorageEvent;\r\n    createEvent(eventInterface: \"SVGZoomEvents\"): SVGZoomEvent;\r\n    createEvent(eventInterface: \"TextEvent\"): TextEvent;\r\n    createEvent(eventInterface: \"TrackEvent\"): TrackEvent;\r\n    createEvent(eventInterface: \"TransitionEvent\"): TransitionEvent;\r\n    createEvent(eventInterface: \"UIEvent\"): UIEvent;\r\n    createEvent(eventInterface: \"UIEvents\"): UIEvent;\r\n    createEvent(eventInterface: \"UnviewableContentIdentifiedEvent\"): UnviewableContentIdentifiedEvent;\r\n    createEvent(eventInterface: \"WebGLContextEvent\"): WebGLContextEvent;\r\n    createEvent(eventInterface: \"WheelEvent\"): WheelEvent;\r\n    createEvent(eventInterface: string): Event;\r\n}\r\n\r\ninterface HTMLOListElement extends HTMLElement, DOML2DeprecatedListSpaceReduction, DOML2DeprecatedListNumberingAndBulletStyle {\r\n    /**\r\n      * The starting number.\r\n      */\r\n    start: number;\r\n}\r\ndeclare var HTMLOListElement: {\r\n    prototype: HTMLOListElement;\r\n    new(): HTMLOListElement;\r\n}\r\n\r\ninterface SVGPathSegLinetoVerticalRel extends SVGPathSeg {\r\n    y: number;\r\n}\r\ndeclare var SVGPathSegLinetoVerticalRel: {\r\n    prototype: SVGPathSegLinetoVerticalRel;\r\n    new(): SVGPathSegLinetoVerticalRel;\r\n}\r\n\r\ninterface SVGAnimatedString {\r\n    animVal: string;\r\n    baseVal: string;\r\n}\r\ndeclare var SVGAnimatedString: {\r\n    prototype: SVGAnimatedString;\r\n    new(): SVGAnimatedString;\r\n}\r\n\r\ninterface CDATASection extends Text {\r\n}\r\ndeclare var CDATASection: {\r\n    prototype: CDATASection;\r\n    new(): CDATASection;\r\n}\r\n\r\ninterface StyleMedia {\r\n    type: string;\r\n    matchMedium(mediaquery: string): boolean;\r\n}\r\ndeclare var StyleMedia: {\r\n    prototype: StyleMedia;\r\n    new(): StyleMedia;\r\n}\r\n\r\ninterface HTMLSelectElement extends HTMLElement, MSHTMLCollectionExtensions, MSDataBindingExtensions {\r\n    options: HTMLSelectElement;\r\n    /**\r\n      * Sets or retrieves the value which is returned to the server when the form control is submitted.\r\n      */\r\n    value: string;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in. \r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves the number of rows in the list box. \r\n      */\r\n    size: number;\r\n    /**\r\n      * Sets or retrieves the number of objects in a collection.\r\n      */\r\n    length: number;\r\n    /**\r\n      * Sets or retrieves the index of the selected option in a select object.\r\n      */\r\n    selectedIndex: number;\r\n    /**\r\n      * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.\r\n      */\r\n    multiple: boolean;\r\n    /**\r\n      * Retrieves the type of select control based on the value of the MULTIPLE attribute.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\r\n      */\r\n    validationMessage: string;\r\n    /**\r\n      * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\r\n      */\r\n    autofocus: boolean;\r\n    /**\r\n      * Returns a  ValidityState object that represents the validity states of an element.\r\n      */\r\n    validity: ValidityState;\r\n    /**\r\n      * When present, marks an element that can't be submitted without a value.\r\n      */\r\n    required: boolean;\r\n    /**\r\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\r\n      */\r\n    willValidate: boolean;\r\n    /**\r\n      * Removes an element from the collection.\r\n      * @param index Number that specifies the zero-based index of the element to remove from the collection.\r\n      */\r\n    remove(index?: number): void;\r\n    /**\r\n      * Adds an element to the areas, controlRange, or options collection.\r\n      * @param element Variant of type Number that specifies the index position in the collection where the element is placed. If no value is given, the method places the element at the end of the collection.\r\n      * @param before Variant of type Object that specifies an element to insert before, or null to append the object to the collection. \r\n      */\r\n    add(element: HTMLElement, before?: any): void;\r\n    /**\r\n      * Retrieves a select object or an object from an options collection.\r\n      * @param name Variant of type Number or String that specifies the object or collection to retrieve. If this parameter is an integer, it is the zero-based index of the object. If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made.\r\n      * @param index Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned.\r\n      */\r\n    item(name?: any, index?: any): any;\r\n    /**\r\n      * Retrieves a select object or an object from an options collection.\r\n      * @param namedItem A String that specifies the name or id property of the object to retrieve. A collection is returned if more than one match is made.\r\n      */\r\n    namedItem(name: string): any;\r\n    [name: string]: any;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Sets a custom error message that is displayed when a form is submitted.\r\n      * @param error Sets a custom error message that is displayed when a form is submitted.\r\n      */\r\n    setCustomValidity(error: string): void;\r\n}\r\ndeclare var HTMLSelectElement: {\r\n    prototype: HTMLSelectElement;\r\n    new(): HTMLSelectElement;\r\n}\r\n\r\ninterface TextRange {\r\n    boundingLeft: number;\r\n    htmlText: string;\r\n    offsetLeft: number;\r\n    boundingWidth: number;\r\n    boundingHeight: number;\r\n    boundingTop: number;\r\n    text: string;\r\n    offsetTop: number;\r\n    moveToPoint(x: number, y: number): void;\r\n    queryCommandValue(cmdID: string): any;\r\n    getBookmark(): string;\r\n    move(unit: string, count?: number): number;\r\n    queryCommandIndeterm(cmdID: string): boolean;\r\n    scrollIntoView(fStart?: boolean): void;\r\n    findText(string: string, count?: number, flags?: number): boolean;\r\n    execCommand(cmdID: string, showUI?: boolean, value?: any): boolean;\r\n    getBoundingClientRect(): ClientRect;\r\n    moveToBookmark(bookmark: string): boolean;\r\n    isEqual(range: TextRange): boolean;\r\n    duplicate(): TextRange;\r\n    collapse(start?: boolean): void;\r\n    queryCommandText(cmdID: string): string;\r\n    select(): void;\r\n    pasteHTML(html: string): void;\r\n    inRange(range: TextRange): boolean;\r\n    moveEnd(unit: string, count?: number): number;\r\n    getClientRects(): ClientRectList;\r\n    moveStart(unit: string, count?: number): number;\r\n    parentElement(): Element;\r\n    queryCommandState(cmdID: string): boolean;\r\n    compareEndPoints(how: string, sourceRange: TextRange): number;\r\n    execCommandShowHelp(cmdID: string): boolean;\r\n    moveToElementText(element: Element): void;\r\n    expand(Unit: string): boolean;\r\n    queryCommandSupported(cmdID: string): boolean;\r\n    setEndPoint(how: string, SourceRange: TextRange): void;\r\n    queryCommandEnabled(cmdID: string): boolean;\r\n}\r\ndeclare var TextRange: {\r\n    prototype: TextRange;\r\n    new(): TextRange;\r\n}\r\n\r\ninterface SVGTests {\r\n    requiredFeatures: SVGStringList;\r\n    requiredExtensions: SVGStringList;\r\n    systemLanguage: SVGStringList;\r\n    hasExtension(extension: string): boolean;\r\n}\r\n\r\ninterface HTMLBlockElement extends HTMLElement, DOML2DeprecatedTextFlowControl {\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: number;\r\n    /**\r\n      * Sets or retrieves reference information about the object.\r\n      */\r\n    cite: string;\r\n}\r\ndeclare var HTMLBlockElement: {\r\n    prototype: HTMLBlockElement;\r\n    new(): HTMLBlockElement;\r\n}\r\n\r\ninterface CSSStyleSheet extends StyleSheet {\r\n    owningElement: Element;\r\n    imports: StyleSheetList;\r\n    isAlternate: boolean;\r\n    rules: MSCSSRuleList;\r\n    isPrefAlternate: boolean;\r\n    readOnly: boolean;\r\n    cssText: string;\r\n    ownerRule: CSSRule;\r\n    href: string;\r\n    cssRules: CSSRuleList;\r\n    id: string;\r\n    pages: StyleSheetPageList;\r\n    addImport(bstrURL: string, lIndex?: number): number;\r\n    addPageRule(bstrSelector: string, bstrStyle: string, lIndex?: number): number;\r\n    insertRule(rule: string, index?: number): number;\r\n    removeRule(lIndex: number): void;\r\n    deleteRule(index?: number): void;\r\n    addRule(bstrSelector: string, bstrStyle?: string, lIndex?: number): number;\r\n    removeImport(lIndex: number): void;\r\n}\r\ndeclare var CSSStyleSheet: {\r\n    prototype: CSSStyleSheet;\r\n    new(): CSSStyleSheet;\r\n}\r\n\r\ninterface MSSelection {\r\n    type: string;\r\n    typeDetail: string;\r\n    createRange(): TextRange;\r\n    clear(): void;\r\n    createRangeCollection(): TextRangeCollection;\r\n    empty(): void;\r\n}\r\ndeclare var MSSelection: {\r\n    prototype: MSSelection;\r\n    new(): MSSelection;\r\n}\r\n\r\ninterface HTMLMetaElement extends HTMLElement {\r\n    /**\r\n      * Gets or sets information used to bind the value of a content attribute of a meta element to an HTTP response header.\r\n      */\r\n    httpEquiv: string;\r\n    /**\r\n      * Sets or retrieves the value specified in the content attribute of the meta object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Gets or sets meta-information to associate with httpEquiv or name.\r\n      */\r\n    content: string;\r\n    /**\r\n      * Sets or retrieves the URL property that will be loaded after the specified time has elapsed. \r\n      */\r\n    url: string;\r\n    /**\r\n      * Sets or retrieves a scheme to be used in interpreting the value of a property specified for the object.\r\n      */\r\n    scheme: string;\r\n    /**\r\n      * Sets or retrieves the character set used to encode the object.\r\n      */\r\n    charset: string;\r\n}\r\ndeclare var HTMLMetaElement: {\r\n    prototype: HTMLMetaElement;\r\n    new(): HTMLMetaElement;\r\n}\r\n\r\ninterface SVGPatternElement extends SVGElement, SVGUnitTypes, SVGStylable, SVGLangSpace, SVGTests, SVGFitToViewBox, SVGExternalResourcesRequired, SVGURIReference {\r\n    patternUnits: SVGAnimatedEnumeration;\r\n    y: SVGAnimatedLength;\r\n    width: SVGAnimatedLength;\r\n    x: SVGAnimatedLength;\r\n    patternContentUnits: SVGAnimatedEnumeration;\r\n    patternTransform: SVGAnimatedTransformList;\r\n    height: SVGAnimatedLength;\r\n}\r\ndeclare var SVGPatternElement: {\r\n    prototype: SVGPatternElement;\r\n    new(): SVGPatternElement;\r\n}\r\n\r\ninterface SVGAnimatedAngle {\r\n    animVal: SVGAngle;\r\n    baseVal: SVGAngle;\r\n}\r\ndeclare var SVGAnimatedAngle: {\r\n    prototype: SVGAnimatedAngle;\r\n    new(): SVGAnimatedAngle;\r\n}\r\n\r\ninterface Selection {\r\n    isCollapsed: boolean;\r\n    anchorNode: Node;\r\n    focusNode: Node;\r\n    anchorOffset: number;\r\n    focusOffset: number;\r\n    rangeCount: number;\r\n    addRange(range: Range): void;\r\n    collapseToEnd(): void;\r\n    toString(): string;\r\n    selectAllChildren(parentNode: Node): void;\r\n    getRangeAt(index: number): Range;\r\n    collapse(parentNode: Node, offset: number): void;\r\n    removeAllRanges(): void;\r\n    collapseToStart(): void;\r\n    deleteFromDocument(): void;\r\n    removeRange(range: Range): void;\r\n}\r\ndeclare var Selection: {\r\n    prototype: Selection;\r\n    new(): Selection;\r\n}\r\n\r\ninterface SVGScriptElement extends SVGElement, SVGExternalResourcesRequired, SVGURIReference {\r\n    type: string;\r\n}\r\ndeclare var SVGScriptElement: {\r\n    prototype: SVGScriptElement;\r\n    new(): SVGScriptElement;\r\n}\r\n\r\ninterface HTMLDDElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves whether the browser automatically performs wordwrap.\r\n      */\r\n    noWrap: boolean;\r\n}\r\ndeclare var HTMLDDElement: {\r\n    prototype: HTMLDDElement;\r\n    new(): HTMLDDElement;\r\n}\r\n\r\ninterface MSDataBindingRecordSetReadonlyExtensions {\r\n    recordset: any;\r\n    namedRecordset(dataMember: string, hierarchy?: any): any;\r\n}\r\n\r\ninterface CSSStyleRule extends CSSRule {\r\n    selectorText: string;\r\n    style: MSStyleCSSProperties;\r\n    readOnly: boolean;\r\n}\r\ndeclare var CSSStyleRule: {\r\n    prototype: CSSStyleRule;\r\n    new(): CSSStyleRule;\r\n}\r\n\r\ninterface NodeIterator {\r\n    whatToShow: number;\r\n    filter: NodeFilter;\r\n    root: Node;\r\n    expandEntityReferences: boolean;\r\n    nextNode(): Node;\r\n    detach(): void;\r\n    previousNode(): Node;\r\n}\r\ndeclare var NodeIterator: {\r\n    prototype: NodeIterator;\r\n    new(): NodeIterator;\r\n}\r\n\r\ninterface SVGViewElement extends SVGElement, SVGZoomAndPan, SVGFitToViewBox, SVGExternalResourcesRequired {\r\n    viewTarget: SVGStringList;\r\n}\r\ndeclare var SVGViewElement: {\r\n    prototype: SVGViewElement;\r\n    new(): SVGViewElement;\r\n}\r\n\r\ninterface HTMLLinkElement extends HTMLElement, LinkStyle {\r\n    /**\r\n      * Sets or retrieves the relationship between the object and the destination of the link.\r\n      */\r\n    rel: string;\r\n    /**\r\n      * Sets or retrieves the window or frame at which to target content.\r\n      */\r\n    target: string;\r\n    /**\r\n      * Sets or retrieves a destination URL or an anchor point.\r\n      */\r\n    href: string;\r\n    /**\r\n      * Sets or retrieves the media type.\r\n      */\r\n    media: string;\r\n    /**\r\n      * Sets or retrieves the relationship between the object and the destination of the link.\r\n      */\r\n    rev: string;\r\n    /**\r\n      * Sets or retrieves the MIME type of the object.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Sets or retrieves the character set used to encode the object.\r\n      */\r\n    charset: string;\r\n    /**\r\n      * Sets or retrieves the language code of the object.\r\n      */\r\n    hreflang: string;\r\n}\r\ndeclare var HTMLLinkElement: {\r\n    prototype: HTMLLinkElement;\r\n    new(): HTMLLinkElement;\r\n}\r\n\r\ninterface SVGLocatable {\r\n    farthestViewportElement: SVGElement;\r\n    nearestViewportElement: SVGElement;\r\n    getBBox(): SVGRect;\r\n    getTransformToElement(element: SVGElement): SVGMatrix;\r\n    getCTM(): SVGMatrix;\r\n    getScreenCTM(): SVGMatrix;\r\n}\r\n\r\ninterface HTMLFontElement extends HTMLElement, DOML2DeprecatedColorProperty, DOML2DeprecatedSizeProperty {\r\n    /**\r\n      * Sets or retrieves the current typeface family.\r\n      */\r\n    face: string;\r\n}\r\ndeclare var HTMLFontElement: {\r\n    prototype: HTMLFontElement;\r\n    new(): HTMLFontElement;\r\n}\r\n\r\ninterface SVGTitleElement extends SVGElement, SVGStylable, SVGLangSpace {\r\n}\r\ndeclare var SVGTitleElement: {\r\n    prototype: SVGTitleElement;\r\n    new(): SVGTitleElement;\r\n}\r\n\r\ninterface ControlRangeCollection {\r\n    length: number;\r\n    queryCommandValue(cmdID: string): any;\r\n    remove(index: number): void;\r\n    add(item: Element): void;\r\n    queryCommandIndeterm(cmdID: string): boolean;\r\n    scrollIntoView(varargStart?: any): void;\r\n    item(index: number): Element;\r\n    [index: number]: Element;\r\n    execCommand(cmdID: string, showUI?: boolean, value?: any): boolean;\r\n    addElement(item: Element): void;\r\n    queryCommandState(cmdID: string): boolean;\r\n    queryCommandSupported(cmdID: string): boolean;\r\n    queryCommandEnabled(cmdID: string): boolean;\r\n    queryCommandText(cmdID: string): string;\r\n    select(): void;\r\n}\r\ndeclare var ControlRangeCollection: {\r\n    prototype: ControlRangeCollection;\r\n    new(): ControlRangeCollection;\r\n}\r\n\r\ninterface MSNamespaceInfo extends MSEventAttachmentTarget {\r\n    urn: string;\r\n    onreadystatechange: (ev: Event) => any;\r\n    name: string;\r\n    readyState: string;\r\n    doImport(implementationUrl: string): void;\r\n    addEventListener(type: \"readystatechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var MSNamespaceInfo: {\r\n    prototype: MSNamespaceInfo;\r\n    new(): MSNamespaceInfo;\r\n}\r\n\r\ninterface WindowSessionStorage {\r\n    sessionStorage: Storage;\r\n}\r\n\r\ninterface SVGAnimatedTransformList {\r\n    animVal: SVGTransformList;\r\n    baseVal: SVGTransformList;\r\n}\r\ndeclare var SVGAnimatedTransformList: {\r\n    prototype: SVGAnimatedTransformList;\r\n    new(): SVGAnimatedTransformList;\r\n}\r\n\r\ninterface HTMLTableCaptionElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the alignment of the caption or legend.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves whether the caption appears at the top or bottom of the table.\r\n      */\r\n    vAlign: string;\r\n}\r\ndeclare var HTMLTableCaptionElement: {\r\n    prototype: HTMLTableCaptionElement;\r\n    new(): HTMLTableCaptionElement;\r\n}\r\n\r\ninterface HTMLOptionElement extends HTMLElement, MSDataBindingExtensions {\r\n    /**\r\n      * Sets or retrieves the ordinal position of an option in a list box.\r\n      */\r\n    index: number;\r\n    /**\r\n      * Sets or retrieves the status of an option.\r\n      */\r\n    defaultSelected: boolean;\r\n    /**\r\n      * Sets or retrieves the value which is returned to the server when the form control is submitted.\r\n      */\r\n    value: string;\r\n    /**\r\n      * Sets or retrieves the text string specified by the option tag.\r\n      */\r\n    text: string;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves a value that you can use to implement your own label functionality for the object.\r\n      */\r\n    label: string;\r\n    /**\r\n      * Sets or retrieves whether the option in the list box is the default item.\r\n      */\r\n    selected: boolean;\r\n}\r\ndeclare var HTMLOptionElement: {\r\n    prototype: HTMLOptionElement;\r\n    new(): HTMLOptionElement;\r\n    create(): HTMLOptionElement;\r\n}\r\n\r\ninterface HTMLMapElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Retrieves a collection of the area objects defined for the given map object.\r\n      */\r\n    areas: HTMLAreasCollection;\r\n}\r\ndeclare var HTMLMapElement: {\r\n    prototype: HTMLMapElement;\r\n    new(): HTMLMapElement;\r\n}\r\n\r\ninterface HTMLMenuElement extends HTMLElement, DOML2DeprecatedListSpaceReduction {\r\n    type: string;\r\n}\r\ndeclare var HTMLMenuElement: {\r\n    prototype: HTMLMenuElement;\r\n    new(): HTMLMenuElement;\r\n}\r\n\r\ninterface MouseWheelEvent extends MouseEvent {\r\n    wheelDelta: number;\r\n    initMouseWheelEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, buttonArg: number, relatedTargetArg: EventTarget, modifiersListArg: string, wheelDeltaArg: number): void;\r\n}\r\ndeclare var MouseWheelEvent: {\r\n    prototype: MouseWheelEvent;\r\n    new(): MouseWheelEvent;\r\n}\r\n\r\ninterface SVGFitToViewBox {\r\n    viewBox: SVGAnimatedRect;\r\n    preserveAspectRatio: SVGAnimatedPreserveAspectRatio;\r\n}\r\n\r\ninterface SVGPointList {\r\n    numberOfItems: number;\r\n    replaceItem(newItem: SVGPoint, index: number): SVGPoint;\r\n    getItem(index: number): SVGPoint;\r\n    clear(): void;\r\n    appendItem(newItem: SVGPoint): SVGPoint;\r\n    initialize(newItem: SVGPoint): SVGPoint;\r\n    removeItem(index: number): SVGPoint;\r\n    insertItemBefore(newItem: SVGPoint, index: number): SVGPoint;\r\n}\r\ndeclare var SVGPointList: {\r\n    prototype: SVGPointList;\r\n    new(): SVGPointList;\r\n}\r\n\r\ninterface SVGAnimatedLengthList {\r\n    animVal: SVGLengthList;\r\n    baseVal: SVGLengthList;\r\n}\r\ndeclare var SVGAnimatedLengthList: {\r\n    prototype: SVGAnimatedLengthList;\r\n    new(): SVGAnimatedLengthList;\r\n}\r\n\r\ninterface SVGAnimatedPreserveAspectRatio {\r\n    animVal: SVGPreserveAspectRatio;\r\n    baseVal: SVGPreserveAspectRatio;\r\n}\r\ndeclare var SVGAnimatedPreserveAspectRatio: {\r\n    prototype: SVGAnimatedPreserveAspectRatio;\r\n    new(): SVGAnimatedPreserveAspectRatio;\r\n}\r\n\r\ninterface MSSiteModeEvent extends Event {\r\n    buttonID: number;\r\n    actionURL: string;\r\n}\r\ndeclare var MSSiteModeEvent: {\r\n    prototype: MSSiteModeEvent;\r\n    new(): MSSiteModeEvent;\r\n}\r\n\r\ninterface DOML2DeprecatedTextFlowControl {\r\n    clear: string;\r\n}\r\n\r\ninterface StyleSheetPageList {\r\n    length: number;\r\n    item(index: number): CSSPageRule;\r\n    [index: number]: CSSPageRule;\r\n}\r\ndeclare var StyleSheetPageList: {\r\n    prototype: StyleSheetPageList;\r\n    new(): StyleSheetPageList;\r\n}\r\n\r\ninterface MSCSSProperties extends CSSStyleDeclaration {\r\n    scrollbarShadowColor: string;\r\n    scrollbarHighlightColor: string;\r\n    layoutGridChar: string;\r\n    layoutGridType: string;\r\n    textAutospace: string;\r\n    textKashidaSpace: string;\r\n    writingMode: string;\r\n    scrollbarFaceColor: string;\r\n    backgroundPositionY: string;\r\n    lineBreak: string;\r\n    imeMode: string;\r\n    msBlockProgression: string;\r\n    layoutGridLine: string;\r\n    scrollbarBaseColor: string;\r\n    layoutGrid: string;\r\n    layoutFlow: string;\r\n    textKashida: string;\r\n    filter: string;\r\n    zoom: string;\r\n    scrollbarArrowColor: string;\r\n    behavior: string;\r\n    backgroundPositionX: string;\r\n    accelerator: string;\r\n    layoutGridMode: string;\r\n    textJustifyTrim: string;\r\n    scrollbar3dLightColor: string;\r\n    msInterpolationMode: string;\r\n    scrollbarTrackColor: string;\r\n    scrollbarDarkShadowColor: string;\r\n    styleFloat: string;\r\n    getAttribute(attributeName: string, flags?: number): any;\r\n    setAttribute(attributeName: string, AttributeValue: any, flags?: number): void;\r\n    removeAttribute(attributeName: string, flags?: number): boolean;\r\n}\r\ndeclare var MSCSSProperties: {\r\n    prototype: MSCSSProperties;\r\n    new(): MSCSSProperties;\r\n}\r\n\r\ninterface SVGExternalResourcesRequired {\r\n    externalResourcesRequired: SVGAnimatedBoolean;\r\n}\r\n\r\ninterface HTMLImageElement extends HTMLElement, MSImageResourceExtensions, MSDataBindingExtensions, MSResourceMetadata {\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: number;\r\n    /**\r\n      * Sets or retrieves the vertical margin for the object.\r\n      */\r\n    vspace: number;\r\n    /**\r\n      * The original height of the image resource before sizing.\r\n      */\r\n    naturalHeight: number;\r\n    /**\r\n      * Sets or retrieves a text alternative to the graphic.\r\n      */\r\n    alt: string;\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    /**\r\n      * The address or URL of the a media resource that is to be considered.\r\n      */\r\n    src: string;\r\n    /**\r\n      * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\r\n      */\r\n    useMap: string;\r\n    /**\r\n      * The original width of the image resource before sizing.\r\n      */\r\n    naturalWidth: number;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: number;\r\n    /**\r\n      * Specifies the properties of a border drawn around an object.\r\n      */\r\n    border: string;\r\n    /**\r\n      * Sets or retrieves the width of the border to draw around the object.\r\n      */\r\n    hspace: number;\r\n    /**\r\n      * Sets or retrieves a Uniform Resource Identifier (URI) to a long description of the object.\r\n      */\r\n    longDesc: string;\r\n    /**\r\n      * Contains the hypertext reference (HREF) of the URL.\r\n      */\r\n    href: string;\r\n    /**\r\n      * Sets or retrieves whether the image is a server-side image map.\r\n      */\r\n    isMap: boolean;\r\n    /**\r\n      * Retrieves whether the object is fully loaded.\r\n      */\r\n    complete: boolean;\r\n    /**\r\n      * Gets or sets the primary DLNA PlayTo device.\r\n      */\r\n    msPlayToPrimary: boolean;\r\n    /**\r\n      * Gets or sets whether the DLNA PlayTo device is available.\r\n      */\r\n    msPlayToDisabled: boolean;\r\n    /**\r\n      * Gets the source associated with the media element for use by the PlayToManager.\r\n      */\r\n    msPlayToSource: any;\r\n    crossOrigin: string;\r\n    msPlayToPreferredSourceUri: string;\r\n}\r\ndeclare var HTMLImageElement: {\r\n    prototype: HTMLImageElement;\r\n    new(): HTMLImageElement;\r\n    create(): HTMLImageElement;\r\n}\r\n\r\ninterface HTMLAreaElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the protocol portion of a URL.\r\n      */\r\n    protocol: string;\r\n    /**\r\n      * Sets or retrieves the substring of the href property that follows the question mark.\r\n      */\r\n    search: string;\r\n    /**\r\n      * Sets or retrieves a text alternative to the graphic.\r\n      */\r\n    alt: string;\r\n    /**\r\n      * Sets or retrieves the coordinates of the object.\r\n      */\r\n    coords: string;\r\n    /**\r\n      * Sets or retrieves the host name part of the location or URL. \r\n      */\r\n    hostname: string;\r\n    /**\r\n      * Sets or retrieves the port number associated with a URL.\r\n      */\r\n    port: string;\r\n    /**\r\n      * Sets or retrieves the file name or path specified by the object.\r\n      */\r\n    pathname: string;\r\n    /**\r\n      * Sets or retrieves the hostname and port number of the location or URL.\r\n      */\r\n    host: string;\r\n    /**\r\n      * Sets or retrieves the subsection of the href property that follows the number sign (#).\r\n      */\r\n    hash: string;\r\n    /**\r\n      * Sets or retrieves the window or frame at which to target content.\r\n      */\r\n    target: string;\r\n    /**\r\n      * Sets or retrieves a destination URL or an anchor point.\r\n      */\r\n    href: string;\r\n    /**\r\n      * Sets or gets whether clicks in this region cause action.\r\n      */\r\n    noHref: boolean;\r\n    /**\r\n      * Sets or retrieves the shape of the object.\r\n      */\r\n    shape: string;\r\n    /** \r\n      * Returns a string representation of an object.\r\n      */\r\n    toString(): string;\r\n}\r\ndeclare var HTMLAreaElement: {\r\n    prototype: HTMLAreaElement;\r\n    new(): HTMLAreaElement;\r\n}\r\n\r\ninterface EventTarget {\r\n    removeEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n    dispatchEvent(evt: Event): boolean;\r\n}\r\n\r\ninterface SVGAngle {\r\n    valueAsString: string;\r\n    valueInSpecifiedUnits: number;\r\n    value: number;\r\n    unitType: number;\r\n    newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void;\r\n    convertToSpecifiedUnits(unitType: number): void;\r\n    SVG_ANGLETYPE_RAD: number;\r\n    SVG_ANGLETYPE_UNKNOWN: number;\r\n    SVG_ANGLETYPE_UNSPECIFIED: number;\r\n    SVG_ANGLETYPE_DEG: number;\r\n    SVG_ANGLETYPE_GRAD: number;\r\n}\r\ndeclare var SVGAngle: {\r\n    prototype: SVGAngle;\r\n    new(): SVGAngle;\r\n    SVG_ANGLETYPE_RAD: number;\r\n    SVG_ANGLETYPE_UNKNOWN: number;\r\n    SVG_ANGLETYPE_UNSPECIFIED: number;\r\n    SVG_ANGLETYPE_DEG: number;\r\n    SVG_ANGLETYPE_GRAD: number;\r\n}\r\n\r\ninterface HTMLButtonElement extends HTMLElement, MSDataBindingExtensions {\r\n    /** \r\n      * Sets or retrieves the default or selected value of the control.\r\n      */\r\n    value: string;\r\n    status: any;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n    /** \r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Gets the classification and default behavior of the button.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\r\n      */\r\n    validationMessage: string;\r\n    /**\r\n      * Overrides the target attribute on a form element.\r\n      */\r\n    formTarget: string;\r\n    /**\r\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\r\n      */\r\n    willValidate: boolean;\r\n    /**\r\n      * Overrides the action attribute (where the data on a form is sent) on the parent form element.\r\n      */\r\n    formAction: string;\r\n    /**\r\n      * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\r\n      */\r\n    autofocus: boolean;\r\n    /**\r\n      * Returns a  ValidityState object that represents the validity states of an element.\r\n      */\r\n    validity: ValidityState;\r\n    /**\r\n      * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a \"save draft\"-type submit option.\r\n      */\r\n    formNoValidate: string;\r\n    /**\r\n      * Used to override the encoding (formEnctype attribute) specified on the form element.\r\n      */\r\n    formEnctype: string;\r\n    /**\r\n      * Overrides the submit method attribute previously specified on a form element.\r\n      */\r\n    formMethod: string;\r\n    /**\r\n      * Creates a TextRange object for the element.\r\n      */\r\n    createTextRange(): TextRange;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Sets a custom error message that is displayed when a form is submitted.\r\n      * @param error Sets a custom error message that is displayed when a form is submitted.\r\n      */\r\n    setCustomValidity(error: string): void;\r\n}\r\ndeclare var HTMLButtonElement: {\r\n    prototype: HTMLButtonElement;\r\n    new(): HTMLButtonElement;\r\n}\r\n\r\ninterface HTMLSourceElement extends HTMLElement {\r\n    /**\r\n      * The address or URL of the a media resource that is to be considered.\r\n      */\r\n    src: string;\r\n    /**\r\n      * Gets or sets the intended media type of the media source.\r\n     */\r\n    media: string;\r\n    /**\r\n     * Gets or sets the MIME type of a media resource.\r\n     */\r\n    type: string;\r\n    msKeySystem: string;\r\n}\r\ndeclare var HTMLSourceElement: {\r\n    prototype: HTMLSourceElement;\r\n    new(): HTMLSourceElement;\r\n}\r\n\r\ninterface CanvasGradient {\r\n    addColorStop(offset: number, color: string): void;\r\n}\r\ndeclare var CanvasGradient: {\r\n    prototype: CanvasGradient;\r\n    new(): CanvasGradient;\r\n}\r\n\r\ninterface KeyboardEvent extends UIEvent {\r\n    location: number;\r\n    keyCode: number;\r\n    shiftKey: boolean;\r\n    which: number;\r\n    locale: string;\r\n    key: string;\r\n    altKey: boolean;\r\n    metaKey: boolean;\r\n    char: string;\r\n    ctrlKey: boolean;\r\n    repeat: boolean;\r\n    charCode: number;\r\n    getModifierState(keyArg: string): boolean;\r\n    initKeyboardEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, keyArg: string, locationArg: number, modifiersListArg: string, repeat: boolean, locale: string): void;\r\n    DOM_KEY_LOCATION_RIGHT: number;\r\n    DOM_KEY_LOCATION_STANDARD: number;\r\n    DOM_KEY_LOCATION_LEFT: number;\r\n    DOM_KEY_LOCATION_NUMPAD: number;\r\n    DOM_KEY_LOCATION_JOYSTICK: number;\r\n    DOM_KEY_LOCATION_MOBILE: number;\r\n}\r\ndeclare var KeyboardEvent: {\r\n    prototype: KeyboardEvent;\r\n    new(): KeyboardEvent;\r\n    DOM_KEY_LOCATION_RIGHT: number;\r\n    DOM_KEY_LOCATION_STANDARD: number;\r\n    DOM_KEY_LOCATION_LEFT: number;\r\n    DOM_KEY_LOCATION_NUMPAD: number;\r\n    DOM_KEY_LOCATION_JOYSTICK: number;\r\n    DOM_KEY_LOCATION_MOBILE: number;\r\n}\r\n\r\ninterface MessageEvent extends Event {\r\n    source: Window;\r\n    origin: string;\r\n    data: any;\r\n    ports: any;\r\n    initMessageEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, dataArg: any, originArg: string, lastEventIdArg: string, sourceArg: Window): void;\r\n}\r\ndeclare var MessageEvent: {\r\n    prototype: MessageEvent;\r\n    new(): MessageEvent;\r\n}\r\n\r\ninterface SVGElement extends Element {\r\n    onmouseover: (ev: MouseEvent) => any;\r\n    viewportElement: SVGElement;\r\n    onmousemove: (ev: MouseEvent) => any;\r\n    onmouseout: (ev: MouseEvent) => any;\r\n    ondblclick: (ev: MouseEvent) => any;\r\n    onfocusout: (ev: FocusEvent) => any;\r\n    onfocusin: (ev: FocusEvent) => any;\r\n    xmlbase: string;\r\n    onmousedown: (ev: MouseEvent) => any;\r\n    onload: (ev: Event) => any;\r\n    onmouseup: (ev: MouseEvent) => any;\r\n    onclick: (ev: MouseEvent) => any;\r\n    ownerSVGElement: SVGSVGElement;\r\n    id: string;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerdown\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgotpointercapture\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturedoubletap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerhover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturehold\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointermove\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturechange\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturestart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointercancel\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgestureend\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturetap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerout\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msinertiastart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mslostpointercapture\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerup\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerenter\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerleave\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusout\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusin\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var SVGElement: {\r\n    prototype: SVGElement;\r\n    new(): SVGElement;\r\n}\r\n\r\ninterface HTMLScriptElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the status of the script.\r\n      */\r\n    defer: boolean;\r\n    /**\r\n      * Retrieves or sets the text of the object as a string. \r\n      */\r\n    text: string;\r\n    /**\r\n      * Retrieves the URL to an external file that contains the source code or data.\r\n      */\r\n    src: string;\r\n    /** \r\n      * Sets or retrieves the object that is bound to the event script.\r\n      */\r\n    htmlFor: string;\r\n    /**\r\n      * Sets or retrieves the character set used to encode the object.\r\n      */\r\n    charset: string;\r\n    /**\r\n      * Sets or retrieves the MIME type for the associated scripting engine.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Sets or retrieves the event for which the script is written. \r\n      */\r\n    event: string;\r\n    async: boolean;\r\n}\r\ndeclare var HTMLScriptElement: {\r\n    prototype: HTMLScriptElement;\r\n    new(): HTMLScriptElement;\r\n}\r\n\r\ninterface HTMLTableRowElement extends HTMLElement, HTMLTableAlignment, DOML2DeprecatedBackgroundColorStyle {\r\n    /**\r\n      * Retrieves the position of the object in the rows collection for the table.\r\n      */\r\n    rowIndex: number;\r\n    /**\r\n      * Retrieves a collection of all cells in the table row.\r\n      */\r\n    cells: HTMLCollection;\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves the color for one of the two colors used to draw the 3-D border of the object.\r\n      */\r\n    borderColorLight: any;\r\n    /**\r\n      * Retrieves the position of the object in the collection.\r\n      */\r\n    sectionRowIndex: number;\r\n    /**\r\n      * Sets or retrieves the border color of the object.\r\n      */\r\n    borderColor: any;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: any;\r\n    /**\r\n      * Sets or retrieves the color for one of the two colors used to draw the 3-D border of the object.\r\n      */\r\n    borderColorDark: any;\r\n    /**\r\n      * Removes the specified cell from the table row, as well as from the cells collection.\r\n      * @param index Number that specifies the zero-based position of the cell to remove from the table row. If no value is provided, the last cell in the cells collection is deleted.\r\n      */\r\n    deleteCell(index?: number): void;\r\n    /**\r\n      * Creates a new cell in the table row, and adds the cell to the cells collection.\r\n      * @param index Number that specifies where to insert the cell in the tr. The default value is -1, which appends the new cell to the end of the cells collection.\r\n      */\r\n    insertCell(index?: number): HTMLElement;\r\n}\r\ndeclare var HTMLTableRowElement: {\r\n    prototype: HTMLTableRowElement;\r\n    new(): HTMLTableRowElement;\r\n}\r\n\r\ninterface CanvasRenderingContext2D {\r\n    miterLimit: number;\r\n    font: string;\r\n    globalCompositeOperation: string;\r\n    msFillRule: string;\r\n    lineCap: string;\r\n    msImageSmoothingEnabled: boolean;\r\n    lineDashOffset: number;\r\n    shadowColor: string;\r\n    lineJoin: string;\r\n    shadowOffsetX: number;\r\n    lineWidth: number;\r\n    canvas: HTMLCanvasElement;\r\n    strokeStyle: any;\r\n    globalAlpha: number;\r\n    shadowOffsetY: number;\r\n    fillStyle: any;\r\n    shadowBlur: number;\r\n    textAlign: string;\r\n    textBaseline: string;\r\n    restore(): void;\r\n    setTransform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): void;\r\n    save(): void;\r\n    arc(x: number, y: number, radius: number, startAngle: number, endAngle: number, anticlockwise?: boolean): void;\r\n    measureText(text: string): TextMetrics;\r\n    isPointInPath(x: number, y: number, fillRule?: string): boolean;\r\n    quadraticCurveTo(cpx: number, cpy: number, x: number, y: number): void;\r\n    putImageData(imagedata: ImageData, dx: number, dy: number, dirtyX?: number, dirtyY?: number, dirtyWidth?: number, dirtyHeight?: number): void;\r\n    rotate(angle: number): void;\r\n    fillText(text: string, x: number, y: number, maxWidth?: number): void;\r\n    translate(x: number, y: number): void;\r\n    scale(x: number, y: number): void;\r\n    createRadialGradient(x0: number, y0: number, r0: number, x1: number, y1: number, r1: number): CanvasGradient;\r\n    lineTo(x: number, y: number): void;\r\n    getLineDash(): number[];\r\n    fill(fillRule?: string): void;\r\n    createImageData(imageDataOrSw: any, sh?: number): ImageData;\r\n    createPattern(image: HTMLElement, repetition: string): CanvasPattern;\r\n    closePath(): void;\r\n    rect(x: number, y: number, w: number, h: number): void;\r\n    clip(fillRule?: string): void;\r\n    clearRect(x: number, y: number, w: number, h: number): void;\r\n    moveTo(x: number, y: number): void;\r\n    getImageData(sx: number, sy: number, sw: number, sh: number): ImageData;\r\n    fillRect(x: number, y: number, w: number, h: number): void;\r\n    bezierCurveTo(cp1x: number, cp1y: number, cp2x: number, cp2y: number, x: number, y: number): void;\r\n    drawImage(image: HTMLElement, offsetX: number, offsetY: number, width?: number, height?: number, canvasOffsetX?: number, canvasOffsetY?: number, canvasImageWidth?: number, canvasImageHeight?: number): void;\r\n    transform(m11: number, m12: number, m21: number, m22: number, dx: number, dy: number): void;\r\n    stroke(): void;\r\n    strokeRect(x: number, y: number, w: number, h: number): void;\r\n    setLineDash(segments: number[]): void;\r\n    strokeText(text: string, x: number, y: number, maxWidth?: number): void;\r\n    beginPath(): void;\r\n    arcTo(x1: number, y1: number, x2: number, y2: number, radius: number): void;\r\n    createLinearGradient(x0: number, y0: number, x1: number, y1: number): CanvasGradient;\r\n}\r\ndeclare var CanvasRenderingContext2D: {\r\n    prototype: CanvasRenderingContext2D;\r\n    new(): CanvasRenderingContext2D;\r\n}\r\n\r\ninterface MSCSSRuleList {\r\n    length: number;\r\n    item(index?: number): CSSStyleRule;\r\n    [index: number]: CSSStyleRule;\r\n}\r\ndeclare var MSCSSRuleList: {\r\n    prototype: MSCSSRuleList;\r\n    new(): MSCSSRuleList;\r\n}\r\n\r\ninterface SVGPathSegLinetoHorizontalAbs extends SVGPathSeg {\r\n    x: number;\r\n}\r\ndeclare var SVGPathSegLinetoHorizontalAbs: {\r\n    prototype: SVGPathSegLinetoHorizontalAbs;\r\n    new(): SVGPathSegLinetoHorizontalAbs;\r\n}\r\n\r\ninterface SVGPathSegArcAbs extends SVGPathSeg {\r\n    y: number;\r\n    sweepFlag: boolean;\r\n    r2: number;\r\n    x: number;\r\n    angle: number;\r\n    r1: number;\r\n    largeArcFlag: boolean;\r\n}\r\ndeclare var SVGPathSegArcAbs: {\r\n    prototype: SVGPathSegArcAbs;\r\n    new(): SVGPathSegArcAbs;\r\n}\r\n\r\ninterface SVGTransformList {\r\n    numberOfItems: number;\r\n    getItem(index: number): SVGTransform;\r\n    consolidate(): SVGTransform;\r\n    clear(): void;\r\n    appendItem(newItem: SVGTransform): SVGTransform;\r\n    initialize(newItem: SVGTransform): SVGTransform;\r\n    removeItem(index: number): SVGTransform;\r\n    insertItemBefore(newItem: SVGTransform, index: number): SVGTransform;\r\n    replaceItem(newItem: SVGTransform, index: number): SVGTransform;\r\n    createSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform;\r\n}\r\ndeclare var SVGTransformList: {\r\n    prototype: SVGTransformList;\r\n    new(): SVGTransformList;\r\n}\r\n\r\ninterface HTMLHtmlElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the DTD version that governs the current document.\r\n      */\r\n    version: string;\r\n}\r\ndeclare var HTMLHtmlElement: {\r\n    prototype: HTMLHtmlElement;\r\n    new(): HTMLHtmlElement;\r\n}\r\n\r\ninterface SVGPathSegClosePath extends SVGPathSeg {\r\n}\r\ndeclare var SVGPathSegClosePath: {\r\n    prototype: SVGPathSegClosePath;\r\n    new(): SVGPathSegClosePath;\r\n}\r\n\r\ninterface HTMLFrameElement extends HTMLElement, GetSVGDocument, MSDataBindingExtensions {\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: any;\r\n    /**\r\n      * Sets or retrieves whether the frame can be scrolled.\r\n      */\r\n    scrolling: string;\r\n    /**\r\n      * Sets or retrieves the top and bottom margin heights before displaying the text in a frame.\r\n      */\r\n    marginHeight: string;\r\n    /**\r\n      * Sets or retrieves the left and right margin widths before displaying the text in a frame.\r\n      */\r\n    marginWidth: string;\r\n    /**\r\n      * Sets or retrieves the border color of the object.\r\n      */\r\n    borderColor: any;\r\n    /**\r\n      * Sets or retrieves the amount of additional space between the frames.\r\n      */\r\n    frameSpacing: any;\r\n    /**\r\n      * Sets or retrieves whether to display a border for the frame.\r\n      */\r\n    frameBorder: string;\r\n    /**\r\n      * Sets or retrieves whether the user can resize the frame.\r\n      */\r\n    noResize: boolean;\r\n    /**\r\n      * Retrieves the object of the specified.\r\n      */\r\n    contentWindow: Window;\r\n    /**\r\n      * Sets or retrieves a URL to be loaded by the object.\r\n      */\r\n    src: string;\r\n    /**\r\n      * Sets or retrieves the frame name.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: any;\r\n    /**\r\n      * Retrieves the document object of the page or frame.\r\n      */\r\n    contentDocument: Document;\r\n    /**\r\n      * Specifies the properties of a border drawn around an object.\r\n      */\r\n    border: string;\r\n    /**\r\n      * Sets or retrieves a URI to a long description of the object.\r\n      */\r\n    longDesc: string;\r\n    /**\r\n      * Raised when the object has been completely received from the server.\r\n      */\r\n    onload: (ev: Event) => any;\r\n    /**\r\n      * Sets the value indicating whether the source file of a frame or iframe has specific security restrictions applied.\r\n      */\r\n    security: any;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerdown\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgotpointercapture\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturedoubletap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerhover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturehold\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointermove\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturechange\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturestart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointercancel\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgestureend\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturetap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerout\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msinertiastart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mslostpointercapture\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerup\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerenter\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerleave\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"move\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"help\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusin\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"datasetchanged\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowsdelete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"losecapture\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"controlselect\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"layoutcomplete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"filterchange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"datasetcomplete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"errorupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cellchange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowexit\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowsinserted\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"propertychange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforepaste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecopy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resizestart\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"paste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"moveend\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeeditfocus\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"afterupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resizeend\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusout\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dataavailable\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"readystatechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"movestart\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"copy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowenter\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mscontentzoom\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msmanipulationstatechanged\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var HTMLFrameElement: {\r\n    prototype: HTMLFrameElement;\r\n    new(): HTMLFrameElement;\r\n}\r\n\r\ninterface SVGAnimatedLength {\r\n    animVal: SVGLength;\r\n    baseVal: SVGLength;\r\n}\r\ndeclare var SVGAnimatedLength: {\r\n    prototype: SVGAnimatedLength;\r\n    new(): SVGAnimatedLength;\r\n}\r\n\r\ninterface SVGAnimatedPoints {\r\n    points: SVGPointList;\r\n    animatedPoints: SVGPointList;\r\n}\r\n\r\ninterface SVGDefsElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired {\r\n}\r\ndeclare var SVGDefsElement: {\r\n    prototype: SVGDefsElement;\r\n    new(): SVGDefsElement;\r\n}\r\n\r\ninterface HTMLQuoteElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the date and time of a modification to the object.\r\n      */\r\n    dateTime: string;\r\n    /**\r\n      * Sets or retrieves reference information about the object.\r\n      */\r\n    cite: string;\r\n}\r\ndeclare var HTMLQuoteElement: {\r\n    prototype: HTMLQuoteElement;\r\n    new(): HTMLQuoteElement;\r\n}\r\n\r\ninterface CSSMediaRule extends CSSRule {\r\n    media: MediaList;\r\n    cssRules: CSSRuleList;\r\n    insertRule(rule: string, index?: number): number;\r\n    deleteRule(index?: number): void;\r\n}\r\ndeclare var CSSMediaRule: {\r\n    prototype: CSSMediaRule;\r\n    new(): CSSMediaRule;\r\n}\r\n\r\ninterface WindowModal {\r\n    dialogArguments: any;\r\n    returnValue: any;\r\n}\r\n\r\ninterface XMLHttpRequest extends EventTarget {\r\n    responseBody: any;\r\n    status: number;\r\n    readyState: number;\r\n    responseText: string;\r\n    responseXML: any;\r\n    ontimeout: (ev: Event) => any;\r\n    statusText: string;\r\n    onreadystatechange: (ev: Event) => any;\r\n    timeout: number;\r\n    onload: (ev: Event) => any;\r\n    response: any;\r\n    withCredentials: boolean;\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    onabort: (ev: UIEvent) => any;\r\n    responseType: string;\r\n    onloadend: (ev: ProgressEvent) => any;\r\n    upload: XMLHttpRequestEventTarget;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    onloadstart: (ev: Event) => any;\r\n    msCaching: string;\r\n    open(method: string, url: string, async?: boolean, user?: string, password?: string): void;\r\n    send(data?: any): void;\r\n    abort(): void;\r\n    getAllResponseHeaders(): string;\r\n    setRequestHeader(header: string, value: string): void;\r\n    getResponseHeader(header: string): string;\r\n    msCachingEnabled(): boolean;\r\n    overrideMimeType(mime: string): void;\r\n    LOADING: number;\r\n    DONE: number;\r\n    UNSENT: number;\r\n    OPENED: number;\r\n    HEADERS_RECEIVED: number;\r\n    addEventListener(type: \"timeout\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"readystatechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadend\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var XMLHttpRequest: {\r\n    prototype: XMLHttpRequest;\r\n    new(): XMLHttpRequest;\r\n    LOADING: number;\r\n    DONE: number;\r\n    UNSENT: number;\r\n    OPENED: number;\r\n    HEADERS_RECEIVED: number;\r\n    create(): XMLHttpRequest;\r\n}\r\n\r\ninterface HTMLTableHeaderCellElement extends HTMLTableCellElement {\r\n    /**\r\n      * Sets or retrieves the group of cells in a table to which the object's information applies.\r\n      */\r\n    scope: string;\r\n}\r\ndeclare var HTMLTableHeaderCellElement: {\r\n    prototype: HTMLTableHeaderCellElement;\r\n    new(): HTMLTableHeaderCellElement;\r\n}\r\n\r\ninterface HTMLDListElement extends HTMLElement, DOML2DeprecatedListSpaceReduction {\r\n}\r\ndeclare var HTMLDListElement: {\r\n    prototype: HTMLDListElement;\r\n    new(): HTMLDListElement;\r\n}\r\n\r\ninterface MSDataBindingExtensions {\r\n    dataSrc: string;\r\n    dataFormatAs: string;\r\n    dataFld: string;\r\n}\r\n\r\ninterface SVGPathSegLinetoHorizontalRel extends SVGPathSeg {\r\n    x: number;\r\n}\r\ndeclare var SVGPathSegLinetoHorizontalRel: {\r\n    prototype: SVGPathSegLinetoHorizontalRel;\r\n    new(): SVGPathSegLinetoHorizontalRel;\r\n}\r\n\r\ninterface SVGEllipseElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired {\r\n    ry: SVGAnimatedLength;\r\n    cx: SVGAnimatedLength;\r\n    rx: SVGAnimatedLength;\r\n    cy: SVGAnimatedLength;\r\n}\r\ndeclare var SVGEllipseElement: {\r\n    prototype: SVGEllipseElement;\r\n    new(): SVGEllipseElement;\r\n}\r\n\r\ninterface SVGAElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired, SVGURIReference {\r\n    target: SVGAnimatedString;\r\n}\r\ndeclare var SVGAElement: {\r\n    prototype: SVGAElement;\r\n    new(): SVGAElement;\r\n}\r\n\r\ninterface SVGStylable {\r\n    className: SVGAnimatedString;\r\n    style: CSSStyleDeclaration;\r\n}\r\n\r\ninterface SVGTransformable extends SVGLocatable {\r\n    transform: SVGAnimatedTransformList;\r\n}\r\n\r\ninterface HTMLFrameSetElement extends HTMLElement {\r\n    ononline: (ev: Event) => any;\r\n    /**\r\n      * Sets or retrieves the border color of the object.\r\n      */\r\n    borderColor: any;\r\n    /**\r\n      * Sets or retrieves the frame heights of the object.\r\n      */\r\n    rows: string;\r\n    /**\r\n      * Sets or retrieves the frame widths of the object.\r\n      */\r\n    cols: string;\r\n    /**\r\n      * Fires when the object loses the input focus.\r\n      */\r\n    onblur: (ev: FocusEvent) => any;\r\n    /**\r\n      * Sets or retrieves the amount of additional space between the frames.\r\n      */\r\n    frameSpacing: any;\r\n    /**\r\n      * Fires when the object receives focus.\r\n      */\r\n    onfocus: (ev: FocusEvent) => any;\r\n    onmessage: (ev: MessageEvent) => any;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    /**\r\n      * Sets or retrieves whether to display a border for the frame.\r\n      */\r\n    frameBorder: string;\r\n    onresize: (ev: UIEvent) => any;\r\n    name: string;\r\n    onafterprint: (ev: Event) => any;\r\n    onbeforeprint: (ev: Event) => any;\r\n    onoffline: (ev: Event) => any;\r\n    border: string;\r\n    onunload: (ev: Event) => any;\r\n    onhashchange: (ev: Event) => any;\r\n    onload: (ev: Event) => any;\r\n    onbeforeunload: (ev: BeforeUnloadEvent) => any;\r\n    onstorage: (ev: StorageEvent) => any;\r\n    onpageshow: (ev: PageTransitionEvent) => any;\r\n    onpagehide: (ev: PageTransitionEvent) => any;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerdown\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgotpointercapture\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturedoubletap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerhover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturehold\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointermove\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturechange\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturestart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointercancel\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgestureend\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturetap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerout\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msinertiastart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mslostpointercapture\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerup\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerenter\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerleave\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"move\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"help\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusin\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"datasetchanged\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowsdelete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"losecapture\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"controlselect\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"layoutcomplete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"filterchange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"datasetcomplete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"errorupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cellchange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowexit\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowsinserted\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"propertychange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforepaste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecopy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resizestart\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"paste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"moveend\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeeditfocus\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"afterupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resizeend\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusout\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dataavailable\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"readystatechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"movestart\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"copy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowenter\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mscontentzoom\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msmanipulationstatechanged\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"online\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"afterprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"offline\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"unload\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"hashchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeunload\", listener: (ev: BeforeUnloadEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"storage\", listener: (ev: StorageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pageshow\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pagehide\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var HTMLFrameSetElement: {\r\n    prototype: HTMLFrameSetElement;\r\n    new(): HTMLFrameSetElement;\r\n}\r\n\r\ninterface Screen extends EventTarget {\r\n    width: number;\r\n    deviceXDPI: number;\r\n    fontSmoothingEnabled: boolean;\r\n    bufferDepth: number;\r\n    logicalXDPI: number;\r\n    systemXDPI: number;\r\n    availHeight: number;\r\n    height: number;\r\n    logicalYDPI: number;\r\n    systemYDPI: number;\r\n    updateInterval: number;\r\n    colorDepth: number;\r\n    availWidth: number;\r\n    deviceYDPI: number;\r\n    pixelDepth: number;\r\n    msOrientation: string;\r\n    onmsorientationchange: (ev: any) => any;\r\n    msLockOrientation(orientation: string): boolean;\r\n    msLockOrientation(orientations: string[]): boolean;\r\n    msUnlockOrientation(): void;\r\n    addEventListener(type: \"msorientationchange\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var Screen: {\r\n    prototype: Screen;\r\n    new(): Screen;\r\n}\r\n\r\ninterface Coordinates {\r\n    altitudeAccuracy: number;\r\n    longitude: number;\r\n    latitude: number;\r\n    speed: number;\r\n    heading: number;\r\n    altitude: number;\r\n    accuracy: number;\r\n}\r\ndeclare var Coordinates: {\r\n    prototype: Coordinates;\r\n    new(): Coordinates;\r\n}\r\n\r\ninterface NavigatorGeolocation {\r\n    geolocation: Geolocation;\r\n}\r\n\r\ninterface NavigatorContentUtils {\r\n}\r\n\r\ninterface EventListener {\r\n    (evt: Event): void;\r\n}\r\n\r\ninterface SVGLangSpace {\r\n    xmllang: string;\r\n    xmlspace: string;\r\n}\r\n\r\ninterface DataTransfer {\r\n    effectAllowed: string;\r\n    dropEffect: string;\r\n    types: DOMStringList;\r\n    files: FileList;\r\n    clearData(format?: string): boolean;\r\n    setData(format: string, data: string): boolean;\r\n    getData(format: string): string;\r\n}\r\ndeclare var DataTransfer: {\r\n    prototype: DataTransfer;\r\n    new(): DataTransfer;\r\n}\r\n\r\ninterface FocusEvent extends UIEvent {\r\n    relatedTarget: EventTarget;\r\n    initFocusEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, relatedTargetArg: EventTarget): void;\r\n}\r\ndeclare var FocusEvent: {\r\n    prototype: FocusEvent;\r\n    new(): FocusEvent;\r\n}\r\n\r\ninterface Range {\r\n    startOffset: number;\r\n    collapsed: boolean;\r\n    endOffset: number;\r\n    startContainer: Node;\r\n    endContainer: Node;\r\n    commonAncestorContainer: Node;\r\n    setStart(refNode: Node, offset: number): void;\r\n    setEndBefore(refNode: Node): void;\r\n    setStartBefore(refNode: Node): void;\r\n    selectNode(refNode: Node): void;\r\n    detach(): void;\r\n    getBoundingClientRect(): ClientRect;\r\n    toString(): string;\r\n    compareBoundaryPoints(how: number, sourceRange: Range): number;\r\n    insertNode(newNode: Node): void;\r\n    collapse(toStart: boolean): void;\r\n    selectNodeContents(refNode: Node): void;\r\n    cloneContents(): DocumentFragment;\r\n    setEnd(refNode: Node, offset: number): void;\r\n    cloneRange(): Range;\r\n    getClientRects(): ClientRectList;\r\n    surroundContents(newParent: Node): void;\r\n    deleteContents(): void;\r\n    setStartAfter(refNode: Node): void;\r\n    extractContents(): DocumentFragment;\r\n    setEndAfter(refNode: Node): void;\r\n    createContextualFragment(fragment: string): DocumentFragment;\r\n    END_TO_END: number;\r\n    START_TO_START: number;\r\n    START_TO_END: number;\r\n    END_TO_START: number;\r\n}\r\ndeclare var Range: {\r\n    prototype: Range;\r\n    new(): Range;\r\n    END_TO_END: number;\r\n    START_TO_START: number;\r\n    START_TO_END: number;\r\n    END_TO_START: number;\r\n}\r\n\r\ninterface SVGPoint {\r\n    y: number;\r\n    x: number;\r\n    matrixTransform(matrix: SVGMatrix): SVGPoint;\r\n}\r\ndeclare var SVGPoint: {\r\n    prototype: SVGPoint;\r\n    new(): SVGPoint;\r\n}\r\n\r\ninterface MSPluginsCollection {\r\n    length: number;\r\n    refresh(reload?: boolean): void;\r\n}\r\ndeclare var MSPluginsCollection: {\r\n    prototype: MSPluginsCollection;\r\n    new(): MSPluginsCollection;\r\n}\r\n\r\ninterface SVGAnimatedNumberList {\r\n    animVal: SVGNumberList;\r\n    baseVal: SVGNumberList;\r\n}\r\ndeclare var SVGAnimatedNumberList: {\r\n    prototype: SVGAnimatedNumberList;\r\n    new(): SVGAnimatedNumberList;\r\n}\r\n\r\ninterface SVGSVGElement extends SVGElement, SVGStylable, SVGZoomAndPan, DocumentEvent, SVGLangSpace, SVGLocatable, SVGTests, SVGFitToViewBox, SVGExternalResourcesRequired {\r\n    width: SVGAnimatedLength;\r\n    x: SVGAnimatedLength;\r\n    contentStyleType: string;\r\n    onzoom: (ev: any) => any;\r\n    y: SVGAnimatedLength;\r\n    viewport: SVGRect;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    pixelUnitToMillimeterY: number;\r\n    onresize: (ev: UIEvent) => any;\r\n    screenPixelToMillimeterY: number;\r\n    height: SVGAnimatedLength;\r\n    onabort: (ev: UIEvent) => any;\r\n    contentScriptType: string;\r\n    pixelUnitToMillimeterX: number;\r\n    currentTranslate: SVGPoint;\r\n    onunload: (ev: Event) => any;\r\n    currentScale: number;\r\n    onscroll: (ev: UIEvent) => any;\r\n    screenPixelToMillimeterX: number;\r\n    setCurrentTime(seconds: number): void;\r\n    createSVGLength(): SVGLength;\r\n    getIntersectionList(rect: SVGRect, referenceElement: SVGElement): NodeList;\r\n    unpauseAnimations(): void;\r\n    createSVGRect(): SVGRect;\r\n    checkIntersection(element: SVGElement, rect: SVGRect): boolean;\r\n    unsuspendRedrawAll(): void;\r\n    pauseAnimations(): void;\r\n    suspendRedraw(maxWaitMilliseconds: number): number;\r\n    deselectAll(): void;\r\n    createSVGAngle(): SVGAngle;\r\n    getEnclosureList(rect: SVGRect, referenceElement: SVGElement): NodeList;\r\n    createSVGTransform(): SVGTransform;\r\n    unsuspendRedraw(suspendHandleID: number): void;\r\n    forceRedraw(): void;\r\n    getCurrentTime(): number;\r\n    checkEnclosure(element: SVGElement, rect: SVGRect): boolean;\r\n    createSVGMatrix(): SVGMatrix;\r\n    createSVGPoint(): SVGPoint;\r\n    createSVGNumber(): SVGNumber;\r\n    createSVGTransformFromMatrix(matrix: SVGMatrix): SVGTransform;\r\n    getComputedStyle(elt: Element, pseudoElt?: string): CSSStyleDeclaration;\r\n    getElementById(elementId: string): Element;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerdown\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgotpointercapture\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturedoubletap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerhover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturehold\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointermove\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturechange\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturestart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointercancel\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgestureend\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturetap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerout\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msinertiastart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mslostpointercapture\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerup\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerenter\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerleave\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusout\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusin\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"zoom\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"unload\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var SVGSVGElement: {\r\n    prototype: SVGSVGElement;\r\n    new(): SVGSVGElement;\r\n}\r\n\r\ninterface HTMLLabelElement extends HTMLElement, MSDataBindingExtensions {\r\n    /**\r\n      * Sets or retrieves the object to which the given label object is assigned.\r\n      */\r\n    htmlFor: string;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n}\r\ndeclare var HTMLLabelElement: {\r\n    prototype: HTMLLabelElement;\r\n    new(): HTMLLabelElement;\r\n}\r\n\r\ninterface MSResourceMetadata {\r\n    protocol: string;\r\n    fileSize: string;\r\n    fileUpdatedDate: string;\r\n    nameProp: string;\r\n    fileCreatedDate: string;\r\n    fileModifiedDate: string;\r\n    mimeType: string;\r\n}\r\n\r\ninterface HTMLLegendElement extends HTMLElement, MSDataBindingExtensions {\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n}\r\ndeclare var HTMLLegendElement: {\r\n    prototype: HTMLLegendElement;\r\n    new(): HTMLLegendElement;\r\n}\r\n\r\ninterface HTMLDirectoryElement extends HTMLElement, DOML2DeprecatedListSpaceReduction, DOML2DeprecatedListNumberingAndBulletStyle {\r\n}\r\ndeclare var HTMLDirectoryElement: {\r\n    prototype: HTMLDirectoryElement;\r\n    new(): HTMLDirectoryElement;\r\n}\r\n\r\ninterface SVGAnimatedInteger {\r\n    animVal: number;\r\n    baseVal: number;\r\n}\r\ndeclare var SVGAnimatedInteger: {\r\n    prototype: SVGAnimatedInteger;\r\n    new(): SVGAnimatedInteger;\r\n}\r\n\r\ninterface SVGTextElement extends SVGTextPositioningElement, SVGTransformable {\r\n}\r\ndeclare var SVGTextElement: {\r\n    prototype: SVGTextElement;\r\n    new(): SVGTextElement;\r\n}\r\n\r\ninterface SVGTSpanElement extends SVGTextPositioningElement {\r\n}\r\ndeclare var SVGTSpanElement: {\r\n    prototype: SVGTSpanElement;\r\n    new(): SVGTSpanElement;\r\n}\r\n\r\ninterface HTMLLIElement extends HTMLElement, DOML2DeprecatedListNumberingAndBulletStyle {\r\n    /**\r\n      * Sets or retrieves the value of a list item.\r\n      */\r\n    value: number;\r\n}\r\ndeclare var HTMLLIElement: {\r\n    prototype: HTMLLIElement;\r\n    new(): HTMLLIElement;\r\n}\r\n\r\ninterface SVGPathSegLinetoVerticalAbs extends SVGPathSeg {\r\n    y: number;\r\n}\r\ndeclare var SVGPathSegLinetoVerticalAbs: {\r\n    prototype: SVGPathSegLinetoVerticalAbs;\r\n    new(): SVGPathSegLinetoVerticalAbs;\r\n}\r\n\r\ninterface MSStorageExtensions {\r\n    remainingSpace: number;\r\n}\r\n\r\ninterface SVGStyleElement extends SVGElement, SVGLangSpace {\r\n    media: string;\r\n    type: string;\r\n    title: string;\r\n}\r\ndeclare var SVGStyleElement: {\r\n    prototype: SVGStyleElement;\r\n    new(): SVGStyleElement;\r\n}\r\n\r\ninterface MSCurrentStyleCSSProperties extends MSCSSProperties {\r\n    blockDirection: string;\r\n    clipBottom: string;\r\n    clipLeft: string;\r\n    clipRight: string;\r\n    clipTop: string;\r\n    hasLayout: string;\r\n}\r\ndeclare var MSCurrentStyleCSSProperties: {\r\n    prototype: MSCurrentStyleCSSProperties;\r\n    new(): MSCurrentStyleCSSProperties;\r\n}\r\n\r\ninterface MSHTMLCollectionExtensions {\r\n    urns(urn: any): any;\r\n    tags(tagName: any): any;\r\n}\r\n\r\ninterface Storage extends MSStorageExtensions {\r\n    length: number;\r\n    getItem(key: string): any;\r\n    [key: string]: any;\r\n    setItem(key: string, data: string): void;\r\n    clear(): void;\r\n    removeItem(key: string): void;\r\n    key(index: number): string;\r\n    [index: number]: string;\r\n}\r\ndeclare var Storage: {\r\n    prototype: Storage;\r\n    new(): Storage;\r\n}\r\n\r\ninterface HTMLIFrameElement extends HTMLElement, GetSVGDocument, MSDataBindingExtensions {\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: string;\r\n    /**\r\n      * Sets or retrieves whether the frame can be scrolled.\r\n      */\r\n    scrolling: string;\r\n    /**\r\n      * Sets or retrieves the top and bottom margin heights before displaying the text in a frame.\r\n      */\r\n    marginHeight: string;\r\n    /**\r\n      * Sets or retrieves the left and right margin widths before displaying the text in a frame.\r\n      */\r\n    marginWidth: string;\r\n    /**\r\n      * Sets or retrieves the amount of additional space between the frames.\r\n      */\r\n    frameSpacing: any;\r\n    /**\r\n      * Sets or retrieves whether to display a border for the frame.\r\n      */\r\n    frameBorder: string;\r\n    /**\r\n      * Sets or retrieves whether the user can resize the frame.\r\n      */\r\n    noResize: boolean;\r\n    /**\r\n      * Sets or retrieves the vertical margin for the object.\r\n      */\r\n    vspace: number;\r\n    /**\r\n      * Retrieves the object of the specified.\r\n      */\r\n    contentWindow: Window;\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves a URL to be loaded by the object.\r\n      */\r\n    src: string;\r\n    /**\r\n      * Sets or retrieves the frame name.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: string;\r\n    /**\r\n      * Specifies the properties of a border drawn around an object.\r\n      */\r\n    border: string;\r\n    /**\r\n      * Retrieves the document object of the page or frame.\r\n      */\r\n    contentDocument: Document;\r\n    /**\r\n      * Sets or retrieves the horizontal margin for the object.\r\n      */\r\n    hspace: number;\r\n    /**\r\n      * Sets or retrieves a URI to a long description of the object.\r\n      */\r\n    longDesc: string;\r\n    /**\r\n      * Sets the value indicating whether the source file of a frame or iframe has specific security restrictions applied.\r\n      */\r\n    security: any;\r\n    /**\r\n      * Raised when the object has been completely received from the server.\r\n      */\r\n    onload: (ev: Event) => any;\r\n    sandbox: DOMSettableTokenList;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerdown\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgotpointercapture\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturedoubletap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerhover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturehold\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointermove\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturechange\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturestart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointercancel\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgestureend\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturetap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerout\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msinertiastart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mslostpointercapture\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerup\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerenter\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerleave\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"move\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"help\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusin\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"datasetchanged\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowsdelete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"losecapture\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"controlselect\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"layoutcomplete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"filterchange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"datasetcomplete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"errorupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cellchange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowexit\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowsinserted\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"propertychange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforepaste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecopy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resizestart\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"paste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"moveend\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeeditfocus\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"afterupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resizeend\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusout\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dataavailable\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"readystatechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"movestart\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"copy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowenter\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mscontentzoom\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msmanipulationstatechanged\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var HTMLIFrameElement: {\r\n    prototype: HTMLIFrameElement;\r\n    new(): HTMLIFrameElement;\r\n}\r\n\r\ninterface TextRangeCollection {\r\n    length: number;\r\n    item(index: number): TextRange;\r\n    [index: number]: TextRange;\r\n}\r\ndeclare var TextRangeCollection: {\r\n    prototype: TextRangeCollection;\r\n    new(): TextRangeCollection;\r\n}\r\n\r\ninterface HTMLBodyElement extends HTMLElement, DOML2DeprecatedBackgroundStyle, DOML2DeprecatedBackgroundColorStyle {\r\n    scroll: string;\r\n    ononline: (ev: Event) => any;\r\n    onblur: (ev: FocusEvent) => any;\r\n    noWrap: boolean;\r\n    onfocus: (ev: FocusEvent) => any;\r\n    onmessage: (ev: MessageEvent) => any;\r\n    text: any;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    bgProperties: string;\r\n    onresize: (ev: UIEvent) => any;\r\n    link: any;\r\n    aLink: any;\r\n    bottomMargin: any;\r\n    topMargin: any;\r\n    onafterprint: (ev: Event) => any;\r\n    vLink: any;\r\n    onbeforeprint: (ev: Event) => any;\r\n    onoffline: (ev: Event) => any;\r\n    onunload: (ev: Event) => any;\r\n    onhashchange: (ev: Event) => any;\r\n    onload: (ev: Event) => any;\r\n    rightMargin: any;\r\n    onbeforeunload: (ev: BeforeUnloadEvent) => any;\r\n    leftMargin: any;\r\n    onstorage: (ev: StorageEvent) => any;\r\n    onpopstate: (ev: PopStateEvent) => any;\r\n    onpageshow: (ev: PageTransitionEvent) => any;\r\n    onpagehide: (ev: PageTransitionEvent) => any;\r\n    createTextRange(): TextRange;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerdown\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgotpointercapture\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturedoubletap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerhover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturehold\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointermove\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturechange\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturestart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointercancel\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgestureend\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturetap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerout\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msinertiastart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mslostpointercapture\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerup\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerenter\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerleave\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"move\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"help\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusin\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"datasetchanged\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowsdelete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"losecapture\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"controlselect\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"layoutcomplete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"filterchange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"datasetcomplete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"errorupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cellchange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowexit\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowsinserted\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"propertychange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforepaste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecopy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resizestart\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"paste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"moveend\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeeditfocus\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"afterupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resizeend\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusout\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dataavailable\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"readystatechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"movestart\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"copy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowenter\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mscontentzoom\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msmanipulationstatechanged\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"online\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"afterprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"offline\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"unload\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"hashchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeunload\", listener: (ev: BeforeUnloadEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"storage\", listener: (ev: StorageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"popstate\", listener: (ev: PopStateEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pageshow\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pagehide\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var HTMLBodyElement: {\r\n    prototype: HTMLBodyElement;\r\n    new(): HTMLBodyElement;\r\n}\r\n\r\ninterface DocumentType extends Node {\r\n    name: string;\r\n    notations: NamedNodeMap;\r\n    systemId: string;\r\n    internalSubset: string;\r\n    entities: NamedNodeMap;\r\n    publicId: string;\r\n}\r\ndeclare var DocumentType: {\r\n    prototype: DocumentType;\r\n    new(): DocumentType;\r\n}\r\n\r\ninterface SVGRadialGradientElement extends SVGGradientElement {\r\n    cx: SVGAnimatedLength;\r\n    r: SVGAnimatedLength;\r\n    cy: SVGAnimatedLength;\r\n    fx: SVGAnimatedLength;\r\n    fy: SVGAnimatedLength;\r\n}\r\ndeclare var SVGRadialGradientElement: {\r\n    prototype: SVGRadialGradientElement;\r\n    new(): SVGRadialGradientElement;\r\n}\r\n\r\ninterface MutationEvent extends Event {\r\n    newValue: string;\r\n    attrChange: number;\r\n    attrName: string;\r\n    prevValue: string;\r\n    relatedNode: Node;\r\n    initMutationEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, relatedNodeArg: Node, prevValueArg: string, newValueArg: string, attrNameArg: string, attrChangeArg: number): void;\r\n    MODIFICATION: number;\r\n    REMOVAL: number;\r\n    ADDITION: number;\r\n}\r\ndeclare var MutationEvent: {\r\n    prototype: MutationEvent;\r\n    new(): MutationEvent;\r\n    MODIFICATION: number;\r\n    REMOVAL: number;\r\n    ADDITION: number;\r\n}\r\n\r\ninterface DragEvent extends MouseEvent {\r\n    dataTransfer: DataTransfer;\r\n    initDragEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, dataTransferArg: DataTransfer): void;\r\n    msConvertURL(file: File, targetType: string, targetURL?: string): void;\r\n}\r\ndeclare var DragEvent: {\r\n    prototype: DragEvent;\r\n    new(): DragEvent;\r\n}\r\n\r\ninterface HTMLTableSectionElement extends HTMLElement, HTMLTableAlignment, DOML2DeprecatedBackgroundColorStyle {\r\n    /**\r\n      * Sets or retrieves a value that indicates the table alignment.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves the number of horizontal rows contained in the object.\r\n      */\r\n    rows: HTMLCollection;\r\n    /**\r\n      * Removes the specified row (tr) from the element and from the rows collection.\r\n      * @param index Number that specifies the zero-based position in the rows collection of the row to remove.\r\n      */\r\n    deleteRow(index?: number): void;\r\n    /**\r\n      * Moves a table row to a new position.\r\n      * @param indexFrom Number that specifies the index in the rows collection of the table row that is moved.\r\n      * @param indexTo Number that specifies where the row is moved within the rows collection.\r\n      */\r\n    moveRow(indexFrom?: number, indexTo?: number): any;\r\n    /**\r\n      * Creates a new row (tr) in the table, and adds the row to the rows collection.\r\n      * @param index Number that specifies where to insert the row in the rows collection. The default value is -1, which appends the new row to the end of the rows collection.\r\n      */\r\n    insertRow(index?: number): HTMLElement;\r\n}\r\ndeclare var HTMLTableSectionElement: {\r\n    prototype: HTMLTableSectionElement;\r\n    new(): HTMLTableSectionElement;\r\n}\r\n\r\ninterface DOML2DeprecatedListNumberingAndBulletStyle {\r\n    type: string;\r\n}\r\n\r\ninterface HTMLInputElement extends HTMLElement, MSDataBindingExtensions {\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: string;\r\n    status: boolean;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in. \r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Gets or sets the starting position or offset of a text selection.\r\n      */\r\n    selectionStart: number;\r\n    indeterminate: boolean;\r\n    readOnly: boolean;\r\n    size: number;\r\n    loop: number;\r\n    /**\r\n      * Gets or sets the end position or offset of a text selection.\r\n      */\r\n    selectionEnd: number;\r\n    /**\r\n      * Sets or retrieves the URL of the virtual reality modeling language (VRML) world to be displayed in the window.\r\n      */\r\n    vrml: string;\r\n    /**\r\n      * Sets or retrieves a lower resolution image to display.\r\n      */\r\n    lowsrc: string;\r\n    /**\r\n      * Sets or retrieves the vertical margin for the object.\r\n      */\r\n    vspace: number;\r\n    /**\r\n      * Sets or retrieves a comma-separated list of content types.\r\n      */\r\n    accept: string;\r\n    /**\r\n      * Sets or retrieves a text alternative to the graphic.\r\n      */\r\n    alt: string;\r\n    /**\r\n      * Sets or retrieves the state of the check box or radio button.\r\n      */\r\n    defaultChecked: boolean;\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Returns the value of the data at the cursor's current position.\r\n      */\r\n    value: string;\r\n    /**\r\n      * The address or URL of the a media resource that is to be considered.\r\n      */\r\n    src: string;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\r\n      */\r\n    useMap: string;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: string;\r\n    /**\r\n      * Sets or retrieves the width of the border to draw around the object.\r\n      */\r\n    border: string;\r\n    dynsrc: string;\r\n    /**\r\n      * Sets or retrieves the state of the check box or radio button.\r\n      */\r\n    checked: boolean;\r\n    /**\r\n      * Sets or retrieves the width of the border to draw around the object.\r\n      */\r\n    hspace: number;\r\n    /**\r\n      * Sets or retrieves the maximum number of characters that the user can enter in a text control.\r\n      */\r\n    maxLength: number;\r\n    /**\r\n      * Returns the content type of the object.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Sets or retrieves the initial contents of the object.\r\n      */\r\n    defaultValue: string;\r\n    /**\r\n      * Retrieves whether the object is fully loaded.\r\n      */\r\n    complete: boolean;\r\n    start: string;\r\n    /**\r\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\r\n      */\r\n    validationMessage: string;\r\n    /**\r\n      * Returns a FileList object on a file type input object.\r\n      */\r\n    files: FileList;\r\n    /**\r\n      * Defines the maximum acceptable value for an input element with type=\"number\".When used with the min and step attributes, lets you control the range and increment (such as only even numbers) that the user can enter into an input field.\r\n      */\r\n    max: string;\r\n    /**\r\n      * Overrides the target attribute on a form element.\r\n      */\r\n    formTarget: string;\r\n    /**\r\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\r\n      */\r\n    willValidate: boolean;\r\n    /**\r\n      * Defines an increment or jump between values that you want to allow the user to enter. When used with the max and min attributes, lets you control the range and increment (for example, allow only even numbers) that the user can enter into an input field.\r\n      */\r\n    step: string;\r\n    /**\r\n      * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\r\n      */\r\n    autofocus: boolean;\r\n    /**\r\n      * When present, marks an element that can't be submitted without a value.\r\n      */\r\n    required: boolean;\r\n    /**\r\n      * Used to override the encoding (formEnctype attribute) specified on the form element.\r\n      */\r\n    formEnctype: string;\r\n    /**\r\n      * Returns the input field value as a number.\r\n      */\r\n    valueAsNumber: number;\r\n    /**\r\n      * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.\r\n      */\r\n    placeholder: string;\r\n    /**\r\n      * Overrides the submit method attribute previously specified on a form element.\r\n      */\r\n    formMethod: string;\r\n    /**\r\n      * Specifies the ID of a pre-defined datalist of options for an input element.\r\n      */\r\n    list: HTMLElement;\r\n    /**\r\n      * Specifies whether autocomplete is applied to an editable text field.\r\n      */\r\n    autocomplete: string;\r\n    /**\r\n      * Defines the minimum acceptable value for an input element with type=\"number\". When used with the max and step attributes, lets you control the range and increment (such as even numbers only) that the user can enter into an input field.\r\n      */\r\n    min: string;\r\n    /**\r\n      * Overrides the action attribute (where the data on a form is sent) on the parent form element.\r\n      */\r\n    formAction: string;\r\n    /**\r\n      * Gets or sets a string containing a regular expression that the user's input must match.\r\n      */\r\n    pattern: string;\r\n    /**\r\n      * Returns a  ValidityState object that represents the validity states of an element.\r\n      */\r\n    validity: ValidityState;\r\n    /**\r\n      * Overrides any validation or required attributes on a form or form elements to allow it to be submitted without validation. This can be used to create a \"save draft\"-type submit option.\r\n      */\r\n    formNoValidate: string;\r\n    /**\r\n      * Sets or retrieves the Boolean value indicating whether multiple items can be selected from a list.\r\n      */\r\n    multiple: boolean;\r\n    /**\r\n      * Creates a TextRange object for the element.\r\n      */\r\n    createTextRange(): TextRange;\r\n    /**\r\n      * Sets the start and end positions of a selection in a text field.\r\n      * @param start The offset into the text field for the start of the selection.\r\n      * @param end The offset into the text field for the end of the selection.\r\n      */\r\n    setSelectionRange(start: number, end: number): void;\r\n    /**\r\n      * Makes the selection equal to the current object.\r\n      */\r\n    select(): void;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Decrements a range input control's value by the value given by the Step attribute. If the optional parameter is used, it will decrement the input control's step value multiplied by the parameter's value.\r\n      * @param n Value to decrement the value by.\r\n      */\r\n    stepDown(n?: number): void;\r\n    /**\r\n      * Increments a range input control's value by the value given by the Step attribute. If the optional parameter is used, will increment the input control's value by that value.\r\n      * @param n Value to increment the value by.\r\n      */\r\n    stepUp(n?: number): void;\r\n    /**\r\n      * Sets a custom error message that is displayed when a form is submitted.\r\n      * @param error Sets a custom error message that is displayed when a form is submitted.\r\n      */\r\n    setCustomValidity(error: string): void;\r\n}\r\ndeclare var HTMLInputElement: {\r\n    prototype: HTMLInputElement;\r\n    new(): HTMLInputElement;\r\n}\r\n\r\ninterface HTMLAnchorElement extends HTMLElement, MSDataBindingExtensions {\r\n    /**\r\n      * Sets or retrieves the relationship between the object and the destination of the link.\r\n      */\r\n    rel: string;\r\n    /**\r\n      * Contains the protocol of the URL.\r\n      */\r\n    protocol: string;\r\n    /**\r\n      * Sets or retrieves the substring of the href property that follows the question mark.\r\n      */\r\n    search: string;\r\n    /**\r\n      * Sets or retrieves the coordinates of the object.\r\n      */\r\n    coords: string;\r\n    /**\r\n      * Contains the hostname of a URL.\r\n      */\r\n    hostname: string;\r\n    /**\r\n      * Contains the pathname of the URL.\r\n      */\r\n    pathname: string;\r\n    Methods: string;\r\n    /**\r\n      * Sets or retrieves the window or frame at which to target content.\r\n      */\r\n    target: string;\r\n    protocolLong: string;\r\n    /**\r\n      * Sets or retrieves a destination URL or an anchor point.\r\n      */\r\n    href: string;\r\n    /**\r\n      * Sets or retrieves the shape of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves the character set used to encode the object.\r\n      */\r\n    charset: string;\r\n    /**\r\n      * Sets or retrieves the language code of the object.\r\n      */\r\n    hreflang: string;\r\n    /**\r\n      * Sets or retrieves the port number associated with a URL.\r\n      */\r\n    port: string;\r\n    /**\r\n      * Contains the hostname and port values of the URL.\r\n      */\r\n    host: string;\r\n    /**\r\n      * Contains the anchor portion of the URL including the hash sign (#).\r\n      */\r\n    hash: string;\r\n    nameProp: string;\r\n    urn: string;\r\n    /**\r\n      * Sets or retrieves the relationship between the object and the destination of the link.\r\n      */\r\n    rev: string;\r\n    /**\r\n      * Sets or retrieves the shape of the object.\r\n      */\r\n    shape: string;\r\n    type: string;\r\n    mimeType: string;\r\n    /**\r\n      * Retrieves or sets the text of the object as a string. \r\n      */\r\n    text: string;\r\n    /** \r\n      * Returns a string representation of an object.\r\n      */\r\n    toString(): string;\r\n}\r\ndeclare var HTMLAnchorElement: {\r\n    prototype: HTMLAnchorElement;\r\n    new(): HTMLAnchorElement;\r\n}\r\n\r\ninterface HTMLParamElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the value of an input parameter for an element.\r\n      */\r\n    value: string;\r\n    /**\r\n      * Sets or retrieves the name of an input parameter for an element.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves the content type of the resource designated by the value attribute.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Sets or retrieves the data type of the value attribute.\r\n      */\r\n    valueType: string;\r\n}\r\ndeclare var HTMLParamElement: {\r\n    prototype: HTMLParamElement;\r\n    new(): HTMLParamElement;\r\n}\r\n\r\ninterface SVGImageElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired, SVGURIReference {\r\n    y: SVGAnimatedLength;\r\n    width: SVGAnimatedLength;\r\n    preserveAspectRatio: SVGAnimatedPreserveAspectRatio;\r\n    x: SVGAnimatedLength;\r\n    height: SVGAnimatedLength;\r\n}\r\ndeclare var SVGImageElement: {\r\n    prototype: SVGImageElement;\r\n    new(): SVGImageElement;\r\n}\r\n\r\ninterface SVGAnimatedNumber {\r\n    animVal: number;\r\n    baseVal: number;\r\n}\r\ndeclare var SVGAnimatedNumber: {\r\n    prototype: SVGAnimatedNumber;\r\n    new(): SVGAnimatedNumber;\r\n}\r\n\r\ninterface PerformanceTiming {\r\n    redirectStart: number;\r\n    domainLookupEnd: number;\r\n    responseStart: number;\r\n    domComplete: number;\r\n    domainLookupStart: number;\r\n    loadEventStart: number;\r\n    msFirstPaint: number;\r\n    unloadEventEnd: number;\r\n    fetchStart: number;\r\n    requestStart: number;\r\n    domInteractive: number;\r\n    navigationStart: number;\r\n    connectEnd: number;\r\n    loadEventEnd: number;\r\n    connectStart: number;\r\n    responseEnd: number;\r\n    domLoading: number;\r\n    redirectEnd: number;\r\n    unloadEventStart: number;\r\n    domContentLoadedEventStart: number;\r\n    domContentLoadedEventEnd: number;\r\n    toJSON(): any;\r\n}\r\ndeclare var PerformanceTiming: {\r\n    prototype: PerformanceTiming;\r\n    new(): PerformanceTiming;\r\n}\r\n\r\ninterface HTMLPreElement extends HTMLElement, DOML2DeprecatedTextFlowControl {\r\n    /**\r\n      * Sets or gets a value that you can use to implement your own width functionality for the object.\r\n      */\r\n    width: number;\r\n    /**\r\n      * Indicates a citation by rendering text in italic type.\r\n      */\r\n    cite: string;\r\n}\r\ndeclare var HTMLPreElement: {\r\n    prototype: HTMLPreElement;\r\n    new(): HTMLPreElement;\r\n}\r\n\r\ninterface EventException {\r\n    code: number;\r\n    message: string;\r\n    name: string;\r\n    toString(): string;\r\n    DISPATCH_REQUEST_ERR: number;\r\n    UNSPECIFIED_EVENT_TYPE_ERR: number;\r\n}\r\ndeclare var EventException: {\r\n    prototype: EventException;\r\n    new(): EventException;\r\n    DISPATCH_REQUEST_ERR: number;\r\n    UNSPECIFIED_EVENT_TYPE_ERR: number;\r\n}\r\n\r\ninterface MSNavigatorDoNotTrack {\r\n    msDoNotTrack: string;\r\n    removeSiteSpecificTrackingException(args: ExceptionInformation): void;\r\n    removeWebWideTrackingException(args: ExceptionInformation): void;\r\n    storeWebWideTrackingException(args: StoreExceptionsInformation): void;\r\n    storeSiteSpecificTrackingException(args: StoreSiteSpecificExceptionsInformation): void;\r\n    confirmSiteSpecificTrackingException(args: ConfirmSiteSpecificExceptionsInformation): boolean;\r\n    confirmWebWideTrackingException(args: ExceptionInformation): boolean;\r\n}\r\n\r\ninterface NavigatorOnLine {\r\n    onLine: boolean;\r\n}\r\n\r\ninterface WindowLocalStorage {\r\n    localStorage: Storage;\r\n}\r\n\r\ninterface SVGMetadataElement extends SVGElement {\r\n}\r\ndeclare var SVGMetadataElement: {\r\n    prototype: SVGMetadataElement;\r\n    new(): SVGMetadataElement;\r\n}\r\n\r\ninterface SVGPathSegArcRel extends SVGPathSeg {\r\n    y: number;\r\n    sweepFlag: boolean;\r\n    r2: number;\r\n    x: number;\r\n    angle: number;\r\n    r1: number;\r\n    largeArcFlag: boolean;\r\n}\r\ndeclare var SVGPathSegArcRel: {\r\n    prototype: SVGPathSegArcRel;\r\n    new(): SVGPathSegArcRel;\r\n}\r\n\r\ninterface SVGPathSegMovetoAbs extends SVGPathSeg {\r\n    y: number;\r\n    x: number;\r\n}\r\ndeclare var SVGPathSegMovetoAbs: {\r\n    prototype: SVGPathSegMovetoAbs;\r\n    new(): SVGPathSegMovetoAbs;\r\n}\r\n\r\ninterface SVGStringList {\r\n    numberOfItems: number;\r\n    replaceItem(newItem: string, index: number): string;\r\n    getItem(index: number): string;\r\n    clear(): void;\r\n    appendItem(newItem: string): string;\r\n    initialize(newItem: string): string;\r\n    removeItem(index: number): string;\r\n    insertItemBefore(newItem: string, index: number): string;\r\n}\r\ndeclare var SVGStringList: {\r\n    prototype: SVGStringList;\r\n    new(): SVGStringList;\r\n}\r\n\r\ninterface XDomainRequest {\r\n    timeout: number;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    onload: (ev: Event) => any;\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    ontimeout: (ev: Event) => any;\r\n    responseText: string;\r\n    contentType: string;\r\n    open(method: string, url: string): void;\r\n    abort(): void;\r\n    send(data?: any): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeout\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var XDomainRequest: {\r\n    prototype: XDomainRequest;\r\n    new(): XDomainRequest;\r\n    create(): XDomainRequest;\r\n}\r\n\r\ninterface DOML2DeprecatedBackgroundColorStyle {\r\n    bgColor: any;\r\n}\r\n\r\ninterface ElementTraversal {\r\n    childElementCount: number;\r\n    previousElementSibling: Element;\r\n    lastElementChild: Element;\r\n    nextElementSibling: Element;\r\n    firstElementChild: Element;\r\n}\r\n\r\ninterface SVGLength {\r\n    valueAsString: string;\r\n    valueInSpecifiedUnits: number;\r\n    value: number;\r\n    unitType: number;\r\n    newValueSpecifiedUnits(unitType: number, valueInSpecifiedUnits: number): void;\r\n    convertToSpecifiedUnits(unitType: number): void;\r\n    SVG_LENGTHTYPE_NUMBER: number;\r\n    SVG_LENGTHTYPE_CM: number;\r\n    SVG_LENGTHTYPE_PC: number;\r\n    SVG_LENGTHTYPE_PERCENTAGE: number;\r\n    SVG_LENGTHTYPE_MM: number;\r\n    SVG_LENGTHTYPE_PT: number;\r\n    SVG_LENGTHTYPE_IN: number;\r\n    SVG_LENGTHTYPE_EMS: number;\r\n    SVG_LENGTHTYPE_PX: number;\r\n    SVG_LENGTHTYPE_UNKNOWN: number;\r\n    SVG_LENGTHTYPE_EXS: number;\r\n}\r\ndeclare var SVGLength: {\r\n    prototype: SVGLength;\r\n    new(): SVGLength;\r\n    SVG_LENGTHTYPE_NUMBER: number;\r\n    SVG_LENGTHTYPE_CM: number;\r\n    SVG_LENGTHTYPE_PC: number;\r\n    SVG_LENGTHTYPE_PERCENTAGE: number;\r\n    SVG_LENGTHTYPE_MM: number;\r\n    SVG_LENGTHTYPE_PT: number;\r\n    SVG_LENGTHTYPE_IN: number;\r\n    SVG_LENGTHTYPE_EMS: number;\r\n    SVG_LENGTHTYPE_PX: number;\r\n    SVG_LENGTHTYPE_UNKNOWN: number;\r\n    SVG_LENGTHTYPE_EXS: number;\r\n}\r\n\r\ninterface SVGPolygonElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGAnimatedPoints, SVGTests, SVGExternalResourcesRequired {\r\n}\r\ndeclare var SVGPolygonElement: {\r\n    prototype: SVGPolygonElement;\r\n    new(): SVGPolygonElement;\r\n}\r\n\r\ninterface HTMLPhraseElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the date and time of a modification to the object.\r\n      */\r\n    dateTime: string;\r\n    /**\r\n      * Sets or retrieves reference information about the object.\r\n      */\r\n    cite: string;\r\n}\r\ndeclare var HTMLPhraseElement: {\r\n    prototype: HTMLPhraseElement;\r\n    new(): HTMLPhraseElement;\r\n}\r\n\r\ninterface NavigatorStorageUtils {\r\n}\r\n\r\ninterface SVGPathSegCurvetoCubicRel extends SVGPathSeg {\r\n    y: number;\r\n    y1: number;\r\n    x2: number;\r\n    x: number;\r\n    x1: number;\r\n    y2: number;\r\n}\r\ndeclare var SVGPathSegCurvetoCubicRel: {\r\n    prototype: SVGPathSegCurvetoCubicRel;\r\n    new(): SVGPathSegCurvetoCubicRel;\r\n}\r\n\r\ninterface SVGTextContentElement extends SVGElement, SVGStylable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired {\r\n    textLength: SVGAnimatedLength;\r\n    lengthAdjust: SVGAnimatedEnumeration;\r\n    getCharNumAtPosition(point: SVGPoint): number;\r\n    getStartPositionOfChar(charnum: number): SVGPoint;\r\n    getExtentOfChar(charnum: number): SVGRect;\r\n    getComputedTextLength(): number;\r\n    getSubStringLength(charnum: number, nchars: number): number;\r\n    selectSubString(charnum: number, nchars: number): void;\r\n    getNumberOfChars(): number;\r\n    getRotationOfChar(charnum: number): number;\r\n    getEndPositionOfChar(charnum: number): SVGPoint;\r\n    LENGTHADJUST_SPACING: number;\r\n    LENGTHADJUST_SPACINGANDGLYPHS: number;\r\n    LENGTHADJUST_UNKNOWN: number;\r\n}\r\ndeclare var SVGTextContentElement: {\r\n    prototype: SVGTextContentElement;\r\n    new(): SVGTextContentElement;\r\n    LENGTHADJUST_SPACING: number;\r\n    LENGTHADJUST_SPACINGANDGLYPHS: number;\r\n    LENGTHADJUST_UNKNOWN: number;\r\n}\r\n\r\ninterface DOML2DeprecatedColorProperty {\r\n    color: string;\r\n}\r\n\r\ninterface Location {\r\n    hash: string;\r\n    protocol: string;\r\n    search: string;\r\n    href: string;\r\n    hostname: string;\r\n    port: string;\r\n    pathname: string;\r\n    host: string;\r\n    reload(flag?: boolean): void;\r\n    replace(url: string): void;\r\n    assign(url: string): void;\r\n    toString(): string;\r\n}\r\ndeclare var Location: {\r\n    prototype: Location;\r\n    new(): Location;\r\n}\r\n\r\ninterface HTMLTitleElement extends HTMLElement {\r\n    /**\r\n      * Retrieves or sets the text of the object as a string. \r\n      */\r\n    text: string;\r\n}\r\ndeclare var HTMLTitleElement: {\r\n    prototype: HTMLTitleElement;\r\n    new(): HTMLTitleElement;\r\n}\r\n\r\ninterface HTMLStyleElement extends HTMLElement, LinkStyle {\r\n    /**\r\n      * Sets or retrieves the media type.\r\n      */\r\n    media: string;\r\n    /**\r\n      * Retrieves the CSS language in which the style sheet is written.\r\n      */\r\n    type: string;\r\n}\r\ndeclare var HTMLStyleElement: {\r\n    prototype: HTMLStyleElement;\r\n    new(): HTMLStyleElement;\r\n}\r\n\r\ninterface PerformanceEntry {\r\n    name: string;\r\n    startTime: number;\r\n    duration: number;\r\n    entryType: string;\r\n}\r\ndeclare var PerformanceEntry: {\r\n    prototype: PerformanceEntry;\r\n    new(): PerformanceEntry;\r\n}\r\n\r\ninterface SVGTransform {\r\n    type: number;\r\n    angle: number;\r\n    matrix: SVGMatrix;\r\n    setTranslate(tx: number, ty: number): void;\r\n    setScale(sx: number, sy: number): void;\r\n    setMatrix(matrix: SVGMatrix): void;\r\n    setSkewY(angle: number): void;\r\n    setRotate(angle: number, cx: number, cy: number): void;\r\n    setSkewX(angle: number): void;\r\n    SVG_TRANSFORM_SKEWX: number;\r\n    SVG_TRANSFORM_UNKNOWN: number;\r\n    SVG_TRANSFORM_SCALE: number;\r\n    SVG_TRANSFORM_TRANSLATE: number;\r\n    SVG_TRANSFORM_MATRIX: number;\r\n    SVG_TRANSFORM_ROTATE: number;\r\n    SVG_TRANSFORM_SKEWY: number;\r\n}\r\ndeclare var SVGTransform: {\r\n    prototype: SVGTransform;\r\n    new(): SVGTransform;\r\n    SVG_TRANSFORM_SKEWX: number;\r\n    SVG_TRANSFORM_UNKNOWN: number;\r\n    SVG_TRANSFORM_SCALE: number;\r\n    SVG_TRANSFORM_TRANSLATE: number;\r\n    SVG_TRANSFORM_MATRIX: number;\r\n    SVG_TRANSFORM_ROTATE: number;\r\n    SVG_TRANSFORM_SKEWY: number;\r\n}\r\n\r\ninterface UIEvent extends Event {\r\n    detail: number;\r\n    view: Window;\r\n    initUIEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number): void;\r\n}\r\ndeclare var UIEvent: {\r\n    prototype: UIEvent;\r\n    new(): UIEvent;\r\n}\r\n\r\ninterface SVGURIReference {\r\n    href: SVGAnimatedString;\r\n}\r\n\r\ninterface SVGPathSeg {\r\n    pathSegType: number;\r\n    pathSegTypeAsLetter: string;\r\n    PATHSEG_MOVETO_REL: number;\r\n    PATHSEG_LINETO_VERTICAL_REL: number;\r\n    PATHSEG_CURVETO_CUBIC_SMOOTH_ABS: number;\r\n    PATHSEG_CURVETO_QUADRATIC_REL: number;\r\n    PATHSEG_CURVETO_CUBIC_ABS: number;\r\n    PATHSEG_LINETO_HORIZONTAL_ABS: number;\r\n    PATHSEG_CURVETO_QUADRATIC_ABS: number;\r\n    PATHSEG_LINETO_ABS: number;\r\n    PATHSEG_CLOSEPATH: number;\r\n    PATHSEG_LINETO_HORIZONTAL_REL: number;\r\n    PATHSEG_CURVETO_CUBIC_SMOOTH_REL: number;\r\n    PATHSEG_LINETO_REL: number;\r\n    PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: number;\r\n    PATHSEG_ARC_REL: number;\r\n    PATHSEG_CURVETO_CUBIC_REL: number;\r\n    PATHSEG_UNKNOWN: number;\r\n    PATHSEG_LINETO_VERTICAL_ABS: number;\r\n    PATHSEG_ARC_ABS: number;\r\n    PATHSEG_MOVETO_ABS: number;\r\n    PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: number;\r\n}\r\ndeclare var SVGPathSeg: {\r\n    prototype: SVGPathSeg;\r\n    new(): SVGPathSeg;\r\n    PATHSEG_MOVETO_REL: number;\r\n    PATHSEG_LINETO_VERTICAL_REL: number;\r\n    PATHSEG_CURVETO_CUBIC_SMOOTH_ABS: number;\r\n    PATHSEG_CURVETO_QUADRATIC_REL: number;\r\n    PATHSEG_CURVETO_CUBIC_ABS: number;\r\n    PATHSEG_LINETO_HORIZONTAL_ABS: number;\r\n    PATHSEG_CURVETO_QUADRATIC_ABS: number;\r\n    PATHSEG_LINETO_ABS: number;\r\n    PATHSEG_CLOSEPATH: number;\r\n    PATHSEG_LINETO_HORIZONTAL_REL: number;\r\n    PATHSEG_CURVETO_CUBIC_SMOOTH_REL: number;\r\n    PATHSEG_LINETO_REL: number;\r\n    PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS: number;\r\n    PATHSEG_ARC_REL: number;\r\n    PATHSEG_CURVETO_CUBIC_REL: number;\r\n    PATHSEG_UNKNOWN: number;\r\n    PATHSEG_LINETO_VERTICAL_ABS: number;\r\n    PATHSEG_ARC_ABS: number;\r\n    PATHSEG_MOVETO_ABS: number;\r\n    PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL: number;\r\n}\r\n\r\ninterface WheelEvent extends MouseEvent {\r\n    deltaZ: number;\r\n    deltaX: number;\r\n    deltaMode: number;\r\n    deltaY: number;\r\n    initWheelEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, buttonArg: number, relatedTargetArg: EventTarget, modifiersListArg: string, deltaXArg: number, deltaYArg: number, deltaZArg: number, deltaMode: number): void;\r\n    getCurrentPoint(element: Element): void;\r\n    DOM_DELTA_PIXEL: number;\r\n    DOM_DELTA_LINE: number;\r\n    DOM_DELTA_PAGE: number;\r\n}\r\ndeclare var WheelEvent: {\r\n    prototype: WheelEvent;\r\n    new(): WheelEvent;\r\n    DOM_DELTA_PIXEL: number;\r\n    DOM_DELTA_LINE: number;\r\n    DOM_DELTA_PAGE: number;\r\n}\r\n\r\ninterface MSEventAttachmentTarget {\r\n    attachEvent(event: string, listener: EventListener): boolean;\r\n    detachEvent(event: string, listener: EventListener): void;\r\n}\r\n\r\ninterface SVGNumber {\r\n    value: number;\r\n}\r\ndeclare var SVGNumber: {\r\n    prototype: SVGNumber;\r\n    new(): SVGNumber;\r\n}\r\n\r\ninterface SVGPathElement extends SVGElement, SVGStylable, SVGAnimatedPathData, SVGTransformable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired {\r\n    getPathSegAtLength(distance: number): number;\r\n    getPointAtLength(distance: number): SVGPoint;\r\n    createSVGPathSegCurvetoQuadraticAbs(x: number, y: number, x1: number, y1: number): SVGPathSegCurvetoQuadraticAbs;\r\n    createSVGPathSegLinetoRel(x: number, y: number): SVGPathSegLinetoRel;\r\n    createSVGPathSegCurvetoQuadraticRel(x: number, y: number, x1: number, y1: number): SVGPathSegCurvetoQuadraticRel;\r\n    createSVGPathSegCurvetoCubicAbs(x: number, y: number, x1: number, y1: number, x2: number, y2: number): SVGPathSegCurvetoCubicAbs;\r\n    createSVGPathSegLinetoAbs(x: number, y: number): SVGPathSegLinetoAbs;\r\n    createSVGPathSegClosePath(): SVGPathSegClosePath;\r\n    createSVGPathSegCurvetoCubicRel(x: number, y: number, x1: number, y1: number, x2: number, y2: number): SVGPathSegCurvetoCubicRel;\r\n    createSVGPathSegCurvetoQuadraticSmoothRel(x: number, y: number): SVGPathSegCurvetoQuadraticSmoothRel;\r\n    createSVGPathSegMovetoRel(x: number, y: number): SVGPathSegMovetoRel;\r\n    createSVGPathSegCurvetoCubicSmoothAbs(x: number, y: number, x2: number, y2: number): SVGPathSegCurvetoCubicSmoothAbs;\r\n    createSVGPathSegMovetoAbs(x: number, y: number): SVGPathSegMovetoAbs;\r\n    createSVGPathSegLinetoVerticalRel(y: number): SVGPathSegLinetoVerticalRel;\r\n    createSVGPathSegArcRel(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: boolean, sweepFlag: boolean): SVGPathSegArcRel;\r\n    createSVGPathSegCurvetoQuadraticSmoothAbs(x: number, y: number): SVGPathSegCurvetoQuadraticSmoothAbs;\r\n    createSVGPathSegLinetoHorizontalRel(x: number): SVGPathSegLinetoHorizontalRel;\r\n    getTotalLength(): number;\r\n    createSVGPathSegCurvetoCubicSmoothRel(x: number, y: number, x2: number, y2: number): SVGPathSegCurvetoCubicSmoothRel;\r\n    createSVGPathSegLinetoHorizontalAbs(x: number): SVGPathSegLinetoHorizontalAbs;\r\n    createSVGPathSegLinetoVerticalAbs(y: number): SVGPathSegLinetoVerticalAbs;\r\n    createSVGPathSegArcAbs(x: number, y: number, r1: number, r2: number, angle: number, largeArcFlag: boolean, sweepFlag: boolean): SVGPathSegArcAbs;\r\n}\r\ndeclare var SVGPathElement: {\r\n    prototype: SVGPathElement;\r\n    new(): SVGPathElement;\r\n}\r\n\r\ninterface MSCompatibleInfo {\r\n    version: string;\r\n    userAgent: string;\r\n}\r\ndeclare var MSCompatibleInfo: {\r\n    prototype: MSCompatibleInfo;\r\n    new(): MSCompatibleInfo;\r\n}\r\n\r\ninterface Text extends CharacterData, MSNodeExtensions {\r\n    wholeText: string;\r\n    splitText(offset: number): Text;\r\n    replaceWholeText(content: string): Text;\r\n}\r\ndeclare var Text: {\r\n    prototype: Text;\r\n    new(): Text;\r\n}\r\n\r\ninterface SVGAnimatedRect {\r\n    animVal: SVGRect;\r\n    baseVal: SVGRect;\r\n}\r\ndeclare var SVGAnimatedRect: {\r\n    prototype: SVGAnimatedRect;\r\n    new(): SVGAnimatedRect;\r\n}\r\n\r\ninterface CSSNamespaceRule extends CSSRule {\r\n    namespaceURI: string;\r\n    prefix: string;\r\n}\r\ndeclare var CSSNamespaceRule: {\r\n    prototype: CSSNamespaceRule;\r\n    new(): CSSNamespaceRule;\r\n}\r\n\r\ninterface SVGPathSegList {\r\n    numberOfItems: number;\r\n    replaceItem(newItem: SVGPathSeg, index: number): SVGPathSeg;\r\n    getItem(index: number): SVGPathSeg;\r\n    clear(): void;\r\n    appendItem(newItem: SVGPathSeg): SVGPathSeg;\r\n    initialize(newItem: SVGPathSeg): SVGPathSeg;\r\n    removeItem(index: number): SVGPathSeg;\r\n    insertItemBefore(newItem: SVGPathSeg, index: number): SVGPathSeg;\r\n}\r\ndeclare var SVGPathSegList: {\r\n    prototype: SVGPathSegList;\r\n    new(): SVGPathSegList;\r\n}\r\n\r\ninterface HTMLUnknownElement extends HTMLElement, MSDataBindingRecordSetReadonlyExtensions {\r\n}\r\ndeclare var HTMLUnknownElement: {\r\n    prototype: HTMLUnknownElement;\r\n    new(): HTMLUnknownElement;\r\n}\r\n\r\ninterface HTMLAudioElement extends HTMLMediaElement {\r\n}\r\ndeclare var HTMLAudioElement: {\r\n    prototype: HTMLAudioElement;\r\n    new(): HTMLAudioElement;\r\n}\r\n\r\ninterface MSImageResourceExtensions {\r\n    dynsrc: string;\r\n    vrml: string;\r\n    lowsrc: string;\r\n    start: string;\r\n    loop: number;\r\n}\r\n\r\ninterface PositionError {\r\n    code: number;\r\n    message: string;\r\n    toString(): string;\r\n    POSITION_UNAVAILABLE: number;\r\n    PERMISSION_DENIED: number;\r\n    TIMEOUT: number;\r\n}\r\ndeclare var PositionError: {\r\n    prototype: PositionError;\r\n    new(): PositionError;\r\n    POSITION_UNAVAILABLE: number;\r\n    PERMISSION_DENIED: number;\r\n    TIMEOUT: number;\r\n}\r\n\r\ninterface HTMLTableCellElement extends HTMLElement, HTMLTableAlignment, DOML2DeprecatedBackgroundStyle, DOML2DeprecatedBackgroundColorStyle {\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: number;\r\n    /**\r\n      * Sets or retrieves a list of header cells that provide information for the object.\r\n      */\r\n    headers: string;\r\n    /**\r\n      * Retrieves the position of the object in the cells collection of a row.\r\n      */\r\n    cellIndex: number;\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves the color for one of the two colors used to draw the 3-D border of the object.\r\n      */\r\n    borderColorLight: any;\r\n    /**\r\n      * Sets or retrieves the number columns in the table that the object should span.\r\n      */\r\n    colSpan: number;\r\n    /**\r\n      * Sets or retrieves the border color of the object. \r\n      */\r\n    borderColor: any;\r\n    /**\r\n      * Sets or retrieves a comma-delimited list of conceptual categories associated with the object.\r\n      */\r\n    axis: string;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: any;\r\n    /**\r\n      * Sets or retrieves whether the browser automatically performs wordwrap.\r\n      */\r\n    noWrap: boolean;\r\n    /**\r\n      * Sets or retrieves abbreviated text for the object.\r\n      */\r\n    abbr: string;\r\n    /**\r\n      * Sets or retrieves how many rows in a table the cell should span.\r\n      */\r\n    rowSpan: number;\r\n    /**\r\n      * Sets or retrieves the group of cells in a table to which the object's information applies.\r\n      */\r\n    scope: string;\r\n    /**\r\n      * Sets or retrieves the color for one of the two colors used to draw the 3-D border of the object.\r\n      */\r\n    borderColorDark: any;\r\n}\r\ndeclare var HTMLTableCellElement: {\r\n    prototype: HTMLTableCellElement;\r\n    new(): HTMLTableCellElement;\r\n}\r\n\r\ninterface SVGElementInstance extends EventTarget {\r\n    previousSibling: SVGElementInstance;\r\n    parentNode: SVGElementInstance;\r\n    lastChild: SVGElementInstance;\r\n    nextSibling: SVGElementInstance;\r\n    childNodes: SVGElementInstanceList;\r\n    correspondingUseElement: SVGUseElement;\r\n    correspondingElement: SVGElement;\r\n    firstChild: SVGElementInstance;\r\n}\r\ndeclare var SVGElementInstance: {\r\n    prototype: SVGElementInstance;\r\n    new(): SVGElementInstance;\r\n}\r\n\r\ninterface MSNamespaceInfoCollection {\r\n    length: number;\r\n    add(namespace?: string, urn?: string, implementationUrl?: any): any;\r\n    item(index: any): any;\r\n    // [index: any]: any;\r\n}\r\ndeclare var MSNamespaceInfoCollection: {\r\n    prototype: MSNamespaceInfoCollection;\r\n    new(): MSNamespaceInfoCollection;\r\n}\r\n\r\ninterface SVGCircleElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired {\r\n    cx: SVGAnimatedLength;\r\n    r: SVGAnimatedLength;\r\n    cy: SVGAnimatedLength;\r\n}\r\ndeclare var SVGCircleElement: {\r\n    prototype: SVGCircleElement;\r\n    new(): SVGCircleElement;\r\n}\r\n\r\ninterface StyleSheetList {\r\n    length: number;\r\n    item(index?: number): StyleSheet;\r\n    [index: number]: StyleSheet;\r\n}\r\ndeclare var StyleSheetList: {\r\n    prototype: StyleSheetList;\r\n    new(): StyleSheetList;\r\n}\r\n\r\ninterface CSSImportRule extends CSSRule {\r\n    styleSheet: CSSStyleSheet;\r\n    href: string;\r\n    media: MediaList;\r\n}\r\ndeclare var CSSImportRule: {\r\n    prototype: CSSImportRule;\r\n    new(): CSSImportRule;\r\n}\r\n\r\ninterface CustomEvent extends Event {\r\n    detail: any;\r\n    initCustomEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, detailArg: any): void;\r\n}\r\ndeclare var CustomEvent: {\r\n    prototype: CustomEvent;\r\n    new(): CustomEvent;\r\n}\r\n\r\ninterface HTMLBaseFontElement extends HTMLElement, DOML2DeprecatedColorProperty {\r\n    /**\r\n      * Sets or retrieves the current typeface family.\r\n      */\r\n    face: string;\r\n    /**\r\n      * Sets or retrieves the font size of the object.\r\n      */\r\n    size: number;\r\n}\r\ndeclare var HTMLBaseFontElement: {\r\n    prototype: HTMLBaseFontElement;\r\n    new(): HTMLBaseFontElement;\r\n}\r\n\r\ninterface HTMLTextAreaElement extends HTMLElement, MSDataBindingExtensions {\r\n    /**\r\n      * Retrieves or sets the text in the entry field of the textArea element.\r\n      */\r\n    value: string;\r\n    /**\r\n      * Sets or retrieves the value indicating whether the control is selected.\r\n      */\r\n    status: any;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Gets or sets the starting position or offset of a text selection.\r\n      */\r\n    selectionStart: number;\r\n    /**\r\n      * Sets or retrieves the number of horizontal rows contained in the object.\r\n      */\r\n    rows: number;\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    cols: number;\r\n    /**\r\n      * Sets or retrieves the value indicated whether the content of the object is read-only.\r\n      */\r\n    readOnly: boolean;\r\n    /**\r\n      * Sets or retrieves how to handle wordwrapping in the object.\r\n      */\r\n    wrap: string;\r\n    /**\r\n      * Gets or sets the end position or offset of a text selection.\r\n      */\r\n    selectionEnd: number;\r\n    /**\r\n      * Retrieves the type of control.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Sets or retrieves the initial contents of the object.\r\n      */\r\n    defaultValue: string;\r\n    /**\r\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\r\n      */\r\n    validationMessage: string;\r\n    /**\r\n      * Provides a way to direct a user to a specific field when a document loads. This can provide both direction and convenience for a user, reducing the need to click or tab to a field when a page opens. This attribute is true when present on an element, and false when missing.\r\n      */\r\n    autofocus: boolean;\r\n    /**\r\n      * Returns a  ValidityState object that represents the validity states of an element.\r\n      */\r\n    validity: ValidityState;\r\n    /**\r\n      * When present, marks an element that can't be submitted without a value.\r\n      */\r\n    required: boolean;\r\n    /**\r\n      * Sets or retrieves the maximum number of characters that the user can enter in a text control.\r\n      */\r\n    maxLength: number;\r\n    /**\r\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\r\n      */\r\n    willValidate: boolean;\r\n    /**\r\n      * Gets or sets a text string that is displayed in an input field as a hint or prompt to users as the format or type of information they need to enter.The text appears in an input field until the user puts focus on the field.\r\n      */\r\n    placeholder: string;\r\n    /**\r\n      * Creates a TextRange object for the element.\r\n      */\r\n    createTextRange(): TextRange;\r\n    /**\r\n      * Sets the start and end positions of a selection in a text field.\r\n      * @param start The offset into the text field for the start of the selection.\r\n      * @param end The offset into the text field for the end of the selection.\r\n      */\r\n    setSelectionRange(start: number, end: number): void;\r\n    /**\r\n      * Highlights the input area of a form element.\r\n      */\r\n    select(): void;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Sets a custom error message that is displayed when a form is submitted.\r\n      * @param error Sets a custom error message that is displayed when a form is submitted.\r\n      */\r\n    setCustomValidity(error: string): void;\r\n}\r\ndeclare var HTMLTextAreaElement: {\r\n    prototype: HTMLTextAreaElement;\r\n    new(): HTMLTextAreaElement;\r\n}\r\n\r\ninterface Geolocation {\r\n    clearWatch(watchId: number): void;\r\n    getCurrentPosition(successCallback: PositionCallback, errorCallback?: PositionErrorCallback, options?: PositionOptions): void;\r\n    watchPosition(successCallback: PositionCallback, errorCallback?: PositionErrorCallback, options?: PositionOptions): number;\r\n}\r\ndeclare var Geolocation: {\r\n    prototype: Geolocation;\r\n    new(): Geolocation;\r\n}\r\n\r\ninterface DOML2DeprecatedMarginStyle {\r\n    vspace: number;\r\n    hspace: number;\r\n}\r\n\r\ninterface MSWindowModeless {\r\n    dialogTop: any;\r\n    dialogLeft: any;\r\n    dialogWidth: any;\r\n    dialogHeight: any;\r\n    menuArguments: any;\r\n}\r\n\r\ninterface DOML2DeprecatedAlignmentStyle {\r\n    align: string;\r\n}\r\n\r\ninterface HTMLMarqueeElement extends HTMLElement, MSDataBindingExtensions, DOML2DeprecatedBackgroundColorStyle {\r\n    width: string;\r\n    onbounce: (ev: Event) => any;\r\n    vspace: number;\r\n    trueSpeed: boolean;\r\n    scrollAmount: number;\r\n    scrollDelay: number;\r\n    behavior: string;\r\n    height: string;\r\n    loop: number;\r\n    direction: string;\r\n    hspace: number;\r\n    onstart: (ev: Event) => any;\r\n    onfinish: (ev: Event) => any;\r\n    stop(): void;\r\n    start(): void;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerdown\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgotpointercapture\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturedoubletap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerhover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturehold\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointermove\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturechange\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturestart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointercancel\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgestureend\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturetap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerout\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msinertiastart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mslostpointercapture\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerup\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerenter\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerleave\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"move\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"help\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusin\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"datasetchanged\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowsdelete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"losecapture\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"controlselect\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"layoutcomplete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"filterchange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"datasetcomplete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"errorupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cellchange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowexit\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowsinserted\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"propertychange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforepaste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecopy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resizestart\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"paste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"moveend\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeeditfocus\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"afterupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resizeend\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusout\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dataavailable\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"readystatechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"movestart\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"copy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowenter\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mscontentzoom\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msmanipulationstatechanged\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"bounce\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"start\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"finish\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var HTMLMarqueeElement: {\r\n    prototype: HTMLMarqueeElement;\r\n    new(): HTMLMarqueeElement;\r\n}\r\n\r\ninterface SVGRect {\r\n    y: number;\r\n    width: number;\r\n    x: number;\r\n    height: number;\r\n}\r\ndeclare var SVGRect: {\r\n    prototype: SVGRect;\r\n    new(): SVGRect;\r\n}\r\n\r\ninterface MSNodeExtensions {\r\n    swapNode(otherNode: Node): Node;\r\n    removeNode(deep?: boolean): Node;\r\n    replaceNode(replacement: Node): Node;\r\n}\r\n\r\ninterface History {\r\n    length: number;\r\n    state: any;\r\n    back(distance?: any): void;\r\n    forward(distance?: any): void;\r\n    go(delta?: any): void;\r\n    replaceState(statedata: any, title: string, url?: string): void;\r\n    pushState(statedata: any, title: string, url?: string): void;\r\n}\r\ndeclare var History: {\r\n    prototype: History;\r\n    new(): History;\r\n}\r\n\r\ninterface SVGPathSegCurvetoCubicAbs extends SVGPathSeg {\r\n    y: number;\r\n    y1: number;\r\n    x2: number;\r\n    x: number;\r\n    x1: number;\r\n    y2: number;\r\n}\r\ndeclare var SVGPathSegCurvetoCubicAbs: {\r\n    prototype: SVGPathSegCurvetoCubicAbs;\r\n    new(): SVGPathSegCurvetoCubicAbs;\r\n}\r\n\r\ninterface SVGPathSegCurvetoQuadraticAbs extends SVGPathSeg {\r\n    y: number;\r\n    y1: number;\r\n    x: number;\r\n    x1: number;\r\n}\r\ndeclare var SVGPathSegCurvetoQuadraticAbs: {\r\n    prototype: SVGPathSegCurvetoQuadraticAbs;\r\n    new(): SVGPathSegCurvetoQuadraticAbs;\r\n}\r\n\r\ninterface TimeRanges {\r\n    length: number;\r\n    start(index: number): number;\r\n    end(index: number): number;\r\n}\r\ndeclare var TimeRanges: {\r\n    prototype: TimeRanges;\r\n    new(): TimeRanges;\r\n}\r\n\r\ninterface CSSRule {\r\n    cssText: string;\r\n    parentStyleSheet: CSSStyleSheet;\r\n    parentRule: CSSRule;\r\n    type: number;\r\n    IMPORT_RULE: number;\r\n    MEDIA_RULE: number;\r\n    STYLE_RULE: number;\r\n    NAMESPACE_RULE: number;\r\n    PAGE_RULE: number;\r\n    UNKNOWN_RULE: number;\r\n    FONT_FACE_RULE: number;\r\n    CHARSET_RULE: number;\r\n    KEYFRAMES_RULE: number;\r\n    KEYFRAME_RULE: number;\r\n    VIEWPORT_RULE: number;\r\n}\r\ndeclare var CSSRule: {\r\n    prototype: CSSRule;\r\n    new(): CSSRule;\r\n    IMPORT_RULE: number;\r\n    MEDIA_RULE: number;\r\n    STYLE_RULE: number;\r\n    NAMESPACE_RULE: number;\r\n    PAGE_RULE: number;\r\n    UNKNOWN_RULE: number;\r\n    FONT_FACE_RULE: number;\r\n    CHARSET_RULE: number;\r\n    KEYFRAMES_RULE: number;\r\n    KEYFRAME_RULE: number;\r\n    VIEWPORT_RULE: number;\r\n}\r\n\r\ninterface SVGPathSegLinetoAbs extends SVGPathSeg {\r\n    y: number;\r\n    x: number;\r\n}\r\ndeclare var SVGPathSegLinetoAbs: {\r\n    prototype: SVGPathSegLinetoAbs;\r\n    new(): SVGPathSegLinetoAbs;\r\n}\r\n\r\ninterface HTMLModElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the date and time of a modification to the object.\r\n      */\r\n    dateTime: string;\r\n    /**\r\n      * Sets or retrieves reference information about the object.\r\n      */\r\n    cite: string;\r\n}\r\ndeclare var HTMLModElement: {\r\n    prototype: HTMLModElement;\r\n    new(): HTMLModElement;\r\n}\r\n\r\ninterface SVGMatrix {\r\n    e: number;\r\n    c: number;\r\n    a: number;\r\n    b: number;\r\n    d: number;\r\n    f: number;\r\n    multiply(secondMatrix: SVGMatrix): SVGMatrix;\r\n    flipY(): SVGMatrix;\r\n    skewY(angle: number): SVGMatrix;\r\n    inverse(): SVGMatrix;\r\n    scaleNonUniform(scaleFactorX: number, scaleFactorY: number): SVGMatrix;\r\n    rotate(angle: number): SVGMatrix;\r\n    flipX(): SVGMatrix;\r\n    translate(x: number, y: number): SVGMatrix;\r\n    scale(scaleFactor: number): SVGMatrix;\r\n    rotateFromVector(x: number, y: number): SVGMatrix;\r\n    skewX(angle: number): SVGMatrix;\r\n}\r\ndeclare var SVGMatrix: {\r\n    prototype: SVGMatrix;\r\n    new(): SVGMatrix;\r\n}\r\n\r\ninterface MSPopupWindow {\r\n    document: Document;\r\n    isOpen: boolean;\r\n    show(x: number, y: number, w: number, h: number, element?: any): void;\r\n    hide(): void;\r\n}\r\ndeclare var MSPopupWindow: {\r\n    prototype: MSPopupWindow;\r\n    new(): MSPopupWindow;\r\n}\r\n\r\ninterface BeforeUnloadEvent extends Event {\r\n    returnValue: string;\r\n}\r\ndeclare var BeforeUnloadEvent: {\r\n    prototype: BeforeUnloadEvent;\r\n    new(): BeforeUnloadEvent;\r\n}\r\n\r\ninterface SVGUseElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired, SVGURIReference {\r\n    y: SVGAnimatedLength;\r\n    width: SVGAnimatedLength;\r\n    animatedInstanceRoot: SVGElementInstance;\r\n    instanceRoot: SVGElementInstance;\r\n    x: SVGAnimatedLength;\r\n    height: SVGAnimatedLength;\r\n}\r\ndeclare var SVGUseElement: {\r\n    prototype: SVGUseElement;\r\n    new(): SVGUseElement;\r\n}\r\n\r\ninterface Event {\r\n    timeStamp: number;\r\n    defaultPrevented: boolean;\r\n    isTrusted: boolean;\r\n    currentTarget: EventTarget;\r\n    cancelBubble: boolean;\r\n    target: EventTarget;\r\n    eventPhase: number;\r\n    cancelable: boolean;\r\n    type: string;\r\n    srcElement: Element;\r\n    bubbles: boolean;\r\n    initEvent(eventTypeArg: string, canBubbleArg: boolean, cancelableArg: boolean): void;\r\n    stopPropagation(): void;\r\n    stopImmediatePropagation(): void;\r\n    preventDefault(): void;\r\n    CAPTURING_PHASE: number;\r\n    AT_TARGET: number;\r\n    BUBBLING_PHASE: number;\r\n}\r\ndeclare var Event: {\r\n    prototype: Event;\r\n    new(): Event;\r\n    CAPTURING_PHASE: number;\r\n    AT_TARGET: number;\r\n    BUBBLING_PHASE: number;\r\n}\r\n\r\ninterface ImageData {\r\n    width: number;\r\n    data: number[];\r\n    height: number;\r\n}\r\ndeclare var ImageData: {\r\n    prototype: ImageData;\r\n    new(): ImageData;\r\n}\r\n\r\ninterface HTMLTableColElement extends HTMLElement, HTMLTableAlignment {\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: any;\r\n    /**\r\n      * Sets or retrieves the alignment of the object relative to the display or table.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves the number of columns in the group.\r\n      */\r\n    span: number;\r\n}\r\ndeclare var HTMLTableColElement: {\r\n    prototype: HTMLTableColElement;\r\n    new(): HTMLTableColElement;\r\n}\r\n\r\ninterface SVGException {\r\n    code: number;\r\n    message: string;\r\n    name: string;\r\n    toString(): string;\r\n    SVG_MATRIX_NOT_INVERTABLE: number;\r\n    SVG_WRONG_TYPE_ERR: number;\r\n    SVG_INVALID_VALUE_ERR: number;\r\n}\r\ndeclare var SVGException: {\r\n    prototype: SVGException;\r\n    new(): SVGException;\r\n    SVG_MATRIX_NOT_INVERTABLE: number;\r\n    SVG_WRONG_TYPE_ERR: number;\r\n    SVG_INVALID_VALUE_ERR: number;\r\n}\r\n\r\ninterface SVGLinearGradientElement extends SVGGradientElement {\r\n    y1: SVGAnimatedLength;\r\n    x2: SVGAnimatedLength;\r\n    x1: SVGAnimatedLength;\r\n    y2: SVGAnimatedLength;\r\n}\r\ndeclare var SVGLinearGradientElement: {\r\n    prototype: SVGLinearGradientElement;\r\n    new(): SVGLinearGradientElement;\r\n}\r\n\r\ninterface HTMLTableAlignment {\r\n    /**\r\n      * Sets or retrieves a value that you can use to implement your own ch functionality for the object.\r\n      */\r\n    ch: string;\r\n    /**\r\n      * Sets or retrieves how text and other content are vertically aligned within the object that contains them.\r\n      */\r\n    vAlign: string;\r\n    /**\r\n      * Sets or retrieves a value that you can use to implement your own chOff functionality for the object.\r\n      */\r\n    chOff: string;\r\n}\r\n\r\ninterface SVGAnimatedEnumeration {\r\n    animVal: number;\r\n    baseVal: number;\r\n}\r\ndeclare var SVGAnimatedEnumeration: {\r\n    prototype: SVGAnimatedEnumeration;\r\n    new(): SVGAnimatedEnumeration;\r\n}\r\n\r\ninterface DOML2DeprecatedSizeProperty {\r\n    size: number;\r\n}\r\n\r\ninterface HTMLUListElement extends HTMLElement, DOML2DeprecatedListSpaceReduction, DOML2DeprecatedListNumberingAndBulletStyle {\r\n}\r\ndeclare var HTMLUListElement: {\r\n    prototype: HTMLUListElement;\r\n    new(): HTMLUListElement;\r\n}\r\n\r\ninterface SVGRectElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired {\r\n    y: SVGAnimatedLength;\r\n    width: SVGAnimatedLength;\r\n    ry: SVGAnimatedLength;\r\n    rx: SVGAnimatedLength;\r\n    x: SVGAnimatedLength;\r\n    height: SVGAnimatedLength;\r\n}\r\ndeclare var SVGRectElement: {\r\n    prototype: SVGRectElement;\r\n    new(): SVGRectElement;\r\n}\r\n\r\ninterface ErrorEventHandler {\r\n    (event: Event, source: string, fileno: number, columnNumber: number): void;\r\n}\r\n\r\ninterface HTMLDivElement extends HTMLElement, MSDataBindingExtensions {\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text. \r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves whether the browser automatically performs wordwrap.\r\n      */\r\n    noWrap: boolean;\r\n}\r\ndeclare var HTMLDivElement: {\r\n    prototype: HTMLDivElement;\r\n    new(): HTMLDivElement;\r\n}\r\n\r\ninterface DOML2DeprecatedBorderStyle {\r\n    border: string;\r\n}\r\n\r\ninterface NamedNodeMap {\r\n    length: number;\r\n    removeNamedItemNS(namespaceURI: string, localName: string): Attr;\r\n    item(index: number): Attr;\r\n    [index: number]: Attr;\r\n    removeNamedItem(name: string): Attr;\r\n    getNamedItem(name: string): Attr;\r\n    // [name: string]: Attr;\r\n    setNamedItem(arg: Attr): Attr;\r\n    getNamedItemNS(namespaceURI: string, localName: string): Attr;\r\n    setNamedItemNS(arg: Attr): Attr;\r\n}\r\ndeclare var NamedNodeMap: {\r\n    prototype: NamedNodeMap;\r\n    new(): NamedNodeMap;\r\n}\r\n\r\ninterface MediaList {\r\n    length: number;\r\n    mediaText: string;\r\n    deleteMedium(oldMedium: string): void;\r\n    appendMedium(newMedium: string): void;\r\n    item(index: number): string;\r\n    [index: number]: string;\r\n    toString(): string;\r\n}\r\ndeclare var MediaList: {\r\n    prototype: MediaList;\r\n    new(): MediaList;\r\n}\r\n\r\ninterface SVGPathSegCurvetoQuadraticSmoothAbs extends SVGPathSeg {\r\n    y: number;\r\n    x: number;\r\n}\r\ndeclare var SVGPathSegCurvetoQuadraticSmoothAbs: {\r\n    prototype: SVGPathSegCurvetoQuadraticSmoothAbs;\r\n    new(): SVGPathSegCurvetoQuadraticSmoothAbs;\r\n}\r\n\r\ninterface SVGPathSegCurvetoCubicSmoothRel extends SVGPathSeg {\r\n    y: number;\r\n    x2: number;\r\n    x: number;\r\n    y2: number;\r\n}\r\ndeclare var SVGPathSegCurvetoCubicSmoothRel: {\r\n    prototype: SVGPathSegCurvetoCubicSmoothRel;\r\n    new(): SVGPathSegCurvetoCubicSmoothRel;\r\n}\r\n\r\ninterface SVGLengthList {\r\n    numberOfItems: number;\r\n    replaceItem(newItem: SVGLength, index: number): SVGLength;\r\n    getItem(index: number): SVGLength;\r\n    clear(): void;\r\n    appendItem(newItem: SVGLength): SVGLength;\r\n    initialize(newItem: SVGLength): SVGLength;\r\n    removeItem(index: number): SVGLength;\r\n    insertItemBefore(newItem: SVGLength, index: number): SVGLength;\r\n}\r\ndeclare var SVGLengthList: {\r\n    prototype: SVGLengthList;\r\n    new(): SVGLengthList;\r\n}\r\n\r\ninterface ProcessingInstruction extends Node {\r\n    target: string;\r\n    data: string;\r\n}\r\ndeclare var ProcessingInstruction: {\r\n    prototype: ProcessingInstruction;\r\n    new(): ProcessingInstruction;\r\n}\r\n\r\ninterface MSWindowExtensions {\r\n    status: string;\r\n    onmouseleave: (ev: MouseEvent) => any;\r\n    screenLeft: number;\r\n    offscreenBuffering: any;\r\n    maxConnectionsPerServer: number;\r\n    onmouseenter: (ev: MouseEvent) => any;\r\n    clipboardData: DataTransfer;\r\n    defaultStatus: string;\r\n    clientInformation: Navigator;\r\n    closed: boolean;\r\n    onhelp: (ev: Event) => any;\r\n    external: External;\r\n    event: MSEventObj;\r\n    onfocusout: (ev: FocusEvent) => any;\r\n    screenTop: number;\r\n    onfocusin: (ev: FocusEvent) => any;\r\n    showModelessDialog(url?: string, argument?: any, options?: any): Window;\r\n    navigate(url: string): void;\r\n    resizeBy(x?: number, y?: number): void;\r\n    item(index: any): any;\r\n    resizeTo(x?: number, y?: number): void;\r\n    createPopup(arguments?: any): MSPopupWindow;\r\n    toStaticHTML(html: string): string;\r\n    execScript(code: string, language?: string): any;\r\n    msWriteProfilerMark(profilerMarkName: string): void;\r\n    moveTo(x?: number, y?: number): void;\r\n    moveBy(x?: number, y?: number): void;\r\n    showHelp(url: string, helpArg?: any, features?: string): void;\r\n    captureEvents(): void;\r\n    releaseEvents(): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"help\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusout\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusin\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\n\r\ninterface MSBehaviorUrnsCollection {\r\n    length: number;\r\n    item(index: number): string;\r\n}\r\ndeclare var MSBehaviorUrnsCollection: {\r\n    prototype: MSBehaviorUrnsCollection;\r\n    new(): MSBehaviorUrnsCollection;\r\n}\r\n\r\ninterface CSSFontFaceRule extends CSSRule {\r\n    style: CSSStyleDeclaration;\r\n}\r\ndeclare var CSSFontFaceRule: {\r\n    prototype: CSSFontFaceRule;\r\n    new(): CSSFontFaceRule;\r\n}\r\n\r\ninterface DOML2DeprecatedBackgroundStyle {\r\n    background: string;\r\n}\r\n\r\ninterface TextEvent extends UIEvent {\r\n    inputMethod: number;\r\n    data: string;\r\n    locale: string;\r\n    initTextEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, dataArg: string, inputMethod: number, locale: string): void;\r\n    DOM_INPUT_METHOD_KEYBOARD: number;\r\n    DOM_INPUT_METHOD_DROP: number;\r\n    DOM_INPUT_METHOD_IME: number;\r\n    DOM_INPUT_METHOD_SCRIPT: number;\r\n    DOM_INPUT_METHOD_VOICE: number;\r\n    DOM_INPUT_METHOD_UNKNOWN: number;\r\n    DOM_INPUT_METHOD_PASTE: number;\r\n    DOM_INPUT_METHOD_HANDWRITING: number;\r\n    DOM_INPUT_METHOD_OPTION: number;\r\n    DOM_INPUT_METHOD_MULTIMODAL: number;\r\n}\r\ndeclare var TextEvent: {\r\n    prototype: TextEvent;\r\n    new(): TextEvent;\r\n    DOM_INPUT_METHOD_KEYBOARD: number;\r\n    DOM_INPUT_METHOD_DROP: number;\r\n    DOM_INPUT_METHOD_IME: number;\r\n    DOM_INPUT_METHOD_SCRIPT: number;\r\n    DOM_INPUT_METHOD_VOICE: number;\r\n    DOM_INPUT_METHOD_UNKNOWN: number;\r\n    DOM_INPUT_METHOD_PASTE: number;\r\n    DOM_INPUT_METHOD_HANDWRITING: number;\r\n    DOM_INPUT_METHOD_OPTION: number;\r\n    DOM_INPUT_METHOD_MULTIMODAL: number;\r\n}\r\n\r\ninterface DocumentFragment extends Node, NodeSelector, MSEventAttachmentTarget, MSNodeExtensions {\r\n}\r\ndeclare var DocumentFragment: {\r\n    prototype: DocumentFragment;\r\n    new(): DocumentFragment;\r\n}\r\n\r\ninterface SVGPolylineElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGAnimatedPoints, SVGTests, SVGExternalResourcesRequired {\r\n}\r\ndeclare var SVGPolylineElement: {\r\n    prototype: SVGPolylineElement;\r\n    new(): SVGPolylineElement;\r\n}\r\n\r\ninterface SVGAnimatedPathData {\r\n    pathSegList: SVGPathSegList;\r\n}\r\n\r\ninterface Position {\r\n    timestamp: Date;\r\n    coords: Coordinates;\r\n}\r\ndeclare var Position: {\r\n    prototype: Position;\r\n    new(): Position;\r\n}\r\n\r\ninterface BookmarkCollection {\r\n    length: number;\r\n    item(index: number): any;\r\n    [index: number]: any;\r\n}\r\ndeclare var BookmarkCollection: {\r\n    prototype: BookmarkCollection;\r\n    new(): BookmarkCollection;\r\n}\r\n\r\ninterface PerformanceMark extends PerformanceEntry {\r\n}\r\ndeclare var PerformanceMark: {\r\n    prototype: PerformanceMark;\r\n    new(): PerformanceMark;\r\n}\r\n\r\ninterface CSSPageRule extends CSSRule {\r\n    pseudoClass: string;\r\n    selectorText: string;\r\n    selector: string;\r\n    style: CSSStyleDeclaration;\r\n}\r\ndeclare var CSSPageRule: {\r\n    prototype: CSSPageRule;\r\n    new(): CSSPageRule;\r\n}\r\n\r\ninterface HTMLBRElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves the side on which floating objects are not to be positioned when any IHTMLBlockElement is inserted into the document.\r\n      */\r\n    clear: string;\r\n}\r\ndeclare var HTMLBRElement: {\r\n    prototype: HTMLBRElement;\r\n    new(): HTMLBRElement;\r\n}\r\n\r\ninterface MSNavigatorExtensions {\r\n    userLanguage: string;\r\n    plugins: MSPluginsCollection;\r\n    cookieEnabled: boolean;\r\n    appCodeName: string;\r\n    cpuClass: string;\r\n    appMinorVersion: string;\r\n    connectionSpeed: number;\r\n    browserLanguage: string;\r\n    mimeTypes: MSMimeTypesCollection;\r\n    systemLanguage: string;\r\n    language: string;\r\n    javaEnabled(): boolean;\r\n    taintEnabled(): boolean;\r\n}\r\n\r\ninterface HTMLSpanElement extends HTMLElement, MSDataBindingExtensions {\r\n}\r\ndeclare var HTMLSpanElement: {\r\n    prototype: HTMLSpanElement;\r\n    new(): HTMLSpanElement;\r\n}\r\n\r\ninterface HTMLHeadElement extends HTMLElement {\r\n    profile: string;\r\n}\r\ndeclare var HTMLHeadElement: {\r\n    prototype: HTMLHeadElement;\r\n    new(): HTMLHeadElement;\r\n}\r\n\r\ninterface HTMLHeadingElement extends HTMLElement, DOML2DeprecatedTextFlowControl {\r\n    /**\r\n      * Sets or retrieves a value that indicates the table alignment.\r\n      */\r\n    align: string;\r\n}\r\ndeclare var HTMLHeadingElement: {\r\n    prototype: HTMLHeadingElement;\r\n    new(): HTMLHeadingElement;\r\n}\r\n\r\ninterface HTMLFormElement extends HTMLElement, MSHTMLCollectionExtensions {\r\n    /**\r\n      * Sets or retrieves the number of objects in a collection.\r\n      */\r\n    length: number;\r\n    /**\r\n      * Sets or retrieves the window or frame at which to target content.\r\n      */\r\n    target: string;\r\n    /**\r\n      * Sets or retrieves a list of character encodings for input data that must be accepted by the server processing the form.\r\n      */\r\n    acceptCharset: string;\r\n    /**\r\n      * Sets or retrieves the encoding type for the form.\r\n      */\r\n    enctype: string;\r\n    /**\r\n      * Retrieves a collection, in source order, of all controls in a given form.\r\n      */\r\n    elements: HTMLCollection;\r\n    /**\r\n      * Sets or retrieves the URL to which the form content is sent for processing.\r\n      */\r\n    action: string;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves how to send the form data to the server.\r\n      */\r\n    method: string;\r\n    /**\r\n      * Sets or retrieves the MIME encoding for the form.\r\n      */\r\n    encoding: string;\r\n    /**\r\n      * Specifies whether autocomplete is applied to an editable text field.\r\n      */\r\n    autocomplete: string;\r\n    /**\r\n      * Designates a form that is not validated when submitted.\r\n      */\r\n    noValidate: boolean;\r\n    /**\r\n      * Fires when the user resets a form.\r\n      */\r\n    reset(): void;\r\n    /**\r\n      * Retrieves a form object or an object from an elements collection.\r\n      * @param name Variant of type Number or String that specifies the object or collection to retrieve. If this parameter is a Number, it is the zero-based index of the object. If this parameter is a string, all objects with matching name or id properties are retrieved, and a collection is returned if more than one match is made.\r\n      * @param index Variant of type Number that specifies the zero-based index of the object to retrieve when a collection is returned.\r\n      */\r\n    item(name?: any, index?: any): any;\r\n    /**\r\n      * Fires when a FORM is about to be submitted.\r\n      */\r\n    submit(): void;\r\n    /**\r\n      * Retrieves a form object or an object from an elements collection.\r\n      */\r\n    namedItem(name: string): any;\r\n    [name: string]: any;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n}\r\ndeclare var HTMLFormElement: {\r\n    prototype: HTMLFormElement;\r\n    new(): HTMLFormElement;\r\n}\r\n\r\ninterface SVGZoomAndPan {\r\n    zoomAndPan: number;\r\n    SVG_ZOOMANDPAN_MAGNIFY: number;\r\n    SVG_ZOOMANDPAN_UNKNOWN: number;\r\n    SVG_ZOOMANDPAN_DISABLE: number;\r\n}\r\ndeclare var SVGZoomAndPan: SVGZoomAndPan;\r\n\r\ninterface HTMLMediaElement extends HTMLElement {\r\n    /**\r\n      * Gets the earliest possible position, in seconds, that the playback can begin.\r\n      */\r\n    initialTime: number;\r\n    /**\r\n      * Gets TimeRanges for the current media resource that has been played.\r\n      */\r\n    played: TimeRanges;\r\n    /**\r\n      * Gets the address or URL of the current media resource that is selected by IHTMLMediaElement.\r\n      */\r\n    currentSrc: string;\r\n    readyState: any;\r\n    /**\r\n      * The autobuffer element is not supported by Internet Explorer 9. Use the preload element instead.\r\n      */\r\n    autobuffer: boolean;\r\n    /**\r\n      * Gets or sets a flag to specify whether playback should restart after it completes.\r\n      */\r\n    loop: boolean;\r\n    /**\r\n      * Gets information about whether the playback has ended or not.\r\n      */\r\n    ended: boolean;\r\n    /**\r\n      * Gets a collection of buffered time ranges.\r\n      */\r\n    buffered: TimeRanges;\r\n    /**\r\n      * Returns an object representing the current error state of the audio or video element.\r\n      */\r\n    error: MediaError;\r\n    /**\r\n      * Returns a TimeRanges object that represents the ranges of the current media resource that can be seeked.\r\n      */\r\n    seekable: TimeRanges;\r\n    /**\r\n      * Gets or sets a value that indicates whether to start playing the media automatically.\r\n      */\r\n    autoplay: boolean;\r\n    /**\r\n      * Gets or sets a flag that indicates whether the client provides a set of controls for the media (in case the developer does not include controls for the player).\r\n      */\r\n    controls: boolean;\r\n    /**\r\n      * Gets or sets the volume level for audio portions of the media element.\r\n      */\r\n    volume: number;\r\n    /**\r\n      * The address or URL of the a media resource that is to be considered.\r\n      */\r\n    src: string;\r\n    /**\r\n      * Gets or sets the current rate of speed for the media resource to play. This speed is expressed as a multiple of the normal speed of the media resource.\r\n      */\r\n    playbackRate: number;\r\n    /**\r\n      * Returns the duration in seconds of the current media resource. A NaN value is returned if duration is not available, or Infinity if the media resource is streaming.\r\n      */\r\n    duration: number;\r\n    /**\r\n      * Gets or sets a flag that indicates whether the audio (either audio or the audio track on video media) is muted.\r\n      */\r\n    muted: boolean;\r\n    /**\r\n      * Gets or sets the default playback rate when the user is not using fast forward or reverse for a video or audio resource.\r\n      */\r\n    defaultPlaybackRate: number;\r\n    /**\r\n      * Gets a flag that specifies whether playback is paused.\r\n      */\r\n    paused: boolean;\r\n    /**\r\n      * Gets a flag that indicates whether the the client is currently moving to a new playback position in the media resource.\r\n      */\r\n    seeking: boolean;\r\n    /**\r\n      * Gets or sets the current playback position, in seconds.\r\n      */\r\n    currentTime: number;\r\n    /**\r\n      * Gets or sets the current playback position, in seconds.\r\n      */\r\n    preload: string;\r\n    /**\r\n      * Gets the current network activity for the element.\r\n      */\r\n    networkState: number;\r\n    /**\r\n      * Specifies the purpose of the audio or video media, such as background audio or alerts.\r\n      */\r\n    msAudioCategory: string;\r\n    /**\r\n      * Specifies whether or not to enable low-latency playback on the media element.\r\n      */\r\n    msRealTime: boolean;\r\n    /**\r\n      * Gets or sets the primary DLNA PlayTo device.\r\n      */\r\n    msPlayToPrimary: boolean;\r\n    textTracks: TextTrackList;\r\n    /**\r\n      * Gets or sets whether the DLNA PlayTo device is available.\r\n      */\r\n    msPlayToDisabled: boolean;\r\n    /**\r\n      * Returns an AudioTrackList object with the audio tracks for a given video element.\r\n      */\r\n    audioTracks: AudioTrackList;\r\n    /**\r\n      * Gets the source associated with the media element for use by the PlayToManager.\r\n      */\r\n    msPlayToSource: any;\r\n    /**\r\n      * Specifies the output device id that the audio will be sent to.\r\n      */\r\n    msAudioDeviceType: string;\r\n    /**\r\n      * Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.\r\n      */\r\n    msPlayToPreferredSourceUri: string;\r\n    onmsneedkey: (ev: MSMediaKeyNeededEvent) => any;\r\n    /**\r\n      * Gets the MSMediaKeys object, which is used for decrypting media data, that is associated with this media element.\r\n      */\r\n    msKeys: MSMediaKeys;\r\n    msGraphicsTrustStatus: MSGraphicsTrust;\r\n    /**\r\n      * Pauses the current playback and sets paused to TRUE. This can be used to test whether the media is playing or paused. You can also use the pause or play events to tell whether the media is playing or not.\r\n      */\r\n    pause(): void;\r\n    /**\r\n      * Loads and starts playback of a media resource.\r\n      */\r\n    play(): void;\r\n    /**\r\n      * Fires immediately after the client loads the object.\r\n      */\r\n    load(): void;\r\n    /**\r\n      * Returns a string that specifies whether the client can play a given media resource type.\r\n      */\r\n    canPlayType(type: string): string;\r\n    /**\r\n      * Clears all effects from the media pipeline.\r\n      */\r\n    msClearEffects(): void;\r\n    /**\r\n      * Specifies the media protection manager for a given media pipeline.\r\n      */\r\n    msSetMediaProtectionManager(mediaProtectionManager?: any): void;\r\n    /**\r\n      * Inserts the specified audio effect into media pipeline.\r\n      */\r\n    msInsertAudioEffect(activatableClassId: string, effectRequired: boolean, config?: any): void;\r\n    msSetMediaKeys(mediaKeys: MSMediaKeys): void;\r\n    addTextTrack(kind: string, label?: string, language?: string): TextTrack;\r\n    HAVE_METADATA: number;\r\n    HAVE_CURRENT_DATA: number;\r\n    HAVE_NOTHING: number;\r\n    NETWORK_NO_SOURCE: number;\r\n    HAVE_ENOUGH_DATA: number;\r\n    NETWORK_EMPTY: number;\r\n    NETWORK_LOADING: number;\r\n    NETWORK_IDLE: number;\r\n    HAVE_FUTURE_DATA: number;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerdown\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgotpointercapture\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturedoubletap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerhover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturehold\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointermove\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturechange\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturestart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointercancel\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgestureend\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturetap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerout\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msinertiastart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mslostpointercapture\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerup\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerenter\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerleave\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"move\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"help\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusin\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"datasetchanged\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowsdelete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"losecapture\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"controlselect\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"layoutcomplete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"filterchange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"datasetcomplete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"errorupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cellchange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowexit\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowsinserted\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"propertychange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforepaste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecopy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resizestart\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"paste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"moveend\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeeditfocus\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"afterupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resizeend\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusout\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dataavailable\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"readystatechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"movestart\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"copy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowenter\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mscontentzoom\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msmanipulationstatechanged\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msneedkey\", listener: (ev: MSMediaKeyNeededEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var HTMLMediaElement: {\r\n    prototype: HTMLMediaElement;\r\n    new(): HTMLMediaElement;\r\n    HAVE_METADATA: number;\r\n    HAVE_CURRENT_DATA: number;\r\n    HAVE_NOTHING: number;\r\n    NETWORK_NO_SOURCE: number;\r\n    HAVE_ENOUGH_DATA: number;\r\n    NETWORK_EMPTY: number;\r\n    NETWORK_LOADING: number;\r\n    NETWORK_IDLE: number;\r\n    HAVE_FUTURE_DATA: number;\r\n}\r\n\r\ninterface ElementCSSInlineStyle {\r\n    runtimeStyle: MSStyleCSSProperties;\r\n    currentStyle: MSCurrentStyleCSSProperties;\r\n    doScroll(component?: any): void;\r\n    componentFromPoint(x: number, y: number): string;\r\n}\r\n\r\ninterface DOMParser {\r\n    parseFromString(source: string, mimeType: string): Document;\r\n}\r\ndeclare var DOMParser: {\r\n    prototype: DOMParser;\r\n    new(): DOMParser;\r\n}\r\n\r\ninterface MSMimeTypesCollection {\r\n    length: number;\r\n}\r\ndeclare var MSMimeTypesCollection: {\r\n    prototype: MSMimeTypesCollection;\r\n    new(): MSMimeTypesCollection;\r\n}\r\n\r\ninterface StyleSheet {\r\n    disabled: boolean;\r\n    ownerNode: Node;\r\n    parentStyleSheet: StyleSheet;\r\n    href: string;\r\n    media: MediaList;\r\n    type: string;\r\n    title: string;\r\n}\r\ndeclare var StyleSheet: {\r\n    prototype: StyleSheet;\r\n    new(): StyleSheet;\r\n}\r\n\r\ninterface SVGTextPathElement extends SVGTextContentElement, SVGURIReference {\r\n    startOffset: SVGAnimatedLength;\r\n    method: SVGAnimatedEnumeration;\r\n    spacing: SVGAnimatedEnumeration;\r\n    TEXTPATH_SPACINGTYPE_EXACT: number;\r\n    TEXTPATH_METHODTYPE_STRETCH: number;\r\n    TEXTPATH_SPACINGTYPE_AUTO: number;\r\n    TEXTPATH_SPACINGTYPE_UNKNOWN: number;\r\n    TEXTPATH_METHODTYPE_UNKNOWN: number;\r\n    TEXTPATH_METHODTYPE_ALIGN: number;\r\n}\r\ndeclare var SVGTextPathElement: {\r\n    prototype: SVGTextPathElement;\r\n    new(): SVGTextPathElement;\r\n    TEXTPATH_SPACINGTYPE_EXACT: number;\r\n    TEXTPATH_METHODTYPE_STRETCH: number;\r\n    TEXTPATH_SPACINGTYPE_AUTO: number;\r\n    TEXTPATH_SPACINGTYPE_UNKNOWN: number;\r\n    TEXTPATH_METHODTYPE_UNKNOWN: number;\r\n    TEXTPATH_METHODTYPE_ALIGN: number;\r\n}\r\n\r\ninterface HTMLDTElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves whether the browser automatically performs wordwrap.\r\n      */\r\n    noWrap: boolean;\r\n}\r\ndeclare var HTMLDTElement: {\r\n    prototype: HTMLDTElement;\r\n    new(): HTMLDTElement;\r\n}\r\n\r\ninterface NodeList {\r\n    length: number;\r\n    item(index: number): Node;\r\n    [index: number]: Node;\r\n}\r\ndeclare var NodeList: {\r\n    prototype: NodeList;\r\n    new(): NodeList;\r\n}\r\n\r\ninterface XMLSerializer {\r\n    serializeToString(target: Node): string;\r\n}\r\ndeclare var XMLSerializer: {\r\n    prototype: XMLSerializer;\r\n    new(): XMLSerializer;\r\n}\r\n\r\ninterface PerformanceMeasure extends PerformanceEntry {\r\n}\r\ndeclare var PerformanceMeasure: {\r\n    prototype: PerformanceMeasure;\r\n    new(): PerformanceMeasure;\r\n}\r\n\r\ninterface SVGGradientElement extends SVGElement, SVGUnitTypes, SVGStylable, SVGExternalResourcesRequired, SVGURIReference {\r\n    spreadMethod: SVGAnimatedEnumeration;\r\n    gradientTransform: SVGAnimatedTransformList;\r\n    gradientUnits: SVGAnimatedEnumeration;\r\n    SVG_SPREADMETHOD_REFLECT: number;\r\n    SVG_SPREADMETHOD_PAD: number;\r\n    SVG_SPREADMETHOD_UNKNOWN: number;\r\n    SVG_SPREADMETHOD_REPEAT: number;\r\n}\r\ndeclare var SVGGradientElement: {\r\n    prototype: SVGGradientElement;\r\n    new(): SVGGradientElement;\r\n    SVG_SPREADMETHOD_REFLECT: number;\r\n    SVG_SPREADMETHOD_PAD: number;\r\n    SVG_SPREADMETHOD_UNKNOWN: number;\r\n    SVG_SPREADMETHOD_REPEAT: number;\r\n}\r\n\r\ninterface NodeFilter {\r\n    acceptNode(n: Node): number;\r\n    SHOW_ENTITY_REFERENCE: number;\r\n    SHOW_NOTATION: number;\r\n    SHOW_ENTITY: number;\r\n    SHOW_DOCUMENT: number;\r\n    SHOW_PROCESSING_INSTRUCTION: number;\r\n    FILTER_REJECT: number;\r\n    SHOW_CDATA_SECTION: number;\r\n    FILTER_ACCEPT: number;\r\n    SHOW_ALL: number;\r\n    SHOW_DOCUMENT_TYPE: number;\r\n    SHOW_TEXT: number;\r\n    SHOW_ELEMENT: number;\r\n    SHOW_COMMENT: number;\r\n    FILTER_SKIP: number;\r\n    SHOW_ATTRIBUTE: number;\r\n    SHOW_DOCUMENT_FRAGMENT: number;\r\n}\r\ndeclare var NodeFilter: NodeFilter;\r\n\r\ninterface SVGNumberList {\r\n    numberOfItems: number;\r\n    replaceItem(newItem: SVGNumber, index: number): SVGNumber;\r\n    getItem(index: number): SVGNumber;\r\n    clear(): void;\r\n    appendItem(newItem: SVGNumber): SVGNumber;\r\n    initialize(newItem: SVGNumber): SVGNumber;\r\n    removeItem(index: number): SVGNumber;\r\n    insertItemBefore(newItem: SVGNumber, index: number): SVGNumber;\r\n}\r\ndeclare var SVGNumberList: {\r\n    prototype: SVGNumberList;\r\n    new(): SVGNumberList;\r\n}\r\n\r\ninterface MediaError {\r\n    code: number;\r\n    msExtendedCode: number;\r\n    MEDIA_ERR_ABORTED: number;\r\n    MEDIA_ERR_NETWORK: number;\r\n    MEDIA_ERR_SRC_NOT_SUPPORTED: number;\r\n    MEDIA_ERR_DECODE: number;\r\n    MS_MEDIA_ERR_ENCRYPTED: number;\r\n}\r\ndeclare var MediaError: {\r\n    prototype: MediaError;\r\n    new(): MediaError;\r\n    MEDIA_ERR_ABORTED: number;\r\n    MEDIA_ERR_NETWORK: number;\r\n    MEDIA_ERR_SRC_NOT_SUPPORTED: number;\r\n    MEDIA_ERR_DECODE: number;\r\n    MS_MEDIA_ERR_ENCRYPTED: number;\r\n}\r\n\r\ninterface HTMLFieldSetElement extends HTMLElement {\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\r\n      */\r\n    validationMessage: string;\r\n    /**\r\n      * Returns a  ValidityState object that represents the validity states of an element.\r\n      */\r\n    validity: ValidityState;\r\n    /**\r\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\r\n      */\r\n    willValidate: boolean;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Sets a custom error message that is displayed when a form is submitted.\r\n      * @param error Sets a custom error message that is displayed when a form is submitted.\r\n      */\r\n    setCustomValidity(error: string): void;\r\n}\r\ndeclare var HTMLFieldSetElement: {\r\n    prototype: HTMLFieldSetElement;\r\n    new(): HTMLFieldSetElement;\r\n}\r\n\r\ninterface HTMLBGSoundElement extends HTMLElement {\r\n    /**\r\n      * Sets or gets the value indicating how the volume of the background sound is divided between the left speaker and the right speaker.\r\n      */\r\n    balance: any;\r\n    /**\r\n      * Sets or gets the volume setting for the sound. \r\n      */\r\n    volume: any;\r\n    /**\r\n      * Sets or gets the URL of a sound to play.\r\n      */\r\n    src: string;\r\n    /**\r\n      * Sets or retrieves the number of times a sound or video clip will loop when activated.\r\n      */\r\n    loop: number;\r\n}\r\ndeclare var HTMLBGSoundElement: {\r\n    prototype: HTMLBGSoundElement;\r\n    new(): HTMLBGSoundElement;\r\n}\r\n\r\ninterface Comment extends CharacterData {\r\n    text: string;\r\n}\r\ndeclare var Comment: {\r\n    prototype: Comment;\r\n    new(): Comment;\r\n}\r\n\r\ninterface PerformanceResourceTiming extends PerformanceEntry {\r\n    redirectStart: number;\r\n    redirectEnd: number;\r\n    domainLookupEnd: number;\r\n    responseStart: number;\r\n    domainLookupStart: number;\r\n    fetchStart: number;\r\n    requestStart: number;\r\n    connectEnd: number;\r\n    connectStart: number;\r\n    initiatorType: string;\r\n    responseEnd: number;\r\n}\r\ndeclare var PerformanceResourceTiming: {\r\n    prototype: PerformanceResourceTiming;\r\n    new(): PerformanceResourceTiming;\r\n}\r\n\r\ninterface CanvasPattern {\r\n}\r\ndeclare var CanvasPattern: {\r\n    prototype: CanvasPattern;\r\n    new(): CanvasPattern;\r\n}\r\n\r\ninterface HTMLHRElement extends HTMLElement, DOML2DeprecatedColorProperty, DOML2DeprecatedSizeProperty {\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: number;\r\n    /**\r\n      * Sets or retrieves how the object is aligned with adjacent text.\r\n      */\r\n    align: string;\r\n    /**\r\n      * Sets or retrieves whether the horizontal rule is drawn with 3-D shading.\r\n      */\r\n    noShade: boolean;\r\n}\r\ndeclare var HTMLHRElement: {\r\n    prototype: HTMLHRElement;\r\n    new(): HTMLHRElement;\r\n}\r\n\r\ninterface HTMLObjectElement extends HTMLElement, GetSVGDocument, DOML2DeprecatedMarginStyle, DOML2DeprecatedBorderStyle, DOML2DeprecatedAlignmentStyle, MSDataBindingExtensions, MSDataBindingRecordSetExtensions {\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: string;\r\n    /**\r\n      * Sets or retrieves the Internet media type for the code associated with the object.\r\n      */\r\n    codeType: string;\r\n    /**\r\n      * Retrieves the contained object.\r\n      */\r\n    object: any;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves the URL of the file containing the compiled Java class.\r\n      */\r\n    code: string;\r\n    /**\r\n      * Sets or retrieves a character string that can be used to implement your own archive functionality for the object.\r\n      */\r\n    archive: string;\r\n    /**\r\n      * Sets or retrieves a message to be displayed while an object is loading.\r\n      */\r\n    standby: string;\r\n    /**\r\n      * Sets or retrieves a text alternative to the graphic.\r\n      */\r\n    alt: string;\r\n    /**\r\n      * Sets or retrieves the class identifier for the object.\r\n      */\r\n    classid: string;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    /**\r\n      * Sets or retrieves the URL, often with a bookmark extension (#name), to use as a client-side image map.\r\n      */\r\n    useMap: string;\r\n    /**\r\n      * Sets or retrieves the URL that references the data of the object.\r\n      */\r\n    data: string;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: string;\r\n    /**\r\n      * Retrieves the document object of the page or frame.\r\n      */\r\n    contentDocument: Document;\r\n    /**\r\n      * Gets or sets the optional alternative HTML script to execute if the object fails to load.\r\n      */\r\n    altHtml: string;\r\n    /**\r\n      * Sets or retrieves the URL of the component.\r\n      */\r\n    codeBase: string;\r\n    declare: boolean;\r\n    /**\r\n      * Sets or retrieves the MIME type of the object.\r\n      */\r\n    type: string;\r\n    /**\r\n      * Retrieves a string of the URL where the object tag can be found. This is often the href of the document that the object is in, or the value set by a base element.\r\n      */\r\n    BaseHref: string;\r\n    /**\r\n      * Returns the error message that would be displayed if the user submits the form, or an empty string if no error message. It also triggers the standard error message, such as \"this is a required field\". The result is that the user sees validation messages without actually submitting.\r\n      */\r\n    validationMessage: string;\r\n    /**\r\n      * Returns a  ValidityState object that represents the validity states of an element.\r\n      */\r\n    validity: ValidityState;\r\n    /**\r\n      * Returns whether an element will successfully validate based on forms validation rules and constraints.\r\n      */\r\n    willValidate: boolean;\r\n    /**\r\n      * Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.\r\n      */\r\n    msPlayToPreferredSourceUri: string;\r\n    /**\r\n      * Gets or sets the primary DLNA PlayTo device.\r\n      */\r\n    msPlayToPrimary: boolean;\r\n    /**\r\n      * Gets or sets whether the DLNA PlayTo device is available.\r\n      */\r\n    msPlayToDisabled: boolean;\r\n    readyState: number;\r\n    /**\r\n      * Gets the source associated with the media element for use by the PlayToManager.\r\n      */\r\n    msPlayToSource: any;\r\n    /**\r\n      * Returns whether a form will validate when it is submitted, without having to submit it.\r\n      */\r\n    checkValidity(): boolean;\r\n    /**\r\n      * Sets a custom error message that is displayed when a form is submitted.\r\n      * @param error Sets a custom error message that is displayed when a form is submitted.\r\n      */\r\n    setCustomValidity(error: string): void;\r\n}\r\ndeclare var HTMLObjectElement: {\r\n    prototype: HTMLObjectElement;\r\n    new(): HTMLObjectElement;\r\n}\r\n\r\ninterface HTMLEmbedElement extends HTMLElement, GetSVGDocument {\r\n    /**\r\n      * Sets or retrieves the width of the object.\r\n      */\r\n    width: string;\r\n    /**\r\n      * Retrieves the palette used for the embedded document.\r\n      */\r\n    palette: string;\r\n    /**\r\n      * Sets or retrieves a URL to be loaded by the object.\r\n      */\r\n    src: string;\r\n    /**\r\n      * Sets or retrieves the name of the object.\r\n      */\r\n    name: string;\r\n    hidden: string;\r\n    /**\r\n      * Retrieves the URL of the plug-in used to view an embedded document.\r\n      */\r\n    pluginspage: string;\r\n    /**\r\n      * Sets or retrieves the height of the object.\r\n      */\r\n    height: string;\r\n    /**\r\n      * Sets or retrieves the height and width units of the embed object.\r\n      */\r\n    units: string;\r\n    /**\r\n      * Gets or sets the path to the preferred media source. This enables the Play To target device to stream the media content, which can be DRM protected, from a different location, such as a cloud media server.\r\n      */\r\n    msPlayToPreferredSourceUri: string;\r\n    /**\r\n      * Gets or sets the primary DLNA PlayTo device.\r\n      */\r\n    msPlayToPrimary: boolean;\r\n    /**\r\n      * Gets or sets whether the DLNA PlayTo device is available.\r\n      */\r\n    msPlayToDisabled: boolean;\r\n    readyState: string;\r\n    /**\r\n      * Gets the source associated with the media element for use by the PlayToManager.\r\n      */\r\n    msPlayToSource: any;\r\n}\r\ndeclare var HTMLEmbedElement: {\r\n    prototype: HTMLEmbedElement;\r\n    new(): HTMLEmbedElement;\r\n}\r\n\r\ninterface StorageEvent extends Event {\r\n    oldValue: any;\r\n    newValue: any;\r\n    url: string;\r\n    storageArea: Storage;\r\n    key: string;\r\n    initStorageEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, keyArg: string, oldValueArg: any, newValueArg: any, urlArg: string, storageAreaArg: Storage): void;\r\n}\r\ndeclare var StorageEvent: {\r\n    prototype: StorageEvent;\r\n    new(): StorageEvent;\r\n}\r\n\r\ninterface CharacterData extends Node {\r\n    length: number;\r\n    data: string;\r\n    deleteData(offset: number, count: number): void;\r\n    replaceData(offset: number, count: number, arg: string): void;\r\n    appendData(arg: string): void;\r\n    insertData(offset: number, arg: string): void;\r\n    substringData(offset: number, count: number): string;\r\n}\r\ndeclare var CharacterData: {\r\n    prototype: CharacterData;\r\n    new(): CharacterData;\r\n}\r\n\r\ninterface HTMLOptGroupElement extends HTMLElement, MSDataBindingExtensions {\r\n    /**\r\n      * Sets or retrieves the ordinal position of an option in a list box.\r\n      */\r\n    index: number;\r\n    /**\r\n      * Sets or retrieves the status of an option.\r\n      */\r\n    defaultSelected: boolean;\r\n    /**\r\n      * Sets or retrieves the text string specified by the option tag.\r\n      */\r\n    text: string;\r\n    /**\r\n      * Sets or retrieves the value which is returned to the server when the form control is submitted.\r\n      */\r\n    value: string;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves a value that you can use to implement your own label functionality for the object.\r\n      */\r\n    label: string;\r\n    /**\r\n      * Sets or retrieves whether the option in the list box is the default item.\r\n      */\r\n    selected: boolean;\r\n}\r\ndeclare var HTMLOptGroupElement: {\r\n    prototype: HTMLOptGroupElement;\r\n    new(): HTMLOptGroupElement;\r\n}\r\n\r\ninterface HTMLIsIndexElement extends HTMLElement {\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in. \r\n      */\r\n    form: HTMLFormElement;\r\n    /**\r\n      * Sets or retrieves the URL to which the form content is sent for processing.\r\n      */\r\n    action: string;\r\n    prompt: string;\r\n}\r\ndeclare var HTMLIsIndexElement: {\r\n    prototype: HTMLIsIndexElement;\r\n    new(): HTMLIsIndexElement;\r\n}\r\n\r\ninterface SVGPathSegLinetoRel extends SVGPathSeg {\r\n    y: number;\r\n    x: number;\r\n}\r\ndeclare var SVGPathSegLinetoRel: {\r\n    prototype: SVGPathSegLinetoRel;\r\n    new(): SVGPathSegLinetoRel;\r\n}\r\n\r\ninterface DOMException {\r\n    code: number;\r\n    message: string;\r\n    name: string;\r\n    toString(): string;\r\n    HIERARCHY_REQUEST_ERR: number;\r\n    NO_MODIFICATION_ALLOWED_ERR: number;\r\n    INVALID_MODIFICATION_ERR: number;\r\n    NAMESPACE_ERR: number;\r\n    INVALID_CHARACTER_ERR: number;\r\n    TYPE_MISMATCH_ERR: number;\r\n    ABORT_ERR: number;\r\n    INVALID_STATE_ERR: number;\r\n    SECURITY_ERR: number;\r\n    NETWORK_ERR: number;\r\n    WRONG_DOCUMENT_ERR: number;\r\n    QUOTA_EXCEEDED_ERR: number;\r\n    INDEX_SIZE_ERR: number;\r\n    DOMSTRING_SIZE_ERR: number;\r\n    SYNTAX_ERR: number;\r\n    SERIALIZE_ERR: number;\r\n    VALIDATION_ERR: number;\r\n    NOT_FOUND_ERR: number;\r\n    URL_MISMATCH_ERR: number;\r\n    PARSE_ERR: number;\r\n    NO_DATA_ALLOWED_ERR: number;\r\n    NOT_SUPPORTED_ERR: number;\r\n    INVALID_ACCESS_ERR: number;\r\n    INUSE_ATTRIBUTE_ERR: number;\r\n    INVALID_NODE_TYPE_ERR: number;\r\n    DATA_CLONE_ERR: number;\r\n    TIMEOUT_ERR: number;\r\n}\r\ndeclare var DOMException: {\r\n    prototype: DOMException;\r\n    new(): DOMException;\r\n    HIERARCHY_REQUEST_ERR: number;\r\n    NO_MODIFICATION_ALLOWED_ERR: number;\r\n    INVALID_MODIFICATION_ERR: number;\r\n    NAMESPACE_ERR: number;\r\n    INVALID_CHARACTER_ERR: number;\r\n    TYPE_MISMATCH_ERR: number;\r\n    ABORT_ERR: number;\r\n    INVALID_STATE_ERR: number;\r\n    SECURITY_ERR: number;\r\n    NETWORK_ERR: number;\r\n    WRONG_DOCUMENT_ERR: number;\r\n    QUOTA_EXCEEDED_ERR: number;\r\n    INDEX_SIZE_ERR: number;\r\n    DOMSTRING_SIZE_ERR: number;\r\n    SYNTAX_ERR: number;\r\n    SERIALIZE_ERR: number;\r\n    VALIDATION_ERR: number;\r\n    NOT_FOUND_ERR: number;\r\n    URL_MISMATCH_ERR: number;\r\n    PARSE_ERR: number;\r\n    NO_DATA_ALLOWED_ERR: number;\r\n    NOT_SUPPORTED_ERR: number;\r\n    INVALID_ACCESS_ERR: number;\r\n    INUSE_ATTRIBUTE_ERR: number;\r\n    INVALID_NODE_TYPE_ERR: number;\r\n    DATA_CLONE_ERR: number;\r\n    TIMEOUT_ERR: number;\r\n}\r\n\r\ninterface SVGAnimatedBoolean {\r\n    animVal: boolean;\r\n    baseVal: boolean;\r\n}\r\ndeclare var SVGAnimatedBoolean: {\r\n    prototype: SVGAnimatedBoolean;\r\n    new(): SVGAnimatedBoolean;\r\n}\r\n\r\ninterface MSCompatibleInfoCollection {\r\n    length: number;\r\n    item(index: number): MSCompatibleInfo;\r\n}\r\ndeclare var MSCompatibleInfoCollection: {\r\n    prototype: MSCompatibleInfoCollection;\r\n    new(): MSCompatibleInfoCollection;\r\n}\r\n\r\ninterface SVGSwitchElement extends SVGElement, SVGStylable, SVGTransformable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired {\r\n}\r\ndeclare var SVGSwitchElement: {\r\n    prototype: SVGSwitchElement;\r\n    new(): SVGSwitchElement;\r\n}\r\n\r\ninterface SVGPreserveAspectRatio {\r\n    align: number;\r\n    meetOrSlice: number;\r\n    SVG_PRESERVEASPECTRATIO_NONE: number;\r\n    SVG_PRESERVEASPECTRATIO_XMINYMID: number;\r\n    SVG_PRESERVEASPECTRATIO_XMAXYMIN: number;\r\n    SVG_PRESERVEASPECTRATIO_XMINYMAX: number;\r\n    SVG_PRESERVEASPECTRATIO_XMAXYMAX: number;\r\n    SVG_MEETORSLICE_UNKNOWN: number;\r\n    SVG_PRESERVEASPECTRATIO_XMAXYMID: number;\r\n    SVG_PRESERVEASPECTRATIO_XMIDYMAX: number;\r\n    SVG_PRESERVEASPECTRATIO_XMINYMIN: number;\r\n    SVG_MEETORSLICE_MEET: number;\r\n    SVG_PRESERVEASPECTRATIO_XMIDYMID: number;\r\n    SVG_PRESERVEASPECTRATIO_XMIDYMIN: number;\r\n    SVG_MEETORSLICE_SLICE: number;\r\n    SVG_PRESERVEASPECTRATIO_UNKNOWN: number;\r\n}\r\ndeclare var SVGPreserveAspectRatio: {\r\n    prototype: SVGPreserveAspectRatio;\r\n    new(): SVGPreserveAspectRatio;\r\n    SVG_PRESERVEASPECTRATIO_NONE: number;\r\n    SVG_PRESERVEASPECTRATIO_XMINYMID: number;\r\n    SVG_PRESERVEASPECTRATIO_XMAXYMIN: number;\r\n    SVG_PRESERVEASPECTRATIO_XMINYMAX: number;\r\n    SVG_PRESERVEASPECTRATIO_XMAXYMAX: number;\r\n    SVG_MEETORSLICE_UNKNOWN: number;\r\n    SVG_PRESERVEASPECTRATIO_XMAXYMID: number;\r\n    SVG_PRESERVEASPECTRATIO_XMIDYMAX: number;\r\n    SVG_PRESERVEASPECTRATIO_XMINYMIN: number;\r\n    SVG_MEETORSLICE_MEET: number;\r\n    SVG_PRESERVEASPECTRATIO_XMIDYMID: number;\r\n    SVG_PRESERVEASPECTRATIO_XMIDYMIN: number;\r\n    SVG_MEETORSLICE_SLICE: number;\r\n    SVG_PRESERVEASPECTRATIO_UNKNOWN: number;\r\n}\r\n\r\ninterface Attr extends Node {\r\n    expando: boolean;\r\n    specified: boolean;\r\n    ownerElement: Element;\r\n    value: string;\r\n    name: string;\r\n}\r\ndeclare var Attr: {\r\n    prototype: Attr;\r\n    new(): Attr;\r\n}\r\n\r\ninterface PerformanceNavigation {\r\n    redirectCount: number;\r\n    type: number;\r\n    toJSON(): any;\r\n    TYPE_RELOAD: number;\r\n    TYPE_RESERVED: number;\r\n    TYPE_BACK_FORWARD: number;\r\n    TYPE_NAVIGATE: number;\r\n}\r\ndeclare var PerformanceNavigation: {\r\n    prototype: PerformanceNavigation;\r\n    new(): PerformanceNavigation;\r\n    TYPE_RELOAD: number;\r\n    TYPE_RESERVED: number;\r\n    TYPE_BACK_FORWARD: number;\r\n    TYPE_NAVIGATE: number;\r\n}\r\n\r\ninterface SVGStopElement extends SVGElement, SVGStylable {\r\n    offset: SVGAnimatedNumber;\r\n}\r\ndeclare var SVGStopElement: {\r\n    prototype: SVGStopElement;\r\n    new(): SVGStopElement;\r\n}\r\n\r\ninterface PositionCallback {\r\n    (position: Position): void;\r\n}\r\n\r\ninterface SVGSymbolElement extends SVGElement, SVGStylable, SVGLangSpace, SVGFitToViewBox, SVGExternalResourcesRequired {\r\n}\r\ndeclare var SVGSymbolElement: {\r\n    prototype: SVGSymbolElement;\r\n    new(): SVGSymbolElement;\r\n}\r\n\r\ninterface SVGElementInstanceList {\r\n    length: number;\r\n    item(index: number): SVGElementInstance;\r\n}\r\ndeclare var SVGElementInstanceList: {\r\n    prototype: SVGElementInstanceList;\r\n    new(): SVGElementInstanceList;\r\n}\r\n\r\ninterface CSSRuleList {\r\n    length: number;\r\n    item(index: number): CSSRule;\r\n    [index: number]: CSSRule;\r\n}\r\ndeclare var CSSRuleList: {\r\n    prototype: CSSRuleList;\r\n    new(): CSSRuleList;\r\n}\r\n\r\ninterface MSDataBindingRecordSetExtensions {\r\n    recordset: any;\r\n    namedRecordset(dataMember: string, hierarchy?: any): any;\r\n}\r\n\r\ninterface LinkStyle {\r\n    styleSheet: StyleSheet;\r\n    sheet: StyleSheet;\r\n}\r\n\r\ninterface HTMLVideoElement extends HTMLMediaElement {\r\n    /**\r\n      * Gets or sets the width of the video element.\r\n      */\r\n    width: number;\r\n    /**\r\n      * Gets the intrinsic width of a video in CSS pixels, or zero if the dimensions are not known.\r\n      */\r\n    videoWidth: number;\r\n    /**\r\n      * Gets the intrinsic height of a video in CSS pixels, or zero if the dimensions are not known.\r\n      */\r\n    videoHeight: number;\r\n    /**\r\n      * Gets or sets the height of the video element.\r\n      */\r\n    height: number;\r\n    /**\r\n      * Gets or sets a URL of an image to display, for example, like a movie poster. This can be a still frame from the video, or another image if no video data is available.\r\n      */\r\n    poster: string;\r\n    msIsStereo3D: boolean;\r\n    msStereo3DPackingMode: string;\r\n    onMSVideoOptimalLayoutChanged: (ev: any) => any;\r\n    onMSVideoFrameStepCompleted: (ev: any) => any;\r\n    msStereo3DRenderMode: string;\r\n    msIsLayoutOptimalForPlayback: boolean;\r\n    msHorizontalMirror: boolean;\r\n    onMSVideoFormatChanged: (ev: any) => any;\r\n    msZoom: boolean;\r\n    msInsertVideoEffect(activatableClassId: string, effectRequired: boolean, config?: any): void;\r\n    msSetVideoRectangle(left: number, top: number, right: number, bottom: number): void;\r\n    msFrameStep(forward: boolean): void;\r\n    getVideoPlaybackQuality(): VideoPlaybackQuality;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerdown\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgotpointercapture\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturedoubletap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerhover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturehold\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointermove\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturechange\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturestart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointercancel\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgestureend\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msgesturetap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerout\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msinertiastart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mslostpointercapture\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerup\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"lostpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerenter\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"gotpointercapture\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mspointerleave\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"move\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"help\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusin\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"deactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"datasetchanged\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowsdelete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"losecapture\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"controlselect\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"layoutcomplete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"filterchange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"datasetcomplete\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"errorupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cellchange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowexit\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowsinserted\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"propertychange\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforepaste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforecopy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resizestart\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"paste\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"moveend\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforeeditfocus\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"contextmenu\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"afterupdate\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resizeend\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focusout\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"dataavailable\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"readystatechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"beforedeactivate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"activate\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"movestart\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"selectstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cut\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"copy\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"rowenter\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"mscontentzoom\", listener: (ev: MSEventObj) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msmanipulationstatechanged\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"msneedkey\", listener: (ev: MSMediaKeyNeededEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSVideoOptimalLayoutChanged\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSVideoFrameStepCompleted\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"MSVideoFormatChanged\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var HTMLVideoElement: {\r\n    prototype: HTMLVideoElement;\r\n    new(): HTMLVideoElement;\r\n}\r\n\r\ninterface ClientRectList {\r\n    length: number;\r\n    item(index: number): ClientRect;\r\n    [index: number]: ClientRect;\r\n}\r\ndeclare var ClientRectList: {\r\n    prototype: ClientRectList;\r\n    new(): ClientRectList;\r\n}\r\n\r\ninterface SVGMaskElement extends SVGElement, SVGUnitTypes, SVGStylable, SVGLangSpace, SVGTests, SVGExternalResourcesRequired {\r\n    y: SVGAnimatedLength;\r\n    width: SVGAnimatedLength;\r\n    maskUnits: SVGAnimatedEnumeration;\r\n    maskContentUnits: SVGAnimatedEnumeration;\r\n    x: SVGAnimatedLength;\r\n    height: SVGAnimatedLength;\r\n}\r\ndeclare var SVGMaskElement: {\r\n    prototype: SVGMaskElement;\r\n    new(): SVGMaskElement;\r\n}\r\n\r\ninterface External {\r\n}\r\ndeclare var External: {\r\n    prototype: External;\r\n    new(): External;\r\n}\r\n\r\ninterface MSGestureEvent extends UIEvent {\r\n    offsetY: number;\r\n    translationY: number;\r\n    velocityExpansion: number;\r\n    velocityY: number;\r\n    velocityAngular: number;\r\n    translationX: number;\r\n    velocityX: number;\r\n    hwTimestamp: number;\r\n    offsetX: number;\r\n    screenX: number;\r\n    rotation: number;\r\n    expansion: number;\r\n    clientY: number;\r\n    screenY: number;\r\n    scale: number;\r\n    gestureObject: any;\r\n    clientX: number;\r\n    initGestureEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, offsetXArg: number, offsetYArg: number, translationXArg: number, translationYArg: number, scaleArg: number, expansionArg: number, rotationArg: number, velocityXArg: number, velocityYArg: number, velocityExpansionArg: number, velocityAngularArg: number, hwTimestampArg: number): void;\r\n    MSGESTURE_FLAG_BEGIN: number;\r\n    MSGESTURE_FLAG_END: number;\r\n    MSGESTURE_FLAG_CANCEL: number;\r\n    MSGESTURE_FLAG_INERTIA: number;\r\n    MSGESTURE_FLAG_NONE: number;\r\n}\r\ndeclare var MSGestureEvent: {\r\n    prototype: MSGestureEvent;\r\n    new(): MSGestureEvent;\r\n    MSGESTURE_FLAG_BEGIN: number;\r\n    MSGESTURE_FLAG_END: number;\r\n    MSGESTURE_FLAG_CANCEL: number;\r\n    MSGESTURE_FLAG_INERTIA: number;\r\n    MSGESTURE_FLAG_NONE: number;\r\n}\r\n\r\ninterface ErrorEvent extends Event {\r\n    colno: number;\r\n    filename: string;\r\n    error: any;\r\n    lineno: number;\r\n    message: string;\r\n    initErrorEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, messageArg: string, filenameArg: string, linenoArg: number): void;\r\n}\r\ndeclare var ErrorEvent: {\r\n    prototype: ErrorEvent;\r\n    new(): ErrorEvent;\r\n}\r\n\r\ninterface SVGFilterElement extends SVGElement, SVGUnitTypes, SVGStylable, SVGLangSpace, SVGURIReference, SVGExternalResourcesRequired {\r\n    y: SVGAnimatedLength;\r\n    width: SVGAnimatedLength;\r\n    filterResX: SVGAnimatedInteger;\r\n    filterUnits: SVGAnimatedEnumeration;\r\n    primitiveUnits: SVGAnimatedEnumeration;\r\n    x: SVGAnimatedLength;\r\n    height: SVGAnimatedLength;\r\n    filterResY: SVGAnimatedInteger;\r\n    setFilterRes(filterResX: number, filterResY: number): void;\r\n}\r\ndeclare var SVGFilterElement: {\r\n    prototype: SVGFilterElement;\r\n    new(): SVGFilterElement;\r\n}\r\n\r\ninterface TrackEvent extends Event {\r\n    track: any;\r\n}\r\ndeclare var TrackEvent: {\r\n    prototype: TrackEvent;\r\n    new(): TrackEvent;\r\n}\r\n\r\ninterface SVGFEMergeNodeElement extends SVGElement {\r\n    in1: SVGAnimatedString;\r\n}\r\ndeclare var SVGFEMergeNodeElement: {\r\n    prototype: SVGFEMergeNodeElement;\r\n    new(): SVGFEMergeNodeElement;\r\n}\r\n\r\ninterface SVGFEFloodElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n}\r\ndeclare var SVGFEFloodElement: {\r\n    prototype: SVGFEFloodElement;\r\n    new(): SVGFEFloodElement;\r\n}\r\n\r\ninterface MSGesture {\r\n    target: Element;\r\n    addPointer(pointerId: number): void;\r\n    stop(): void;\r\n}\r\ndeclare var MSGesture: {\r\n    prototype: MSGesture;\r\n    new(): MSGesture;\r\n}\r\n\r\ninterface TextTrackCue extends EventTarget {\r\n    onenter: (ev: Event) => any;\r\n    track: TextTrack;\r\n    endTime: number;\r\n    text: string;\r\n    pauseOnExit: boolean;\r\n    id: string;\r\n    startTime: number;\r\n    onexit: (ev: Event) => any;\r\n    getCueAsHTML(): DocumentFragment;\r\n    addEventListener(type: \"enter\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"exit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var TextTrackCue: {\r\n    prototype: TextTrackCue;\r\n    new(startTime: number, endTime: number, text: string): TextTrackCue;\r\n}\r\n\r\ninterface MSStreamReader extends MSBaseReader {\r\n    error: DOMError;\r\n    readAsArrayBuffer(stream: MSStream, size?: number): void;\r\n    readAsBlob(stream: MSStream, size?: number): void;\r\n    readAsDataURL(stream: MSStream, size?: number): void;\r\n    readAsText(stream: MSStream, encoding?: string, size?: number): void;\r\n}\r\ndeclare var MSStreamReader: {\r\n    prototype: MSStreamReader;\r\n    new(): MSStreamReader;\r\n}\r\n\r\ninterface DOMTokenList {\r\n    length: number;\r\n    contains(token: string): boolean;\r\n    remove(token: string): void;\r\n    toggle(token: string): boolean;\r\n    add(token: string): void;\r\n    item(index: number): string;\r\n    [index: number]: string;\r\n    toString(): string;\r\n}\r\ndeclare var DOMTokenList: {\r\n    prototype: DOMTokenList;\r\n    new(): DOMTokenList;\r\n}\r\n\r\ninterface SVGFEFuncAElement extends SVGComponentTransferFunctionElement {\r\n}\r\ndeclare var SVGFEFuncAElement: {\r\n    prototype: SVGFEFuncAElement;\r\n    new(): SVGFEFuncAElement;\r\n}\r\n\r\ninterface SVGFETileElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    in1: SVGAnimatedString;\r\n}\r\ndeclare var SVGFETileElement: {\r\n    prototype: SVGFETileElement;\r\n    new(): SVGFETileElement;\r\n}\r\n\r\ninterface SVGFEBlendElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    in2: SVGAnimatedString;\r\n    mode: SVGAnimatedEnumeration;\r\n    in1: SVGAnimatedString;\r\n    SVG_FEBLEND_MODE_DARKEN: number;\r\n    SVG_FEBLEND_MODE_UNKNOWN: number;\r\n    SVG_FEBLEND_MODE_MULTIPLY: number;\r\n    SVG_FEBLEND_MODE_NORMAL: number;\r\n    SVG_FEBLEND_MODE_SCREEN: number;\r\n    SVG_FEBLEND_MODE_LIGHTEN: number;\r\n}\r\ndeclare var SVGFEBlendElement: {\r\n    prototype: SVGFEBlendElement;\r\n    new(): SVGFEBlendElement;\r\n    SVG_FEBLEND_MODE_DARKEN: number;\r\n    SVG_FEBLEND_MODE_UNKNOWN: number;\r\n    SVG_FEBLEND_MODE_MULTIPLY: number;\r\n    SVG_FEBLEND_MODE_NORMAL: number;\r\n    SVG_FEBLEND_MODE_SCREEN: number;\r\n    SVG_FEBLEND_MODE_LIGHTEN: number;\r\n}\r\n\r\ninterface MessageChannel {\r\n    port2: MessagePort;\r\n    port1: MessagePort;\r\n}\r\ndeclare var MessageChannel: {\r\n    prototype: MessageChannel;\r\n    new(): MessageChannel;\r\n}\r\n\r\ninterface SVGFEMergeElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n}\r\ndeclare var SVGFEMergeElement: {\r\n    prototype: SVGFEMergeElement;\r\n    new(): SVGFEMergeElement;\r\n}\r\n\r\ninterface TransitionEvent extends Event {\r\n    propertyName: string;\r\n    elapsedTime: number;\r\n    initTransitionEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, propertyNameArg: string, elapsedTimeArg: number): void;\r\n}\r\ndeclare var TransitionEvent: {\r\n    prototype: TransitionEvent;\r\n    new(): TransitionEvent;\r\n}\r\n\r\ninterface MediaQueryList {\r\n    matches: boolean;\r\n    media: string;\r\n    addListener(listener: MediaQueryListListener): void;\r\n    removeListener(listener: MediaQueryListListener): void;\r\n}\r\ndeclare var MediaQueryList: {\r\n    prototype: MediaQueryList;\r\n    new(): MediaQueryList;\r\n}\r\n\r\ninterface DOMError {\r\n    name: string;\r\n    toString(): string;\r\n}\r\ndeclare var DOMError: {\r\n    prototype: DOMError;\r\n    new(): DOMError;\r\n}\r\n\r\ninterface CloseEvent extends Event {\r\n    wasClean: boolean;\r\n    reason: string;\r\n    code: number;\r\n    initCloseEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, wasCleanArg: boolean, codeArg: number, reasonArg: string): void;\r\n}\r\ndeclare var CloseEvent: {\r\n    prototype: CloseEvent;\r\n    new(): CloseEvent;\r\n}\r\n\r\ninterface WebSocket extends EventTarget {\r\n    protocol: string;\r\n    readyState: number;\r\n    bufferedAmount: number;\r\n    onopen: (ev: Event) => any;\r\n    extensions: string;\r\n    onmessage: (ev: MessageEvent) => any;\r\n    onclose: (ev: CloseEvent) => any;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    binaryType: string;\r\n    url: string;\r\n    close(code?: number, reason?: string): void;\r\n    send(data: any): void;\r\n    OPEN: number;\r\n    CLOSING: number;\r\n    CONNECTING: number;\r\n    CLOSED: number;\r\n    addEventListener(type: \"open\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"close\", listener: (ev: CloseEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var WebSocket: {\r\n    prototype: WebSocket;\r\n    new(url: string, protocols?: string): WebSocket;\r\n    new(url: string, protocols?: string[]): WebSocket;\r\n    OPEN: number;\r\n    CLOSING: number;\r\n    CONNECTING: number;\r\n    CLOSED: number;\r\n}\r\n\r\ninterface SVGFEPointLightElement extends SVGElement {\r\n    y: SVGAnimatedNumber;\r\n    x: SVGAnimatedNumber;\r\n    z: SVGAnimatedNumber;\r\n}\r\ndeclare var SVGFEPointLightElement: {\r\n    prototype: SVGFEPointLightElement;\r\n    new(): SVGFEPointLightElement;\r\n}\r\n\r\ninterface ProgressEvent extends Event {\r\n    loaded: number;\r\n    lengthComputable: boolean;\r\n    total: number;\r\n    initProgressEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, lengthComputableArg: boolean, loadedArg: number, totalArg: number): void;\r\n}\r\ndeclare var ProgressEvent: {\r\n    prototype: ProgressEvent;\r\n    new(): ProgressEvent;\r\n}\r\n\r\ninterface IDBObjectStore {\r\n    indexNames: DOMStringList;\r\n    name: string;\r\n    transaction: IDBTransaction;\r\n    keyPath: string;\r\n    count(key?: any): IDBRequest;\r\n    add(value: any, key?: any): IDBRequest;\r\n    clear(): IDBRequest;\r\n    createIndex(name: string, keyPath: string, optionalParameters?: any): IDBIndex;\r\n    put(value: any, key?: any): IDBRequest;\r\n    openCursor(range?: any, direction?: string): IDBRequest;\r\n    deleteIndex(indexName: string): void;\r\n    index(name: string): IDBIndex;\r\n    get(key: any): IDBRequest;\r\n    delete(key: any): IDBRequest;\r\n}\r\ndeclare var IDBObjectStore: {\r\n    prototype: IDBObjectStore;\r\n    new(): IDBObjectStore;\r\n}\r\n\r\ninterface SVGFEGaussianBlurElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    stdDeviationX: SVGAnimatedNumber;\r\n    in1: SVGAnimatedString;\r\n    stdDeviationY: SVGAnimatedNumber;\r\n    setStdDeviation(stdDeviationX: number, stdDeviationY: number): void;\r\n}\r\ndeclare var SVGFEGaussianBlurElement: {\r\n    prototype: SVGFEGaussianBlurElement;\r\n    new(): SVGFEGaussianBlurElement;\r\n}\r\n\r\ninterface SVGFilterPrimitiveStandardAttributes extends SVGStylable {\r\n    y: SVGAnimatedLength;\r\n    width: SVGAnimatedLength;\r\n    x: SVGAnimatedLength;\r\n    height: SVGAnimatedLength;\r\n    result: SVGAnimatedString;\r\n}\r\n\r\ninterface IDBVersionChangeEvent extends Event {\r\n    newVersion: number;\r\n    oldVersion: number;\r\n}\r\ndeclare var IDBVersionChangeEvent: {\r\n    prototype: IDBVersionChangeEvent;\r\n    new(): IDBVersionChangeEvent;\r\n}\r\n\r\ninterface IDBIndex {\r\n    unique: boolean;\r\n    name: string;\r\n    keyPath: string;\r\n    objectStore: IDBObjectStore;\r\n    count(key?: any): IDBRequest;\r\n    getKey(key: any): IDBRequest;\r\n    openKeyCursor(range?: IDBKeyRange, direction?: string): IDBRequest;\r\n    get(key: any): IDBRequest;\r\n    openCursor(range?: IDBKeyRange, direction?: string): IDBRequest;\r\n}\r\ndeclare var IDBIndex: {\r\n    prototype: IDBIndex;\r\n    new(): IDBIndex;\r\n}\r\n\r\ninterface FileList {\r\n    length: number;\r\n    item(index: number): File;\r\n    [index: number]: File;\r\n}\r\ndeclare var FileList: {\r\n    prototype: FileList;\r\n    new(): FileList;\r\n}\r\n\r\ninterface IDBCursor {\r\n    source: any;\r\n    direction: string;\r\n    key: any;\r\n    primaryKey: any;\r\n    advance(count: number): void;\r\n    delete(): IDBRequest;\r\n    continue(key?: any): void;\r\n    update(value: any): IDBRequest;\r\n    PREV: string;\r\n    PREV_NO_DUPLICATE: string;\r\n    NEXT: string;\r\n    NEXT_NO_DUPLICATE: string;\r\n}\r\ndeclare var IDBCursor: {\r\n    prototype: IDBCursor;\r\n    new(): IDBCursor;\r\n    PREV: string;\r\n    PREV_NO_DUPLICATE: string;\r\n    NEXT: string;\r\n    NEXT_NO_DUPLICATE: string;\r\n}\r\n\r\ninterface SVGFESpecularLightingElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    kernelUnitLengthY: SVGAnimatedNumber;\r\n    surfaceScale: SVGAnimatedNumber;\r\n    specularExponent: SVGAnimatedNumber;\r\n    in1: SVGAnimatedString;\r\n    kernelUnitLengthX: SVGAnimatedNumber;\r\n    specularConstant: SVGAnimatedNumber;\r\n}\r\ndeclare var SVGFESpecularLightingElement: {\r\n    prototype: SVGFESpecularLightingElement;\r\n    new(): SVGFESpecularLightingElement;\r\n}\r\n\r\ninterface File extends Blob {\r\n    lastModifiedDate: any;\r\n    name: string;\r\n}\r\ndeclare var File: {\r\n    prototype: File;\r\n    new(): File;\r\n}\r\n\r\ninterface URL {\r\n    revokeObjectURL(url: string): void;\r\n    createObjectURL(object: any, options?: ObjectURLOptions): string;\r\n}\r\ndeclare var URL: URL;\r\n\r\ninterface IDBCursorWithValue extends IDBCursor {\r\n    value: any;\r\n}\r\ndeclare var IDBCursorWithValue: {\r\n    prototype: IDBCursorWithValue;\r\n    new(): IDBCursorWithValue;\r\n}\r\n\r\ninterface XMLHttpRequestEventTarget extends EventTarget {\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    onload: (ev: Event) => any;\r\n    ontimeout: (ev: Event) => any;\r\n    onabort: (ev: UIEvent) => any;\r\n    onloadstart: (ev: Event) => any;\r\n    onloadend: (ev: ProgressEvent) => any;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"timeout\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadend\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var XMLHttpRequestEventTarget: {\r\n    prototype: XMLHttpRequestEventTarget;\r\n    new(): XMLHttpRequestEventTarget;\r\n}\r\n\r\ninterface IDBEnvironment {\r\n    msIndexedDB: IDBFactory;\r\n    indexedDB: IDBFactory;\r\n}\r\n\r\ninterface AudioTrackList extends EventTarget {\r\n    length: number;\r\n    onchange: (ev: Event) => any;\r\n    onaddtrack: (ev: TrackEvent) => any;\r\n    onremovetrack: (ev: any /*PluginArray*/) => any;\r\n    getTrackById(id: string): AudioTrack;\r\n    item(index: number): AudioTrack;\r\n    [index: number]: AudioTrack;\r\n    addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"addtrack\", listener: (ev: TrackEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"removetrack\", listener: (ev: any /*PluginArray*/) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var AudioTrackList: {\r\n    prototype: AudioTrackList;\r\n    new(): AudioTrackList;\r\n}\r\n\r\ninterface MSBaseReader extends EventTarget {\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    readyState: number;\r\n    onabort: (ev: UIEvent) => any;\r\n    onloadend: (ev: ProgressEvent) => any;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    onload: (ev: Event) => any;\r\n    onloadstart: (ev: Event) => any;\r\n    result: any;\r\n    abort(): void;\r\n    LOADING: number;\r\n    EMPTY: number;\r\n    DONE: number;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadend\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\n\r\ninterface SVGFEMorphologyElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    operator: SVGAnimatedEnumeration;\r\n    radiusX: SVGAnimatedNumber;\r\n    radiusY: SVGAnimatedNumber;\r\n    in1: SVGAnimatedString;\r\n    SVG_MORPHOLOGY_OPERATOR_UNKNOWN: number;\r\n    SVG_MORPHOLOGY_OPERATOR_ERODE: number;\r\n    SVG_MORPHOLOGY_OPERATOR_DILATE: number;\r\n}\r\ndeclare var SVGFEMorphologyElement: {\r\n    prototype: SVGFEMorphologyElement;\r\n    new(): SVGFEMorphologyElement;\r\n    SVG_MORPHOLOGY_OPERATOR_UNKNOWN: number;\r\n    SVG_MORPHOLOGY_OPERATOR_ERODE: number;\r\n    SVG_MORPHOLOGY_OPERATOR_DILATE: number;\r\n}\r\n\r\ninterface SVGFEFuncRElement extends SVGComponentTransferFunctionElement {\r\n}\r\ndeclare var SVGFEFuncRElement: {\r\n    prototype: SVGFEFuncRElement;\r\n    new(): SVGFEFuncRElement;\r\n}\r\n\r\ninterface WindowTimersExtension {\r\n    msSetImmediate(expression: any, ...args: any[]): number;\r\n    clearImmediate(handle: number): void;\r\n    msClearImmediate(handle: number): void;\r\n    setImmediate(expression: any, ...args: any[]): number;\r\n}\r\n\r\ninterface SVGFEDisplacementMapElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    in2: SVGAnimatedString;\r\n    xChannelSelector: SVGAnimatedEnumeration;\r\n    yChannelSelector: SVGAnimatedEnumeration;\r\n    scale: SVGAnimatedNumber;\r\n    in1: SVGAnimatedString;\r\n    SVG_CHANNEL_B: number;\r\n    SVG_CHANNEL_R: number;\r\n    SVG_CHANNEL_G: number;\r\n    SVG_CHANNEL_UNKNOWN: number;\r\n    SVG_CHANNEL_A: number;\r\n}\r\ndeclare var SVGFEDisplacementMapElement: {\r\n    prototype: SVGFEDisplacementMapElement;\r\n    new(): SVGFEDisplacementMapElement;\r\n    SVG_CHANNEL_B: number;\r\n    SVG_CHANNEL_R: number;\r\n    SVG_CHANNEL_G: number;\r\n    SVG_CHANNEL_UNKNOWN: number;\r\n    SVG_CHANNEL_A: number;\r\n}\r\n\r\ninterface AnimationEvent extends Event {\r\n    animationName: string;\r\n    elapsedTime: number;\r\n    initAnimationEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, animationNameArg: string, elapsedTimeArg: number): void;\r\n}\r\ndeclare var AnimationEvent: {\r\n    prototype: AnimationEvent;\r\n    new(): AnimationEvent;\r\n}\r\n\r\ninterface SVGComponentTransferFunctionElement extends SVGElement {\r\n    tableValues: SVGAnimatedNumberList;\r\n    slope: SVGAnimatedNumber;\r\n    type: SVGAnimatedEnumeration;\r\n    exponent: SVGAnimatedNumber;\r\n    amplitude: SVGAnimatedNumber;\r\n    intercept: SVGAnimatedNumber;\r\n    offset: SVGAnimatedNumber;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_TABLE: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: number;\r\n}\r\ndeclare var SVGComponentTransferFunctionElement: {\r\n    prototype: SVGComponentTransferFunctionElement;\r\n    new(): SVGComponentTransferFunctionElement;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_TABLE: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_GAMMA: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE: number;\r\n    SVG_FECOMPONENTTRANSFER_TYPE_LINEAR: number;\r\n}\r\n\r\ninterface MSRangeCollection {\r\n    length: number;\r\n    item(index: number): Range;\r\n    [index: number]: Range;\r\n}\r\ndeclare var MSRangeCollection: {\r\n    prototype: MSRangeCollection;\r\n    new(): MSRangeCollection;\r\n}\r\n\r\ninterface SVGFEDistantLightElement extends SVGElement {\r\n    azimuth: SVGAnimatedNumber;\r\n    elevation: SVGAnimatedNumber;\r\n}\r\ndeclare var SVGFEDistantLightElement: {\r\n    prototype: SVGFEDistantLightElement;\r\n    new(): SVGFEDistantLightElement;\r\n}\r\n\r\ninterface SVGFEFuncBElement extends SVGComponentTransferFunctionElement {\r\n}\r\ndeclare var SVGFEFuncBElement: {\r\n    prototype: SVGFEFuncBElement;\r\n    new(): SVGFEFuncBElement;\r\n}\r\n\r\ninterface IDBKeyRange {\r\n    upper: any;\r\n    upperOpen: boolean;\r\n    lower: any;\r\n    lowerOpen: boolean;\r\n}\r\ndeclare var IDBKeyRange: {\r\n    prototype: IDBKeyRange;\r\n    new(): IDBKeyRange;\r\n    bound(lower: any, upper: any, lowerOpen?: boolean, upperOpen?: boolean): IDBKeyRange;\r\n    only(value: any): IDBKeyRange;\r\n    lowerBound(bound: any, open?: boolean): IDBKeyRange;\r\n    upperBound(bound: any, open?: boolean): IDBKeyRange;\r\n}\r\n\r\ninterface WindowConsole {\r\n    console: Console;\r\n}\r\n\r\ninterface IDBTransaction extends EventTarget {\r\n    oncomplete: (ev: Event) => any;\r\n    db: IDBDatabase;\r\n    mode: string;\r\n    error: DOMError;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    onabort: (ev: UIEvent) => any;\r\n    abort(): void;\r\n    objectStore(name: string): IDBObjectStore;\r\n    READ_ONLY: string;\r\n    VERSION_CHANGE: string;\r\n    READ_WRITE: string;\r\n    addEventListener(type: \"complete\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var IDBTransaction: {\r\n    prototype: IDBTransaction;\r\n    new(): IDBTransaction;\r\n    READ_ONLY: string;\r\n    VERSION_CHANGE: string;\r\n    READ_WRITE: string;\r\n}\r\n\r\ninterface AudioTrack {\r\n    kind: string;\r\n    language: string;\r\n    id: string;\r\n    label: string;\r\n    enabled: boolean;\r\n    sourceBuffer: SourceBuffer;\r\n}\r\ndeclare var AudioTrack: {\r\n    prototype: AudioTrack;\r\n    new(): AudioTrack;\r\n}\r\n\r\ninterface SVGFEConvolveMatrixElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    orderY: SVGAnimatedInteger;\r\n    kernelUnitLengthY: SVGAnimatedNumber;\r\n    orderX: SVGAnimatedInteger;\r\n    preserveAlpha: SVGAnimatedBoolean;\r\n    kernelMatrix: SVGAnimatedNumberList;\r\n    edgeMode: SVGAnimatedEnumeration;\r\n    kernelUnitLengthX: SVGAnimatedNumber;\r\n    bias: SVGAnimatedNumber;\r\n    targetX: SVGAnimatedInteger;\r\n    targetY: SVGAnimatedInteger;\r\n    divisor: SVGAnimatedNumber;\r\n    in1: SVGAnimatedString;\r\n    SVG_EDGEMODE_WRAP: number;\r\n    SVG_EDGEMODE_DUPLICATE: number;\r\n    SVG_EDGEMODE_UNKNOWN: number;\r\n    SVG_EDGEMODE_NONE: number;\r\n}\r\ndeclare var SVGFEConvolveMatrixElement: {\r\n    prototype: SVGFEConvolveMatrixElement;\r\n    new(): SVGFEConvolveMatrixElement;\r\n    SVG_EDGEMODE_WRAP: number;\r\n    SVG_EDGEMODE_DUPLICATE: number;\r\n    SVG_EDGEMODE_UNKNOWN: number;\r\n    SVG_EDGEMODE_NONE: number;\r\n}\r\n\r\ninterface TextTrackCueList {\r\n    length: number;\r\n    item(index: number): TextTrackCue;\r\n    [index: number]: TextTrackCue;\r\n    getCueById(id: string): TextTrackCue;\r\n}\r\ndeclare var TextTrackCueList: {\r\n    prototype: TextTrackCueList;\r\n    new(): TextTrackCueList;\r\n}\r\n\r\ninterface CSSKeyframesRule extends CSSRule {\r\n    name: string;\r\n    cssRules: CSSRuleList;\r\n    findRule(rule: string): CSSKeyframeRule;\r\n    deleteRule(rule: string): void;\r\n    appendRule(rule: string): void;\r\n}\r\ndeclare var CSSKeyframesRule: {\r\n    prototype: CSSKeyframesRule;\r\n    new(): CSSKeyframesRule;\r\n}\r\n\r\ninterface SVGFETurbulenceElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    baseFrequencyX: SVGAnimatedNumber;\r\n    numOctaves: SVGAnimatedInteger;\r\n    type: SVGAnimatedEnumeration;\r\n    baseFrequencyY: SVGAnimatedNumber;\r\n    stitchTiles: SVGAnimatedEnumeration;\r\n    seed: SVGAnimatedNumber;\r\n    SVG_STITCHTYPE_UNKNOWN: number;\r\n    SVG_STITCHTYPE_NOSTITCH: number;\r\n    SVG_TURBULENCE_TYPE_UNKNOWN: number;\r\n    SVG_TURBULENCE_TYPE_TURBULENCE: number;\r\n    SVG_TURBULENCE_TYPE_FRACTALNOISE: number;\r\n    SVG_STITCHTYPE_STITCH: number;\r\n}\r\ndeclare var SVGFETurbulenceElement: {\r\n    prototype: SVGFETurbulenceElement;\r\n    new(): SVGFETurbulenceElement;\r\n    SVG_STITCHTYPE_UNKNOWN: number;\r\n    SVG_STITCHTYPE_NOSTITCH: number;\r\n    SVG_TURBULENCE_TYPE_UNKNOWN: number;\r\n    SVG_TURBULENCE_TYPE_TURBULENCE: number;\r\n    SVG_TURBULENCE_TYPE_FRACTALNOISE: number;\r\n    SVG_STITCHTYPE_STITCH: number;\r\n}\r\n\r\ninterface TextTrackList extends EventTarget {\r\n    length: number;\r\n    onaddtrack: (ev: TrackEvent) => any;\r\n    item(index: number): TextTrack;\r\n    [index: number]: TextTrack;\r\n    addEventListener(type: \"addtrack\", listener: (ev: TrackEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var TextTrackList: {\r\n    prototype: TextTrackList;\r\n    new(): TextTrackList;\r\n}\r\n\r\ninterface SVGFEFuncGElement extends SVGComponentTransferFunctionElement {\r\n}\r\ndeclare var SVGFEFuncGElement: {\r\n    prototype: SVGFEFuncGElement;\r\n    new(): SVGFEFuncGElement;\r\n}\r\n\r\ninterface SVGFEColorMatrixElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    in1: SVGAnimatedString;\r\n    type: SVGAnimatedEnumeration;\r\n    values: SVGAnimatedNumberList;\r\n    SVG_FECOLORMATRIX_TYPE_SATURATE: number;\r\n    SVG_FECOLORMATRIX_TYPE_UNKNOWN: number;\r\n    SVG_FECOLORMATRIX_TYPE_MATRIX: number;\r\n    SVG_FECOLORMATRIX_TYPE_HUEROTATE: number;\r\n    SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: number;\r\n}\r\ndeclare var SVGFEColorMatrixElement: {\r\n    prototype: SVGFEColorMatrixElement;\r\n    new(): SVGFEColorMatrixElement;\r\n    SVG_FECOLORMATRIX_TYPE_SATURATE: number;\r\n    SVG_FECOLORMATRIX_TYPE_UNKNOWN: number;\r\n    SVG_FECOLORMATRIX_TYPE_MATRIX: number;\r\n    SVG_FECOLORMATRIX_TYPE_HUEROTATE: number;\r\n    SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA: number;\r\n}\r\n\r\ninterface SVGFESpotLightElement extends SVGElement {\r\n    pointsAtY: SVGAnimatedNumber;\r\n    y: SVGAnimatedNumber;\r\n    limitingConeAngle: SVGAnimatedNumber;\r\n    specularExponent: SVGAnimatedNumber;\r\n    x: SVGAnimatedNumber;\r\n    pointsAtZ: SVGAnimatedNumber;\r\n    z: SVGAnimatedNumber;\r\n    pointsAtX: SVGAnimatedNumber;\r\n}\r\ndeclare var SVGFESpotLightElement: {\r\n    prototype: SVGFESpotLightElement;\r\n    new(): SVGFESpotLightElement;\r\n}\r\n\r\ninterface WindowBase64 {\r\n    btoa(rawString: string): string;\r\n    atob(encodedString: string): string;\r\n}\r\n\r\ninterface IDBDatabase extends EventTarget {\r\n    version: string;\r\n    name: string;\r\n    objectStoreNames: DOMStringList;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    onabort: (ev: UIEvent) => any;\r\n    createObjectStore(name: string, optionalParameters?: any): IDBObjectStore;\r\n    close(): void;\r\n    transaction(storeNames: any, mode?: string): IDBTransaction;\r\n    deleteObjectStore(name: string): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var IDBDatabase: {\r\n    prototype: IDBDatabase;\r\n    new(): IDBDatabase;\r\n}\r\n\r\ninterface DOMStringList {\r\n    length: number;\r\n    contains(str: string): boolean;\r\n    item(index: number): string;\r\n    [index: number]: string;\r\n}\r\ndeclare var DOMStringList: {\r\n    prototype: DOMStringList;\r\n    new(): DOMStringList;\r\n}\r\n\r\ninterface IDBOpenDBRequest extends IDBRequest {\r\n    onupgradeneeded: (ev: IDBVersionChangeEvent) => any;\r\n    onblocked: (ev: Event) => any;\r\n    addEventListener(type: \"success\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"upgradeneeded\", listener: (ev: IDBVersionChangeEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"blocked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var IDBOpenDBRequest: {\r\n    prototype: IDBOpenDBRequest;\r\n    new(): IDBOpenDBRequest;\r\n}\r\n\r\ninterface HTMLProgressElement extends HTMLElement {\r\n    /**\r\n      * Sets or gets the current value of a progress element. The value must be a non-negative number between 0 and the max value.\r\n      */\r\n    value: number;\r\n    /**\r\n      * Defines the maximum, or \"done\" value for a progress element.\r\n      */\r\n    max: number;\r\n    /**\r\n      * Returns the quotient of value/max when the value attribute is set (determinate progress bar), or -1 when the value attribute is missing (indeterminate progress bar).\r\n      */\r\n    position: number;\r\n    /**\r\n      * Retrieves a reference to the form that the object is embedded in.\r\n      */\r\n    form: HTMLFormElement;\r\n}\r\ndeclare var HTMLProgressElement: {\r\n    prototype: HTMLProgressElement;\r\n    new(): HTMLProgressElement;\r\n}\r\n\r\ninterface MSLaunchUriCallback {\r\n    (): void;\r\n}\r\n\r\ninterface SVGFEOffsetElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    dy: SVGAnimatedNumber;\r\n    in1: SVGAnimatedString;\r\n    dx: SVGAnimatedNumber;\r\n}\r\ndeclare var SVGFEOffsetElement: {\r\n    prototype: SVGFEOffsetElement;\r\n    new(): SVGFEOffsetElement;\r\n}\r\n\r\ninterface MSUnsafeFunctionCallback {\r\n    (): any;\r\n}\r\n\r\ninterface TextTrack extends EventTarget {\r\n    language: string;\r\n    mode: any;\r\n    readyState: number;\r\n    activeCues: TextTrackCueList;\r\n    cues: TextTrackCueList;\r\n    oncuechange: (ev: Event) => any;\r\n    kind: string;\r\n    onload: (ev: Event) => any;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    label: string;\r\n    addCue(cue: TextTrackCue): void;\r\n    removeCue(cue: TextTrackCue): void;\r\n    ERROR: number;\r\n    SHOWING: number;\r\n    LOADING: number;\r\n    LOADED: number;\r\n    NONE: number;\r\n    HIDDEN: number;\r\n    DISABLED: number;\r\n    addEventListener(type: \"cuechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var TextTrack: {\r\n    prototype: TextTrack;\r\n    new(): TextTrack;\r\n    ERROR: number;\r\n    SHOWING: number;\r\n    LOADING: number;\r\n    LOADED: number;\r\n    NONE: number;\r\n    HIDDEN: number;\r\n    DISABLED: number;\r\n}\r\n\r\ninterface MediaQueryListListener {\r\n    (mql: MediaQueryList): void;\r\n}\r\n\r\ninterface IDBRequest extends EventTarget {\r\n    source: any;\r\n    onsuccess: (ev: Event) => any;\r\n    error: DOMError;\r\n    transaction: IDBTransaction;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    readyState: string;\r\n    result: any;\r\n    addEventListener(type: \"success\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var IDBRequest: {\r\n    prototype: IDBRequest;\r\n    new(): IDBRequest;\r\n}\r\n\r\ninterface MessagePort extends EventTarget {\r\n    onmessage: (ev: MessageEvent) => any;\r\n    close(): void;\r\n    postMessage(message?: any, ports?: any): void;\r\n    start(): void;\r\n    addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var MessagePort: {\r\n    prototype: MessagePort;\r\n    new(): MessagePort;\r\n}\r\n\r\ninterface FileReader extends MSBaseReader {\r\n    error: DOMError;\r\n    readAsArrayBuffer(blob: Blob): void;\r\n    readAsDataURL(blob: Blob): void;\r\n    readAsText(blob: Blob, encoding?: string): void;\r\n}\r\ndeclare var FileReader: {\r\n    prototype: FileReader;\r\n    new(): FileReader;\r\n}\r\n\r\ninterface ApplicationCache extends EventTarget {\r\n    status: number;\r\n    ondownloading: (ev: Event) => any;\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    onupdateready: (ev: Event) => any;\r\n    oncached: (ev: Event) => any;\r\n    onobsolete: (ev: Event) => any;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    onchecking: (ev: Event) => any;\r\n    onnoupdate: (ev: Event) => any;\r\n    swapCache(): void;\r\n    abort(): void;\r\n    update(): void;\r\n    CHECKING: number;\r\n    UNCACHED: number;\r\n    UPDATEREADY: number;\r\n    DOWNLOADING: number;\r\n    IDLE: number;\r\n    OBSOLETE: number;\r\n    addEventListener(type: \"downloading\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"updateready\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"cached\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"obsolete\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"checking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"noupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var ApplicationCache: {\r\n    prototype: ApplicationCache;\r\n    new(): ApplicationCache;\r\n    CHECKING: number;\r\n    UNCACHED: number;\r\n    UPDATEREADY: number;\r\n    DOWNLOADING: number;\r\n    IDLE: number;\r\n    OBSOLETE: number;\r\n}\r\n\r\ninterface FrameRequestCallback {\r\n    (time: number): void;\r\n}\r\n\r\ninterface PopStateEvent extends Event {\r\n    state: any;\r\n    initPopStateEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, stateArg: any): void;\r\n}\r\ndeclare var PopStateEvent: {\r\n    prototype: PopStateEvent;\r\n    new(): PopStateEvent;\r\n}\r\n\r\ninterface CSSKeyframeRule extends CSSRule {\r\n    keyText: string;\r\n    style: CSSStyleDeclaration;\r\n}\r\ndeclare var CSSKeyframeRule: {\r\n    prototype: CSSKeyframeRule;\r\n    new(): CSSKeyframeRule;\r\n}\r\n\r\ninterface MSFileSaver {\r\n    msSaveBlob(blob: any, defaultName?: string): boolean;\r\n    msSaveOrOpenBlob(blob: any, defaultName?: string): boolean;\r\n}\r\n\r\ninterface MSStream {\r\n    type: string;\r\n    msDetachStream(): any;\r\n    msClose(): void;\r\n}\r\ndeclare var MSStream: {\r\n    prototype: MSStream;\r\n    new(): MSStream;\r\n}\r\n\r\ninterface MSBlobBuilder {\r\n    append(data: any, endings?: string): void;\r\n    getBlob(contentType?: string): Blob;\r\n}\r\ndeclare var MSBlobBuilder: {\r\n    prototype: MSBlobBuilder;\r\n    new(): MSBlobBuilder;\r\n}\r\n\r\ninterface DOMSettableTokenList extends DOMTokenList {\r\n    value: string;\r\n}\r\ndeclare var DOMSettableTokenList: {\r\n    prototype: DOMSettableTokenList;\r\n    new(): DOMSettableTokenList;\r\n}\r\n\r\ninterface IDBFactory {\r\n    open(name: string, version?: number): IDBOpenDBRequest;\r\n    cmp(first: any, second: any): number;\r\n    deleteDatabase(name: string): IDBOpenDBRequest;\r\n}\r\ndeclare var IDBFactory: {\r\n    prototype: IDBFactory;\r\n    new(): IDBFactory;\r\n}\r\n\r\ninterface MSPointerEvent extends MouseEvent {\r\n    width: number;\r\n    rotation: number;\r\n    pressure: number;\r\n    pointerType: any;\r\n    isPrimary: boolean;\r\n    tiltY: number;\r\n    height: number;\r\n    intermediatePoints: any;\r\n    currentPoint: any;\r\n    tiltX: number;\r\n    hwTimestamp: number;\r\n    pointerId: number;\r\n    initPointerEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, offsetXArg: number, offsetYArg: number, widthArg: number, heightArg: number, pressure: number, rotation: number, tiltX: number, tiltY: number, pointerIdArg: number, pointerType: any, hwTimestampArg: number, isPrimary: boolean): void;\r\n    getCurrentPoint(element: Element): void;\r\n    getIntermediatePoints(element: Element): void;\r\n    MSPOINTER_TYPE_PEN: number;\r\n    MSPOINTER_TYPE_MOUSE: number;\r\n    MSPOINTER_TYPE_TOUCH: number;\r\n}\r\ndeclare var MSPointerEvent: {\r\n    prototype: MSPointerEvent;\r\n    new(): MSPointerEvent;\r\n    MSPOINTER_TYPE_PEN: number;\r\n    MSPOINTER_TYPE_MOUSE: number;\r\n    MSPOINTER_TYPE_TOUCH: number;\r\n}\r\n\r\ninterface MSManipulationEvent extends UIEvent {\r\n    lastState: number;\r\n    currentState: number;\r\n    initMSManipulationEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, lastState: number, currentState: number): void;\r\n    MS_MANIPULATION_STATE_STOPPED: number;\r\n    MS_MANIPULATION_STATE_ACTIVE: number;\r\n    MS_MANIPULATION_STATE_INERTIA: number;\r\n    MS_MANIPULATION_STATE_SELECTING: number;\r\n    MS_MANIPULATION_STATE_COMMITTED: number;\r\n    MS_MANIPULATION_STATE_PRESELECT: number;\r\n    MS_MANIPULATION_STATE_DRAGGING: number;\r\n    MS_MANIPULATION_STATE_CANCELLED: number;\r\n}\r\ndeclare var MSManipulationEvent: {\r\n    prototype: MSManipulationEvent;\r\n    new(): MSManipulationEvent;\r\n    MS_MANIPULATION_STATE_STOPPED: number;\r\n    MS_MANIPULATION_STATE_ACTIVE: number;\r\n    MS_MANIPULATION_STATE_INERTIA: number;\r\n    MS_MANIPULATION_STATE_SELECTING: number;\r\n    MS_MANIPULATION_STATE_COMMITTED: number;\r\n    MS_MANIPULATION_STATE_PRESELECT: number;\r\n    MS_MANIPULATION_STATE_DRAGGING: number;\r\n    MS_MANIPULATION_STATE_CANCELLED: number;\r\n}\r\n\r\ninterface FormData {\r\n    append(name: any, value: any, blobName?: string): void;\r\n}\r\ndeclare var FormData: {\r\n    prototype: FormData;\r\n    new(): FormData;\r\n}\r\n\r\ninterface HTMLDataListElement extends HTMLElement {\r\n    options: HTMLCollection;\r\n}\r\ndeclare var HTMLDataListElement: {\r\n    prototype: HTMLDataListElement;\r\n    new(): HTMLDataListElement;\r\n}\r\n\r\ninterface SVGFEImageElement extends SVGElement, SVGLangSpace, SVGFilterPrimitiveStandardAttributes, SVGURIReference, SVGExternalResourcesRequired {\r\n    preserveAspectRatio: SVGAnimatedPreserveAspectRatio;\r\n}\r\ndeclare var SVGFEImageElement: {\r\n    prototype: SVGFEImageElement;\r\n    new(): SVGFEImageElement;\r\n}\r\n\r\ninterface AbstractWorker extends EventTarget {\r\n    onerror: (ev: ErrorEvent) => any;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\n\r\ninterface SVGFECompositeElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    operator: SVGAnimatedEnumeration;\r\n    in2: SVGAnimatedString;\r\n    k2: SVGAnimatedNumber;\r\n    k1: SVGAnimatedNumber;\r\n    k3: SVGAnimatedNumber;\r\n    in1: SVGAnimatedString;\r\n    k4: SVGAnimatedNumber;\r\n    SVG_FECOMPOSITE_OPERATOR_OUT: number;\r\n    SVG_FECOMPOSITE_OPERATOR_OVER: number;\r\n    SVG_FECOMPOSITE_OPERATOR_XOR: number;\r\n    SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: number;\r\n    SVG_FECOMPOSITE_OPERATOR_UNKNOWN: number;\r\n    SVG_FECOMPOSITE_OPERATOR_IN: number;\r\n    SVG_FECOMPOSITE_OPERATOR_ATOP: number;\r\n}\r\ndeclare var SVGFECompositeElement: {\r\n    prototype: SVGFECompositeElement;\r\n    new(): SVGFECompositeElement;\r\n    SVG_FECOMPOSITE_OPERATOR_OUT: number;\r\n    SVG_FECOMPOSITE_OPERATOR_OVER: number;\r\n    SVG_FECOMPOSITE_OPERATOR_XOR: number;\r\n    SVG_FECOMPOSITE_OPERATOR_ARITHMETIC: number;\r\n    SVG_FECOMPOSITE_OPERATOR_UNKNOWN: number;\r\n    SVG_FECOMPOSITE_OPERATOR_IN: number;\r\n    SVG_FECOMPOSITE_OPERATOR_ATOP: number;\r\n}\r\n\r\ninterface ValidityState {\r\n    customError: boolean;\r\n    valueMissing: boolean;\r\n    stepMismatch: boolean;\r\n    rangeUnderflow: boolean;\r\n    rangeOverflow: boolean;\r\n    typeMismatch: boolean;\r\n    patternMismatch: boolean;\r\n    tooLong: boolean;\r\n    valid: boolean;\r\n}\r\ndeclare var ValidityState: {\r\n    prototype: ValidityState;\r\n    new(): ValidityState;\r\n}\r\n\r\ninterface HTMLTrackElement extends HTMLElement {\r\n    kind: string;\r\n    src: string;\r\n    srclang: string;\r\n    track: TextTrack;\r\n    label: string;\r\n    default: boolean;\r\n    readyState: number;\r\n    ERROR: number;\r\n    LOADING: number;\r\n    LOADED: number;\r\n    NONE: number;\r\n}\r\ndeclare var HTMLTrackElement: {\r\n    prototype: HTMLTrackElement;\r\n    new(): HTMLTrackElement;\r\n    ERROR: number;\r\n    LOADING: number;\r\n    LOADED: number;\r\n    NONE: number;\r\n}\r\n\r\ninterface MSApp {\r\n    createFileFromStorageFile(storageFile: any): File;\r\n    createBlobFromRandomAccessStream(type: string, seeker: any): Blob;\r\n    createStreamFromInputStream(type: string, inputStream: any): MSStream;\r\n    terminateApp(exceptionObject: any): void;\r\n    createDataPackage(object: any): any;\r\n    execUnsafeLocalFunction(unsafeFunction: MSUnsafeFunctionCallback): any;\r\n    getHtmlPrintDocumentSource(htmlDoc: any): any;\r\n    addPublicLocalApplicationUri(uri: string): void;\r\n    createDataPackageFromSelection(): any;\r\n    getViewOpener(): MSAppView;\r\n    suppressSubdownloadCredentialPrompts(suppress: boolean): void;\r\n    execAsyncAtPriority(asynchronousCallback: MSExecAtPriorityFunctionCallback, priority: string, ...args: any[]): void;\r\n    isTaskScheduledAtPriorityOrHigher(priority: string): boolean;\r\n    execAtPriority(synchronousCallback: MSExecAtPriorityFunctionCallback, priority: string, ...args: any[]): any;\r\n    createNewView(uri: string): MSAppView;\r\n    getCurrentPriority(): string;\r\n    NORMAL: string;\r\n    HIGH: string;\r\n    IDLE: string;\r\n    CURRENT: string;\r\n}\r\ndeclare var MSApp: MSApp;\r\n\r\ninterface SVGFEComponentTransferElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    in1: SVGAnimatedString;\r\n}\r\ndeclare var SVGFEComponentTransferElement: {\r\n    prototype: SVGFEComponentTransferElement;\r\n    new(): SVGFEComponentTransferElement;\r\n}\r\n\r\ninterface SVGFEDiffuseLightingElement extends SVGElement, SVGFilterPrimitiveStandardAttributes {\r\n    kernelUnitLengthY: SVGAnimatedNumber;\r\n    surfaceScale: SVGAnimatedNumber;\r\n    in1: SVGAnimatedString;\r\n    kernelUnitLengthX: SVGAnimatedNumber;\r\n    diffuseConstant: SVGAnimatedNumber;\r\n}\r\ndeclare var SVGFEDiffuseLightingElement: {\r\n    prototype: SVGFEDiffuseLightingElement;\r\n    new(): SVGFEDiffuseLightingElement;\r\n}\r\n\r\ninterface MSCSSMatrix {\r\n    m24: number;\r\n    m34: number;\r\n    a: number;\r\n    d: number;\r\n    m32: number;\r\n    m41: number;\r\n    m11: number;\r\n    f: number;\r\n    e: number;\r\n    m23: number;\r\n    m14: number;\r\n    m33: number;\r\n    m22: number;\r\n    m21: number;\r\n    c: number;\r\n    m12: number;\r\n    b: number;\r\n    m42: number;\r\n    m31: number;\r\n    m43: number;\r\n    m13: number;\r\n    m44: number;\r\n    multiply(secondMatrix: MSCSSMatrix): MSCSSMatrix;\r\n    skewY(angle: number): MSCSSMatrix;\r\n    setMatrixValue(value: string): void;\r\n    inverse(): MSCSSMatrix;\r\n    rotateAxisAngle(x: number, y: number, z: number, angle: number): MSCSSMatrix;\r\n    toString(): string;\r\n    rotate(angleX: number, angleY?: number, angleZ?: number): MSCSSMatrix;\r\n    translate(x: number, y: number, z?: number): MSCSSMatrix;\r\n    scale(scaleX: number, scaleY?: number, scaleZ?: number): MSCSSMatrix;\r\n    skewX(angle: number): MSCSSMatrix;\r\n}\r\ndeclare var MSCSSMatrix: {\r\n    prototype: MSCSSMatrix;\r\n    new(text?: string): MSCSSMatrix;\r\n}\r\n\r\ninterface Worker extends AbstractWorker {\r\n    onmessage: (ev: MessageEvent) => any;\r\n    postMessage(message: any, ports?: any): void;\r\n    terminate(): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var Worker: {\r\n    prototype: Worker;\r\n    new(stringUrl: string): Worker;\r\n}\r\n\r\ninterface MSExecAtPriorityFunctionCallback {\r\n    (...args: any[]): any;\r\n}\r\n\r\ninterface MSGraphicsTrust {\r\n    status: string;\r\n    constrictionActive: boolean;\r\n}\r\ndeclare var MSGraphicsTrust: {\r\n    prototype: MSGraphicsTrust;\r\n    new(): MSGraphicsTrust;\r\n}\r\n\r\ninterface SubtleCrypto {\r\n    unwrapKey(wrappedKey: ArrayBufferView, keyAlgorithm: any, keyEncryptionKey: Key, extractable?: boolean, keyUsages?: string[]): KeyOperation;\r\n    encrypt(algorithm: any, key: Key, buffer?: ArrayBufferView): CryptoOperation;\r\n    importKey(format: string, keyData: ArrayBufferView, algorithm: any, extractable?: boolean, keyUsages?: string[]): KeyOperation;\r\n    wrapKey(key: Key, keyEncryptionKey: Key, keyWrappingAlgorithm: any): KeyOperation;\r\n    verify(algorithm: any, key: Key, signature: ArrayBufferView, buffer?: ArrayBufferView): CryptoOperation;\r\n    deriveKey(algorithm: any, baseKey: Key, derivedKeyType: any, extractable?: boolean, keyUsages?: string[]): KeyOperation;\r\n    digest(algorithm: any, buffer?: ArrayBufferView): CryptoOperation;\r\n    exportKey(format: string, key: Key): KeyOperation;\r\n    generateKey(algorithm: any, extractable?: boolean, keyUsages?: string[]): KeyOperation;\r\n    sign(algorithm: any, key: Key, buffer?: ArrayBufferView): CryptoOperation;\r\n    decrypt(algorithm: any, key: Key, buffer?: ArrayBufferView): CryptoOperation;\r\n}\r\ndeclare var SubtleCrypto: {\r\n    prototype: SubtleCrypto;\r\n    new(): SubtleCrypto;\r\n}\r\n\r\ninterface Crypto extends RandomSource {\r\n    subtle: SubtleCrypto;\r\n}\r\ndeclare var Crypto: {\r\n    prototype: Crypto;\r\n    new(): Crypto;\r\n}\r\n\r\ninterface VideoPlaybackQuality {\r\n    totalFrameDelay: number;\r\n    creationTime: number;\r\n    totalVideoFrames: number;\r\n    droppedVideoFrames: number;\r\n}\r\ndeclare var VideoPlaybackQuality: {\r\n    prototype: VideoPlaybackQuality;\r\n    new(): VideoPlaybackQuality;\r\n}\r\n\r\ninterface GlobalEventHandlers {\r\n    onpointerenter: (ev: PointerEvent) => any;\r\n    onpointerout: (ev: PointerEvent) => any;\r\n    onpointerdown: (ev: PointerEvent) => any;\r\n    onpointerup: (ev: PointerEvent) => any;\r\n    onpointercancel: (ev: PointerEvent) => any;\r\n    onpointerover: (ev: PointerEvent) => any;\r\n    onpointermove: (ev: PointerEvent) => any;\r\n    onpointerleave: (ev: PointerEvent) => any;\r\n    addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\n\r\ninterface Key {\r\n    algorithm: Algorithm;\r\n    type: string;\r\n    extractable: boolean;\r\n    keyUsage: string[];\r\n}\r\ndeclare var Key: {\r\n    prototype: Key;\r\n    new(): Key;\r\n}\r\n\r\ninterface DeviceAcceleration {\r\n    y: number;\r\n    x: number;\r\n    z: number;\r\n}\r\ndeclare var DeviceAcceleration: {\r\n    prototype: DeviceAcceleration;\r\n    new(): DeviceAcceleration;\r\n}\r\n\r\ninterface HTMLAllCollection extends HTMLCollection {\r\n    namedItem(name: string): Element;\r\n    // [name: string]: Element;\r\n}\r\ndeclare var HTMLAllCollection: {\r\n    prototype: HTMLAllCollection;\r\n    new(): HTMLAllCollection;\r\n}\r\n\r\ninterface AesGcmEncryptResult {\r\n    ciphertext: ArrayBuffer;\r\n    tag: ArrayBuffer;\r\n}\r\ndeclare var AesGcmEncryptResult: {\r\n    prototype: AesGcmEncryptResult;\r\n    new(): AesGcmEncryptResult;\r\n}\r\n\r\ninterface NavigationCompletedEvent extends NavigationEvent {\r\n    webErrorStatus: number;\r\n    isSuccess: boolean;\r\n}\r\ndeclare var NavigationCompletedEvent: {\r\n    prototype: NavigationCompletedEvent;\r\n    new(): NavigationCompletedEvent;\r\n}\r\n\r\ninterface MutationRecord {\r\n    oldValue: string;\r\n    previousSibling: Node;\r\n    addedNodes: NodeList;\r\n    attributeName: string;\r\n    removedNodes: NodeList;\r\n    target: Node;\r\n    nextSibling: Node;\r\n    attributeNamespace: string;\r\n    type: string;\r\n}\r\ndeclare var MutationRecord: {\r\n    prototype: MutationRecord;\r\n    new(): MutationRecord;\r\n}\r\n\r\ninterface MimeTypeArray {\r\n    length: number;\r\n    item(index: number): Plugin;\r\n    [index: number]: Plugin;\r\n    namedItem(type: string): Plugin;\r\n    // [type: string]: Plugin;\r\n}\r\ndeclare var MimeTypeArray: {\r\n    prototype: MimeTypeArray;\r\n    new(): MimeTypeArray;\r\n}\r\n\r\ninterface KeyOperation extends EventTarget {\r\n    oncomplete: (ev: Event) => any;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    result: any;\r\n    addEventListener(type: \"complete\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var KeyOperation: {\r\n    prototype: KeyOperation;\r\n    new(): KeyOperation;\r\n}\r\n\r\ninterface DOMStringMap {\r\n}\r\ndeclare var DOMStringMap: {\r\n    prototype: DOMStringMap;\r\n    new(): DOMStringMap;\r\n}\r\n\r\ninterface DeviceOrientationEvent extends Event {\r\n    gamma: number;\r\n    alpha: number;\r\n    absolute: boolean;\r\n    beta: number;\r\n    initDeviceOrientationEvent(type: string, bubbles: boolean, cancelable: boolean, alpha: number, beta: number, gamma: number, absolute: boolean): void;\r\n}\r\ndeclare var DeviceOrientationEvent: {\r\n    prototype: DeviceOrientationEvent;\r\n    new(): DeviceOrientationEvent;\r\n}\r\n\r\ninterface MSMediaKeys {\r\n    keySystem: string;\r\n    createSession(type: string, initData: Uint8Array, cdmData?: Uint8Array): MSMediaKeySession;\r\n}\r\ndeclare var MSMediaKeys: {\r\n    prototype: MSMediaKeys;\r\n    new(keySystem: string): MSMediaKeys;\r\n    isTypeSupported(keySystem: string, type?: string): boolean;\r\n}\r\n\r\ninterface MSMediaKeyMessageEvent extends Event {\r\n    destinationURL: string;\r\n    message: Uint8Array;\r\n}\r\ndeclare var MSMediaKeyMessageEvent: {\r\n    prototype: MSMediaKeyMessageEvent;\r\n    new(): MSMediaKeyMessageEvent;\r\n}\r\n\r\ninterface MSHTMLWebViewElement extends HTMLElement {\r\n    documentTitle: string;\r\n    width: number;\r\n    src: string;\r\n    canGoForward: boolean;\r\n    height: number;\r\n    canGoBack: boolean;\r\n    navigateWithHttpRequestMessage(requestMessage: any): void;\r\n    goBack(): void;\r\n    navigate(uri: string): void;\r\n    stop(): void;\r\n    navigateToString(contents: string): void;\r\n    captureSelectedContentToDataPackageAsync(): MSWebViewAsyncOperation;\r\n    capturePreviewToBlobAsync(): MSWebViewAsyncOperation;\r\n    refresh(): void;\r\n    goForward(): void;\r\n    navigateToLocalStreamUri(source: string, streamResolver: any): void;\r\n    invokeScriptAsync(scriptName: string, ...args: any[]): MSWebViewAsyncOperation;\r\n    buildLocalStreamUri(contentIdentifier: string, relativePath: string): string;\r\n}\r\ndeclare var MSHTMLWebViewElement: {\r\n    prototype: MSHTMLWebViewElement;\r\n    new(): MSHTMLWebViewElement;\r\n}\r\n\r\ninterface NavigationEvent extends Event {\r\n    uri: string;\r\n}\r\ndeclare var NavigationEvent: {\r\n    prototype: NavigationEvent;\r\n    new(): NavigationEvent;\r\n}\r\n\r\ninterface RandomSource {\r\n    getRandomValues(array: ArrayBufferView): ArrayBufferView;\r\n}\r\n\r\ninterface SourceBuffer extends EventTarget {\r\n    updating: boolean;\r\n    appendWindowStart: number;\r\n    appendWindowEnd: number;\r\n    buffered: TimeRanges;\r\n    timestampOffset: number;\r\n    audioTracks: AudioTrackList;\r\n    appendBuffer(data: ArrayBuffer): void;\r\n    remove(start: number, end: number): void;\r\n    abort(): void;\r\n    appendStream(stream: MSStream, maxSize?: number): void;\r\n}\r\ndeclare var SourceBuffer: {\r\n    prototype: SourceBuffer;\r\n    new(): SourceBuffer;\r\n}\r\n\r\ninterface MSInputMethodContext extends EventTarget {\r\n    oncandidatewindowshow: (ev: any) => any;\r\n    target: HTMLElement;\r\n    compositionStartOffset: number;\r\n    oncandidatewindowhide: (ev: any) => any;\r\n    oncandidatewindowupdate: (ev: any) => any;\r\n    compositionEndOffset: number;\r\n    getCompositionAlternatives(): string[];\r\n    getCandidateWindowClientRect(): ClientRect;\r\n    hasComposition(): boolean;\r\n    isCandidateWindowVisible(): boolean;\r\n    addEventListener(type: \"candidatewindowshow\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"candidatewindowhide\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"candidatewindowupdate\", listener: (ev: any) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var MSInputMethodContext: {\r\n    prototype: MSInputMethodContext;\r\n    new(): MSInputMethodContext;\r\n}\r\n\r\ninterface DeviceRotationRate {\r\n    gamma: number;\r\n    alpha: number;\r\n    beta: number;\r\n}\r\ndeclare var DeviceRotationRate: {\r\n    prototype: DeviceRotationRate;\r\n    new(): DeviceRotationRate;\r\n}\r\n\r\ninterface PluginArray {\r\n    length: number;\r\n    refresh(reload?: boolean): void;\r\n    item(index: number): Plugin;\r\n    [index: number]: Plugin;\r\n    namedItem(name: string): Plugin;\r\n    // [name: string]: Plugin;\r\n}\r\ndeclare var PluginArray: {\r\n    prototype: PluginArray;\r\n    new(): PluginArray;\r\n}\r\n\r\ninterface MSMediaKeyError {\r\n    systemCode: number;\r\n    code: number;\r\n    MS_MEDIA_KEYERR_SERVICE: number;\r\n    MS_MEDIA_KEYERR_HARDWARECHANGE: number;\r\n    MS_MEDIA_KEYERR_OUTPUT: number;\r\n    MS_MEDIA_KEYERR_DOMAIN: number;\r\n    MS_MEDIA_KEYERR_UNKNOWN: number;\r\n    MS_MEDIA_KEYERR_CLIENT: number;\r\n}\r\ndeclare var MSMediaKeyError: {\r\n    prototype: MSMediaKeyError;\r\n    new(): MSMediaKeyError;\r\n    MS_MEDIA_KEYERR_SERVICE: number;\r\n    MS_MEDIA_KEYERR_HARDWARECHANGE: number;\r\n    MS_MEDIA_KEYERR_OUTPUT: number;\r\n    MS_MEDIA_KEYERR_DOMAIN: number;\r\n    MS_MEDIA_KEYERR_UNKNOWN: number;\r\n    MS_MEDIA_KEYERR_CLIENT: number;\r\n}\r\n\r\ninterface Plugin {\r\n    length: number;\r\n    filename: string;\r\n    version: string;\r\n    name: string;\r\n    description: string;\r\n    item(index: number): MimeType;\r\n    [index: number]: MimeType;\r\n    namedItem(type: string): MimeType;\r\n    // [type: string]: MimeType;\r\n}\r\ndeclare var Plugin: {\r\n    prototype: Plugin;\r\n    new(): Plugin;\r\n}\r\n\r\ninterface MediaSource extends EventTarget {\r\n    sourceBuffers: SourceBufferList;\r\n    duration: number;\r\n    readyState: string;\r\n    activeSourceBuffers: SourceBufferList;\r\n    addSourceBuffer(type: string): SourceBuffer;\r\n    endOfStream(error?: string): void;\r\n    removeSourceBuffer(sourceBuffer: SourceBuffer): void;\r\n}\r\ndeclare var MediaSource: {\r\n    prototype: MediaSource;\r\n    new(): MediaSource;\r\n    isTypeSupported(type: string): boolean;\r\n}\r\n\r\ninterface SourceBufferList extends EventTarget {\r\n    length: number;\r\n    item(index: number): SourceBuffer;\r\n    [index: number]: SourceBuffer;\r\n}\r\ndeclare var SourceBufferList: {\r\n    prototype: SourceBufferList;\r\n    new(): SourceBufferList;\r\n}\r\n\r\ninterface XMLDocument extends Document {\r\n}\r\ndeclare var XMLDocument: {\r\n    prototype: XMLDocument;\r\n    new(): XMLDocument;\r\n}\r\n\r\ninterface DeviceMotionEvent extends Event {\r\n    rotationRate: DeviceRotationRate;\r\n    acceleration: DeviceAcceleration;\r\n    interval: number;\r\n    accelerationIncludingGravity: DeviceAcceleration;\r\n    initDeviceMotionEvent(type: string, bubbles: boolean, cancelable: boolean, acceleration: DeviceAccelerationDict, accelerationIncludingGravity: DeviceAccelerationDict, rotationRate: DeviceRotationRateDict, interval: number): void;\r\n}\r\ndeclare var DeviceMotionEvent: {\r\n    prototype: DeviceMotionEvent;\r\n    new(): DeviceMotionEvent;\r\n}\r\n\r\ninterface MimeType {\r\n    enabledPlugin: Plugin;\r\n    suffixes: string;\r\n    type: string;\r\n    description: string;\r\n}\r\ndeclare var MimeType: {\r\n    prototype: MimeType;\r\n    new(): MimeType;\r\n}\r\n\r\ninterface PointerEvent extends MouseEvent {\r\n    width: number;\r\n    rotation: number;\r\n    pressure: number;\r\n    pointerType: any;\r\n    isPrimary: boolean;\r\n    tiltY: number;\r\n    height: number;\r\n    intermediatePoints: any;\r\n    currentPoint: any;\r\n    tiltX: number;\r\n    hwTimestamp: number;\r\n    pointerId: number;\r\n    initPointerEvent(typeArg: string, canBubbleArg: boolean, cancelableArg: boolean, viewArg: Window, detailArg: number, screenXArg: number, screenYArg: number, clientXArg: number, clientYArg: number, ctrlKeyArg: boolean, altKeyArg: boolean, shiftKeyArg: boolean, metaKeyArg: boolean, buttonArg: number, relatedTargetArg: EventTarget, offsetXArg: number, offsetYArg: number, widthArg: number, heightArg: number, pressure: number, rotation: number, tiltX: number, tiltY: number, pointerIdArg: number, pointerType: any, hwTimestampArg: number, isPrimary: boolean): void;\r\n    getCurrentPoint(element: Element): void;\r\n    getIntermediatePoints(element: Element): void;\r\n}\r\ndeclare var PointerEvent: {\r\n    prototype: PointerEvent;\r\n    new(): PointerEvent;\r\n}\r\n\r\ninterface MSDocumentExtensions {\r\n    captureEvents(): void;\r\n    releaseEvents(): void;\r\n}\r\n\r\ninterface MutationObserver {\r\n    observe(target: Node, options: MutationObserverInit): void;\r\n    takeRecords(): MutationRecord[];\r\n    disconnect(): void;\r\n}\r\ndeclare var MutationObserver: {\r\n    prototype: MutationObserver;\r\n    new (callback: (arr: MutationRecord[], observer: MutationObserver)=>any): MutationObserver;\r\n}\r\n\r\ninterface MSWebViewAsyncOperation extends EventTarget {\r\n    target: MSHTMLWebViewElement;\r\n    oncomplete: (ev: Event) => any;\r\n    error: DOMError;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    readyState: number;\r\n    type: number;\r\n    result: any;\r\n    start(): void;\r\n    ERROR: number;\r\n    TYPE_CREATE_DATA_PACKAGE_FROM_SELECTION: number;\r\n    TYPE_INVOKE_SCRIPT: number;\r\n    COMPLETED: number;\r\n    TYPE_CAPTURE_PREVIEW_TO_RANDOM_ACCESS_STREAM: number;\r\n    STARTED: number;\r\n    addEventListener(type: \"complete\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var MSWebViewAsyncOperation: {\r\n    prototype: MSWebViewAsyncOperation;\r\n    new(): MSWebViewAsyncOperation;\r\n    ERROR: number;\r\n    TYPE_CREATE_DATA_PACKAGE_FROM_SELECTION: number;\r\n    TYPE_INVOKE_SCRIPT: number;\r\n    COMPLETED: number;\r\n    TYPE_CAPTURE_PREVIEW_TO_RANDOM_ACCESS_STREAM: number;\r\n    STARTED: number;\r\n}\r\n\r\ninterface ScriptNotifyEvent extends Event {\r\n    value: string;\r\n    callingUri: string;\r\n}\r\ndeclare var ScriptNotifyEvent: {\r\n    prototype: ScriptNotifyEvent;\r\n    new(): ScriptNotifyEvent;\r\n}\r\n\r\ninterface PerformanceNavigationTiming extends PerformanceEntry {\r\n    redirectStart: number;\r\n    domainLookupEnd: number;\r\n    responseStart: number;\r\n    domComplete: number;\r\n    domainLookupStart: number;\r\n    loadEventStart: number;\r\n    unloadEventEnd: number;\r\n    fetchStart: number;\r\n    requestStart: number;\r\n    domInteractive: number;\r\n    navigationStart: number;\r\n    connectEnd: number;\r\n    loadEventEnd: number;\r\n    connectStart: number;\r\n    responseEnd: number;\r\n    domLoading: number;\r\n    redirectEnd: number;\r\n    redirectCount: number;\r\n    unloadEventStart: number;\r\n    domContentLoadedEventStart: number;\r\n    domContentLoadedEventEnd: number;\r\n    type: string;\r\n}\r\ndeclare var PerformanceNavigationTiming: {\r\n    prototype: PerformanceNavigationTiming;\r\n    new(): PerformanceNavigationTiming;\r\n}\r\n\r\ninterface MSMediaKeyNeededEvent extends Event {\r\n    initData: Uint8Array;\r\n}\r\ndeclare var MSMediaKeyNeededEvent: {\r\n    prototype: MSMediaKeyNeededEvent;\r\n    new(): MSMediaKeyNeededEvent;\r\n}\r\n\r\ninterface LongRunningScriptDetectedEvent extends Event {\r\n    stopPageScriptExecution: boolean;\r\n    executionTime: number;\r\n}\r\ndeclare var LongRunningScriptDetectedEvent: {\r\n    prototype: LongRunningScriptDetectedEvent;\r\n    new(): LongRunningScriptDetectedEvent;\r\n}\r\n\r\ninterface MSAppView {\r\n    viewId: number;\r\n    close(): void;\r\n    postMessage(message: any, targetOrigin: string, ports?: any): void;\r\n}\r\ndeclare var MSAppView: {\r\n    prototype: MSAppView;\r\n    new(): MSAppView;\r\n}\r\n\r\ninterface PerfWidgetExternal {\r\n    maxCpuSpeed: number;\r\n    independentRenderingEnabled: boolean;\r\n    irDisablingContentString: string;\r\n    irStatusAvailable: boolean;\r\n    performanceCounter: number;\r\n    averagePaintTime: number;\r\n    activeNetworkRequestCount: number;\r\n    paintRequestsPerSecond: number;\r\n    extraInformationEnabled: boolean;\r\n    performanceCounterFrequency: number;\r\n    averageFrameTime: number;\r\n    repositionWindow(x: number, y: number): void;\r\n    getRecentMemoryUsage(last: number): any;\r\n    getMemoryUsage(): number;\r\n    resizeWindow(width: number, height: number): void;\r\n    getProcessCpuUsage(): number;\r\n    removeEventListener(eventType: string, callback: (ev: any) => any): void;\r\n    getRecentCpuUsage(last: number): any;\r\n    addEventListener(eventType: string, callback: (ev: any) => any): void;\r\n    getRecentFrames(last: number): any;\r\n    getRecentPaintRequests(last: number): any;\r\n}\r\ndeclare var PerfWidgetExternal: {\r\n    prototype: PerfWidgetExternal;\r\n    new(): PerfWidgetExternal;\r\n}\r\n\r\ninterface PageTransitionEvent extends Event {\r\n    persisted: boolean;\r\n}\r\ndeclare var PageTransitionEvent: {\r\n    prototype: PageTransitionEvent;\r\n    new(): PageTransitionEvent;\r\n}\r\n\r\ninterface MutationCallback {\r\n    (mutations: MutationRecord[], observer: MutationObserver): void;\r\n}\r\n\r\ninterface HTMLDocument extends Document {\r\n}\r\ndeclare var HTMLDocument: {\r\n    prototype: HTMLDocument;\r\n    new(): HTMLDocument;\r\n}\r\n\r\ninterface KeyPair {\r\n    privateKey: Key;\r\n    publicKey: Key;\r\n}\r\ndeclare var KeyPair: {\r\n    prototype: KeyPair;\r\n    new(): KeyPair;\r\n}\r\n\r\ninterface MSMediaKeySession extends EventTarget {\r\n    sessionId: string;\r\n    error: MSMediaKeyError;\r\n    keySystem: string;\r\n    close(): void;\r\n    update(key: Uint8Array): void;\r\n}\r\ndeclare var MSMediaKeySession: {\r\n    prototype: MSMediaKeySession;\r\n    new(): MSMediaKeySession;\r\n}\r\n\r\ninterface UnviewableContentIdentifiedEvent extends NavigationEvent {\r\n    referrer: string;\r\n}\r\ndeclare var UnviewableContentIdentifiedEvent: {\r\n    prototype: UnviewableContentIdentifiedEvent;\r\n    new(): UnviewableContentIdentifiedEvent;\r\n}\r\n\r\ninterface CryptoOperation extends EventTarget {\r\n    algorithm: Algorithm;\r\n    oncomplete: (ev: Event) => any;\r\n    onerror: (ev: ErrorEvent) => any;\r\n    onprogress: (ev: ProgressEvent) => any;\r\n    onabort: (ev: UIEvent) => any;\r\n    key: Key;\r\n    result: any;\r\n    abort(): void;\r\n    finish(): void;\r\n    process(buffer: ArrayBufferView): void;\r\n    addEventListener(type: \"complete\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"error\", listener: (ev: ErrorEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\n    addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n}\r\ndeclare var CryptoOperation: {\r\n    prototype: CryptoOperation;\r\n    new(): CryptoOperation;\r\n}\r\n\r\ninterface WebGLTexture extends WebGLObject {\r\n}\r\ndeclare var WebGLTexture: {\r\n    prototype: WebGLTexture;\r\n    new(): WebGLTexture;\r\n}\r\n\r\ninterface OES_texture_float {\r\n}\r\ndeclare var OES_texture_float: {\r\n    prototype: OES_texture_float;\r\n    new(): OES_texture_float;\r\n}\r\n\r\ninterface WebGLContextEvent extends Event {\r\n    statusMessage: string;\r\n}\r\ndeclare var WebGLContextEvent: {\r\n    prototype: WebGLContextEvent;\r\n    new(): WebGLContextEvent;\r\n}\r\n\r\ninterface WebGLRenderbuffer extends WebGLObject {\r\n}\r\ndeclare var WebGLRenderbuffer: {\r\n    prototype: WebGLRenderbuffer;\r\n    new(): WebGLRenderbuffer;\r\n}\r\n\r\ninterface WebGLUniformLocation {\r\n}\r\ndeclare var WebGLUniformLocation: {\r\n    prototype: WebGLUniformLocation;\r\n    new(): WebGLUniformLocation;\r\n}\r\n\r\ninterface WebGLActiveInfo {\r\n    name: string;\r\n    type: number;\r\n    size: number;\r\n}\r\ndeclare var WebGLActiveInfo: {\r\n    prototype: WebGLActiveInfo;\r\n    new(): WebGLActiveInfo;\r\n}\r\n\r\ninterface WEBGL_compressed_texture_s3tc {\r\n    COMPRESSED_RGBA_S3TC_DXT1_EXT: number;\r\n    COMPRESSED_RGBA_S3TC_DXT5_EXT: number;\r\n    COMPRESSED_RGBA_S3TC_DXT3_EXT: number;\r\n    COMPRESSED_RGB_S3TC_DXT1_EXT: number;\r\n}\r\ndeclare var WEBGL_compressed_texture_s3tc: {\r\n    prototype: WEBGL_compressed_texture_s3tc;\r\n    new(): WEBGL_compressed_texture_s3tc;\r\n    COMPRESSED_RGBA_S3TC_DXT1_EXT: number;\r\n    COMPRESSED_RGBA_S3TC_DXT5_EXT: number;\r\n    COMPRESSED_RGBA_S3TC_DXT3_EXT: number;\r\n    COMPRESSED_RGB_S3TC_DXT1_EXT: number;\r\n}\r\n\r\ninterface WebGLRenderingContext {\r\n    drawingBufferWidth: number;\r\n    drawingBufferHeight: number;\r\n    canvas: HTMLCanvasElement;\r\n    getUniformLocation(program: WebGLProgram, name: string): WebGLUniformLocation;\r\n    bindTexture(target: number, texture: WebGLTexture): void;\r\n    bufferData(target: number, data: ArrayBufferView, usage: number): void;\r\n    bufferData(target: number, data: ArrayBuffer, usage: number): void;\r\n    bufferData(target: number, size: number, usage: number): void;\r\n    depthMask(flag: boolean): void;\r\n    getUniform(program: WebGLProgram, location: WebGLUniformLocation): any;\r\n    vertexAttrib3fv(indx: number, values: number[]): void;\r\n    vertexAttrib3fv(indx: number, values: Float32Array): void;\r\n    linkProgram(program: WebGLProgram): void;\r\n    getSupportedExtensions(): string[];\r\n    bufferSubData(target: number, offset: number, data: ArrayBuffer): void;\r\n    bufferSubData(target: number, offset: number, data: ArrayBufferView): void;\r\n    vertexAttribPointer(indx: number, size: number, type: number, normalized: boolean, stride: number, offset: number): void;\r\n    polygonOffset(factor: number, units: number): void;\r\n    blendColor(red: number, green: number, blue: number, alpha: number): void;\r\n    createTexture(): WebGLTexture;\r\n    hint(target: number, mode: number): void;\r\n    getVertexAttrib(index: number, pname: number): any;\r\n    enableVertexAttribArray(index: number): void;\r\n    depthRange(zNear: number, zFar: number): void;\r\n    cullFace(mode: number): void;\r\n    createFramebuffer(): WebGLFramebuffer;\r\n    uniformMatrix4fv(location: WebGLUniformLocation, transpose: boolean, value: number[]): void;\r\n    uniformMatrix4fv(location: WebGLUniformLocation, transpose: boolean, value: Float32Array): void;\r\n    framebufferTexture2D(target: number, attachment: number, textarget: number, texture: WebGLTexture, level: number): void;\r\n    deleteFramebuffer(framebuffer: WebGLFramebuffer): void;\r\n    colorMask(red: boolean, green: boolean, blue: boolean, alpha: boolean): void;\r\n    compressedTexImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, data: ArrayBufferView): void;\r\n    uniformMatrix2fv(location: WebGLUniformLocation, transpose: boolean, value: number[]): void;\r\n    uniformMatrix2fv(location: WebGLUniformLocation, transpose: boolean, value: Float32Array): void;\r\n    getExtension(name: string): any;\r\n    createProgram(): WebGLProgram;\r\n    deleteShader(shader: WebGLShader): void;\r\n    getAttachedShaders(program: WebGLProgram): WebGLShader[];\r\n    enable(cap: number): void;\r\n    blendEquation(mode: number): void;\r\n    texImage2D(target: number, level: number, internalformat: number, width: number, height: number, border: number, format: number, type: number, pixels: ArrayBufferView): void;\r\n    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, image: HTMLImageElement): void;\r\n    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, canvas: HTMLCanvasElement): void;\r\n    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, video: HTMLVideoElement): void;\r\n    texImage2D(target: number, level: number, internalformat: number, format: number, type: number, pixels: ImageData): void;\r\n    createBuffer(): WebGLBuffer;\r\n    deleteTexture(texture: WebGLTexture): void;\r\n    useProgram(program: WebGLProgram): void;\r\n    vertexAttrib2fv(indx: number, values: number[]): void;\r\n    vertexAttrib2fv(indx: number, values: Float32Array): void;\r\n    checkFramebufferStatus(target: number): number;\r\n    frontFace(mode: number): void;\r\n    getBufferParameter(target: number, pname: number): any;\r\n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, type: number, pixels: ArrayBufferView): void;\r\n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, image: HTMLImageElement): void;\r\n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, canvas: HTMLCanvasElement): void;\r\n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, video: HTMLVideoElement): void;\r\n    texSubImage2D(target: number, level: number, xoffset: number, yoffset: number, format: number, type: number, pixels: ImageData): void;\r\n    copyTexImage2D(target: number, level: number, internalformat: number, x: number, y: number, width: number, height: number, border: number): void;\r\n    getVertexAttribOffset(index: number, pname: number): number;\r\n    disableVertexAttribArray(index: number): void;\r\n    blendFunc(sfactor: number, dfactor: number): void;\r\n    drawElements(mode: number, count: number, type: number, offset: number): void;\r\n    isFramebuffer(framebuffer: WebGLFramebuffer): boolean;\r\n    uniform3iv(location: WebGLUniformLocation, v: number[]): void;\r\n    uniform3iv(location: WebGLUniformLocation, v: Int32Array): void;\r\n    lineWidth(width: number): void;\r\n    getShaderInfoLog(shader: WebGLShader): string;\r\n    getTexParameter(target: number, pname: number): any;\r\n    getParameter(pname: number): any;\r\n    getShaderPrecisionFormat(shadertype: number, precisiontype: number): WebGLShaderPrecisionFormat;\r\n    getContextAttributes(): WebGLContextAttributes;\r\n    vertexAttrib1f(indx: number, x: number): void;\r\n    bindFramebuffer(target: number, framebuffer: WebGLFramebuffer): void;\r\n    compressedTexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, width: number, height: number, format: number, data: ArrayBufferView): void;\r\n    isContextLost(): boolean;\r\n    uniform1iv(location: WebGLUniformLocation, v: number[]): void;\r\n    uniform1iv(location: WebGLUniformLocation, v: Int32Array): void;\r\n    getRenderbufferParameter(target: number, pname: number): any;\r\n    uniform2fv(location: WebGLUniformLocation, v: number[]): void;\r\n    uniform2fv(location: WebGLUniformLocation, v: Float32Array): void;\r\n    isTexture(texture: WebGLTexture): boolean;\r\n    getError(): number;\r\n    shaderSource(shader: WebGLShader, source: string): void;\r\n    deleteRenderbuffer(renderbuffer: WebGLRenderbuffer): void;\r\n    stencilMask(mask: number): void;\r\n    bindBuffer(target: number, buffer: WebGLBuffer): void;\r\n    getAttribLocation(program: WebGLProgram, name: string): number;\r\n    uniform3i(location: WebGLUniformLocation, x: number, y: number, z: number): void;\r\n    blendEquationSeparate(modeRGB: number, modeAlpha: number): void;\r\n    clear(mask: number): void;\r\n    blendFuncSeparate(srcRGB: number, dstRGB: number, srcAlpha: number, dstAlpha: number): void;\r\n    stencilFuncSeparate(face: number, func: number, ref: number, mask: number): void;\r\n    readPixels(x: number, y: number, width: number, height: number, format: number, type: number, pixels: ArrayBufferView): void;\r\n    scissor(x: number, y: number, width: number, height: number): void;\r\n    uniform2i(location: WebGLUniformLocation, x: number, y: number): void;\r\n    getActiveAttrib(program: WebGLProgram, index: number): WebGLActiveInfo;\r\n    getShaderSource(shader: WebGLShader): string;\r\n    generateMipmap(target: number): void;\r\n    bindAttribLocation(program: WebGLProgram, index: number, name: string): void;\r\n    uniform1fv(location: WebGLUniformLocation, v: number[]): void;\r\n    uniform1fv(location: WebGLUniformLocation, v: Float32Array): void;\r\n    uniform2iv(location: WebGLUniformLocation, v: number[]): void;\r\n    uniform2iv(location: WebGLUniformLocation, v: Int32Array): void;\r\n    stencilOp(fail: number, zfail: number, zpass: number): void;\r\n    uniform4fv(location: WebGLUniformLocation, v: number[]): void;\r\n    uniform4fv(location: WebGLUniformLocation, v: Float32Array): void;\r\n    vertexAttrib1fv(indx: number, values: number[]): void;\r\n    vertexAttrib1fv(indx: number, values: Float32Array): void;\r\n    flush(): void;\r\n    uniform4f(location: WebGLUniformLocation, x: number, y: number, z: number, w: number): void;\r\n    deleteProgram(program: WebGLProgram): void;\r\n    isRenderbuffer(renderbuffer: WebGLRenderbuffer): boolean;\r\n    uniform1i(location: WebGLUniformLocation, x: number): void;\r\n    getProgramParameter(program: WebGLProgram, pname: number): any;\r\n    getActiveUniform(program: WebGLProgram, index: number): WebGLActiveInfo;\r\n    stencilFunc(func: number, ref: number, mask: number): void;\r\n    pixelStorei(pname: number, param: number): void;\r\n    disable(cap: number): void;\r\n    vertexAttrib4fv(indx: number, values: number[]): void;\r\n    vertexAttrib4fv(indx: number, values: Float32Array): void;\r\n    createRenderbuffer(): WebGLRenderbuffer;\r\n    isBuffer(buffer: WebGLBuffer): boolean;\r\n    stencilOpSeparate(face: number, fail: number, zfail: number, zpass: number): void;\r\n    getFramebufferAttachmentParameter(target: number, attachment: number, pname: number): any;\r\n    uniform4i(location: WebGLUniformLocation, x: number, y: number, z: number, w: number): void;\r\n    sampleCoverage(value: number, invert: boolean): void;\r\n    depthFunc(func: number): void;\r\n    texParameterf(target: number, pname: number, param: number): void;\r\n    vertexAttrib3f(indx: number, x: number, y: number, z: number): void;\r\n    drawArrays(mode: number, first: number, count: number): void;\r\n    texParameteri(target: number, pname: number, param: number): void;\r\n    vertexAttrib4f(indx: number, x: number, y: number, z: number, w: number): void;\r\n    getShaderParameter(shader: WebGLShader, pname: number): any;\r\n    clearDepth(depth: number): void;\r\n    activeTexture(texture: number): void;\r\n    viewport(x: number, y: number, width: number, height: number): void;\r\n    detachShader(program: WebGLProgram, shader: WebGLShader): void;\r\n    uniform1f(location: WebGLUniformLocation, x: number): void;\r\n    uniformMatrix3fv(location: WebGLUniformLocation, transpose: boolean, value: number[]): void;\r\n    uniformMatrix3fv(location: WebGLUniformLocation, transpose: boolean, value: Float32Array): void;\r\n    deleteBuffer(buffer: WebGLBuffer): void;\r\n    copyTexSubImage2D(target: number, level: number, xoffset: number, yoffset: number, x: number, y: number, width: number, height: number): void;\r\n    uniform3fv(location: WebGLUniformLocation, v: number[]): void;\r\n    uniform3fv(location: WebGLUniformLocation, v: Float32Array): void;\r\n    stencilMaskSeparate(face: number, mask: number): void;\r\n    attachShader(program: WebGLProgram, shader: WebGLShader): void;\r\n    compileShader(shader: WebGLShader): void;\r\n    clearColor(red: number, green: number, blue: number, alpha: number): void;\r\n    isShader(shader: WebGLShader): boolean;\r\n    clearStencil(s: number): void;\r\n    framebufferRenderbuffer(target: number, attachment: number, renderbuffertarget: number, renderbuffer: WebGLRenderbuffer): void;\r\n    finish(): void;\r\n    uniform2f(location: WebGLUniformLocation, x: number, y: number): void;\r\n    renderbufferStorage(target: number, internalformat: number, width: number, height: number): void;\r\n    uniform3f(location: WebGLUniformLocation, x: number, y: number, z: number): void;\r\n    getProgramInfoLog(program: WebGLProgram): string;\r\n    validateProgram(program: WebGLProgram): void;\r\n    isEnabled(cap: number): boolean;\r\n    vertexAttrib2f(indx: number, x: number, y: number): void;\r\n    isProgram(program: WebGLProgram): boolean;\r\n    createShader(type: number): WebGLShader;\r\n    bindRenderbuffer(target: number, renderbuffer: WebGLRenderbuffer): void;\r\n    uniform4iv(location: WebGLUniformLocation, v: number[]): void;\r\n    uniform4iv(location: WebGLUniformLocation, v: Int32Array): void;\r\n    DEPTH_FUNC: number;\r\n    DEPTH_COMPONENT16: number;\r\n    REPLACE: number;\r\n    REPEAT: number;\r\n    VERTEX_ATTRIB_ARRAY_ENABLED: number;\r\n    FRAMEBUFFER_INCOMPLETE_DIMENSIONS: number;\r\n    STENCIL_BUFFER_BIT: number;\r\n    RENDERER: number;\r\n    STENCIL_BACK_REF: number;\r\n    TEXTURE26: number;\r\n    RGB565: number;\r\n    DITHER: number;\r\n    CONSTANT_COLOR: number;\r\n    GENERATE_MIPMAP_HINT: number;\r\n    POINTS: number;\r\n    DECR: number;\r\n    INT_VEC3: number;\r\n    TEXTURE28: number;\r\n    ONE_MINUS_CONSTANT_ALPHA: number;\r\n    BACK: number;\r\n    RENDERBUFFER_STENCIL_SIZE: number;\r\n    UNPACK_FLIP_Y_WEBGL: number;\r\n    BLEND: number;\r\n    TEXTURE9: number;\r\n    ARRAY_BUFFER_BINDING: number;\r\n    MAX_VIEWPORT_DIMS: number;\r\n    INVALID_FRAMEBUFFER_OPERATION: number;\r\n    TEXTURE: number;\r\n    TEXTURE0: number;\r\n    TEXTURE31: number;\r\n    TEXTURE24: number;\r\n    HIGH_INT: number;\r\n    RENDERBUFFER_BINDING: number;\r\n    BLEND_COLOR: number;\r\n    FASTEST: number;\r\n    STENCIL_WRITEMASK: number;\r\n    ALIASED_POINT_SIZE_RANGE: number;\r\n    TEXTURE12: number;\r\n    DST_ALPHA: number;\r\n    BLEND_EQUATION_RGB: number;\r\n    FRAMEBUFFER_COMPLETE: number;\r\n    NEAREST_MIPMAP_NEAREST: number;\r\n    VERTEX_ATTRIB_ARRAY_SIZE: number;\r\n    TEXTURE3: number;\r\n    DEPTH_WRITEMASK: number;\r\n    CONTEXT_LOST_WEBGL: number;\r\n    INVALID_VALUE: number;\r\n    TEXTURE_MAG_FILTER: number;\r\n    ONE_MINUS_CONSTANT_COLOR: number;\r\n    ONE_MINUS_SRC_ALPHA: number;\r\n    TEXTURE_CUBE_MAP_POSITIVE_Z: number;\r\n    NOTEQUAL: number;\r\n    ALPHA: number;\r\n    DEPTH_STENCIL: number;\r\n    MAX_VERTEX_UNIFORM_VECTORS: number;\r\n    DEPTH_COMPONENT: number;\r\n    RENDERBUFFER_RED_SIZE: number;\r\n    TEXTURE20: number;\r\n    RED_BITS: number;\r\n    RENDERBUFFER_BLUE_SIZE: number;\r\n    SCISSOR_BOX: number;\r\n    VENDOR: number;\r\n    FRONT_AND_BACK: number;\r\n    CONSTANT_ALPHA: number;\r\n    VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: number;\r\n    NEAREST: number;\r\n    CULL_FACE: number;\r\n    ALIASED_LINE_WIDTH_RANGE: number;\r\n    TEXTURE19: number;\r\n    FRONT: number;\r\n    DEPTH_CLEAR_VALUE: number;\r\n    GREEN_BITS: number;\r\n    TEXTURE29: number;\r\n    TEXTURE23: number;\r\n    MAX_RENDERBUFFER_SIZE: number;\r\n    STENCIL_ATTACHMENT: number;\r\n    TEXTURE27: number;\r\n    BOOL_VEC2: number;\r\n    OUT_OF_MEMORY: number;\r\n    MIRRORED_REPEAT: number;\r\n    POLYGON_OFFSET_UNITS: number;\r\n    TEXTURE_MIN_FILTER: number;\r\n    STENCIL_BACK_PASS_DEPTH_PASS: number;\r\n    LINE_LOOP: number;\r\n    FLOAT_MAT3: number;\r\n    TEXTURE14: number;\r\n    LINEAR: number;\r\n    RGB5_A1: number;\r\n    ONE_MINUS_SRC_COLOR: number;\r\n    SAMPLE_COVERAGE_INVERT: number;\r\n    DONT_CARE: number;\r\n    FRAMEBUFFER_BINDING: number;\r\n    RENDERBUFFER_ALPHA_SIZE: number;\r\n    STENCIL_REF: number;\r\n    ZERO: number;\r\n    DECR_WRAP: number;\r\n    SAMPLE_COVERAGE: number;\r\n    STENCIL_BACK_FUNC: number;\r\n    TEXTURE30: number;\r\n    VIEWPORT: number;\r\n    STENCIL_BITS: number;\r\n    FLOAT: number;\r\n    COLOR_WRITEMASK: number;\r\n    SAMPLE_COVERAGE_VALUE: number;\r\n    TEXTURE_CUBE_MAP_NEGATIVE_Y: number;\r\n    STENCIL_BACK_FAIL: number;\r\n    FLOAT_MAT4: number;\r\n    UNSIGNED_SHORT_4_4_4_4: number;\r\n    TEXTURE6: number;\r\n    RENDERBUFFER_WIDTH: number;\r\n    RGBA4: number;\r\n    ALWAYS: number;\r\n    BLEND_EQUATION_ALPHA: number;\r\n    COLOR_BUFFER_BIT: number;\r\n    TEXTURE_CUBE_MAP: number;\r\n    DEPTH_BUFFER_BIT: number;\r\n    STENCIL_CLEAR_VALUE: number;\r\n    BLEND_EQUATION: number;\r\n    RENDERBUFFER_GREEN_SIZE: number;\r\n    NEAREST_MIPMAP_LINEAR: number;\r\n    VERTEX_ATTRIB_ARRAY_TYPE: number;\r\n    INCR_WRAP: number;\r\n    ONE_MINUS_DST_COLOR: number;\r\n    HIGH_FLOAT: number;\r\n    BYTE: number;\r\n    FRONT_FACE: number;\r\n    SAMPLE_ALPHA_TO_COVERAGE: number;\r\n    CCW: number;\r\n    TEXTURE13: number;\r\n    MAX_VERTEX_ATTRIBS: number;\r\n    MAX_VERTEX_TEXTURE_IMAGE_UNITS: number;\r\n    TEXTURE_WRAP_T: number;\r\n    UNPACK_PREMULTIPLY_ALPHA_WEBGL: number;\r\n    FLOAT_VEC2: number;\r\n    LUMINANCE: number;\r\n    GREATER: number;\r\n    INT_VEC2: number;\r\n    VALIDATE_STATUS: number;\r\n    FRAMEBUFFER: number;\r\n    FRAMEBUFFER_UNSUPPORTED: number;\r\n    TEXTURE5: number;\r\n    FUNC_SUBTRACT: number;\r\n    BLEND_DST_ALPHA: number;\r\n    SAMPLER_CUBE: number;\r\n    ONE_MINUS_DST_ALPHA: number;\r\n    LESS: number;\r\n    TEXTURE_CUBE_MAP_POSITIVE_X: number;\r\n    BLUE_BITS: number;\r\n    DEPTH_TEST: number;\r\n    VERTEX_ATTRIB_ARRAY_STRIDE: number;\r\n    DELETE_STATUS: number;\r\n    TEXTURE18: number;\r\n    POLYGON_OFFSET_FACTOR: number;\r\n    UNSIGNED_INT: number;\r\n    TEXTURE_2D: number;\r\n    DST_COLOR: number;\r\n    FLOAT_MAT2: number;\r\n    COMPRESSED_TEXTURE_FORMATS: number;\r\n    MAX_FRAGMENT_UNIFORM_VECTORS: number;\r\n    DEPTH_STENCIL_ATTACHMENT: number;\r\n    LUMINANCE_ALPHA: number;\r\n    CW: number;\r\n    VERTEX_ATTRIB_ARRAY_NORMALIZED: number;\r\n    TEXTURE_CUBE_MAP_NEGATIVE_Z: number;\r\n    LINEAR_MIPMAP_LINEAR: number;\r\n    BUFFER_SIZE: number;\r\n    SAMPLE_BUFFERS: number;\r\n    TEXTURE15: number;\r\n    ACTIVE_TEXTURE: number;\r\n    VERTEX_SHADER: number;\r\n    TEXTURE22: number;\r\n    VERTEX_ATTRIB_ARRAY_POINTER: number;\r\n    INCR: number;\r\n    COMPILE_STATUS: number;\r\n    MAX_COMBINED_TEXTURE_IMAGE_UNITS: number;\r\n    TEXTURE7: number;\r\n    UNSIGNED_SHORT_5_5_5_1: number;\r\n    DEPTH_BITS: number;\r\n    RGBA: number;\r\n    TRIANGLE_STRIP: number;\r\n    COLOR_CLEAR_VALUE: number;\r\n    BROWSER_DEFAULT_WEBGL: number;\r\n    INVALID_ENUM: number;\r\n    SCISSOR_TEST: number;\r\n    LINE_STRIP: number;\r\n    FRAMEBUFFER_INCOMPLETE_ATTACHMENT: number;\r\n    STENCIL_FUNC: number;\r\n    FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: number;\r\n    RENDERBUFFER_HEIGHT: number;\r\n    TEXTURE8: number;\r\n    TRIANGLES: number;\r\n    FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: number;\r\n    STENCIL_BACK_VALUE_MASK: number;\r\n    TEXTURE25: number;\r\n    RENDERBUFFER: number;\r\n    LEQUAL: number;\r\n    TEXTURE1: number;\r\n    STENCIL_INDEX8: number;\r\n    FUNC_ADD: number;\r\n    STENCIL_FAIL: number;\r\n    BLEND_SRC_ALPHA: number;\r\n    BOOL: number;\r\n    ALPHA_BITS: number;\r\n    LOW_INT: number;\r\n    TEXTURE10: number;\r\n    SRC_COLOR: number;\r\n    MAX_VARYING_VECTORS: number;\r\n    BLEND_DST_RGB: number;\r\n    TEXTURE_BINDING_CUBE_MAP: number;\r\n    STENCIL_INDEX: number;\r\n    TEXTURE_BINDING_2D: number;\r\n    MEDIUM_INT: number;\r\n    SHADER_TYPE: number;\r\n    POLYGON_OFFSET_FILL: number;\r\n    DYNAMIC_DRAW: number;\r\n    TEXTURE4: number;\r\n    STENCIL_BACK_PASS_DEPTH_FAIL: number;\r\n    STREAM_DRAW: number;\r\n    MAX_CUBE_MAP_TEXTURE_SIZE: number;\r\n    TEXTURE17: number;\r\n    TRIANGLE_FAN: number;\r\n    UNPACK_ALIGNMENT: number;\r\n    CURRENT_PROGRAM: number;\r\n    LINES: number;\r\n    INVALID_OPERATION: number;\r\n    FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: number;\r\n    LINEAR_MIPMAP_NEAREST: number;\r\n    CLAMP_TO_EDGE: number;\r\n    RENDERBUFFER_DEPTH_SIZE: number;\r\n    TEXTURE_WRAP_S: number;\r\n    ELEMENT_ARRAY_BUFFER: number;\r\n    UNSIGNED_SHORT_5_6_5: number;\r\n    ACTIVE_UNIFORMS: number;\r\n    FLOAT_VEC3: number;\r\n    NO_ERROR: number;\r\n    ATTACHED_SHADERS: number;\r\n    DEPTH_ATTACHMENT: number;\r\n    TEXTURE11: number;\r\n    STENCIL_TEST: number;\r\n    ONE: number;\r\n    FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: number;\r\n    STATIC_DRAW: number;\r\n    GEQUAL: number;\r\n    BOOL_VEC4: number;\r\n    COLOR_ATTACHMENT0: number;\r\n    PACK_ALIGNMENT: number;\r\n    MAX_TEXTURE_SIZE: number;\r\n    STENCIL_PASS_DEPTH_FAIL: number;\r\n    CULL_FACE_MODE: number;\r\n    TEXTURE16: number;\r\n    STENCIL_BACK_WRITEMASK: number;\r\n    SRC_ALPHA: number;\r\n    UNSIGNED_SHORT: number;\r\n    TEXTURE21: number;\r\n    FUNC_REVERSE_SUBTRACT: number;\r\n    SHADING_LANGUAGE_VERSION: number;\r\n    EQUAL: number;\r\n    FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: number;\r\n    BOOL_VEC3: number;\r\n    SAMPLER_2D: number;\r\n    TEXTURE_CUBE_MAP_NEGATIVE_X: number;\r\n    MAX_TEXTURE_IMAGE_UNITS: number;\r\n    TEXTURE_CUBE_MAP_POSITIVE_Y: number;\r\n    RENDERBUFFER_INTERNAL_FORMAT: number;\r\n    STENCIL_VALUE_MASK: number;\r\n    ELEMENT_ARRAY_BUFFER_BINDING: number;\r\n    ARRAY_BUFFER: number;\r\n    DEPTH_RANGE: number;\r\n    NICEST: number;\r\n    ACTIVE_ATTRIBUTES: number;\r\n    NEVER: number;\r\n    FLOAT_VEC4: number;\r\n    CURRENT_VERTEX_ATTRIB: number;\r\n    STENCIL_PASS_DEPTH_PASS: number;\r\n    INVERT: number;\r\n    LINK_STATUS: number;\r\n    RGB: number;\r\n    INT_VEC4: number;\r\n    TEXTURE2: number;\r\n    UNPACK_COLORSPACE_CONVERSION_WEBGL: number;\r\n    MEDIUM_FLOAT: number;\r\n    SRC_ALPHA_SATURATE: number;\r\n    BUFFER_USAGE: number;\r\n    SHORT: number;\r\n    NONE: number;\r\n    UNSIGNED_BYTE: number;\r\n    INT: number;\r\n    SUBPIXEL_BITS: number;\r\n    KEEP: number;\r\n    SAMPLES: number;\r\n    FRAGMENT_SHADER: number;\r\n    LINE_WIDTH: number;\r\n    BLEND_SRC_RGB: number;\r\n    LOW_FLOAT: number;\r\n    VERSION: number;\r\n}\r\ndeclare var WebGLRenderingContext: {\r\n    prototype: WebGLRenderingContext;\r\n    new(): WebGLRenderingContext;\r\n    DEPTH_FUNC: number;\r\n    DEPTH_COMPONENT16: number;\r\n    REPLACE: number;\r\n    REPEAT: number;\r\n    VERTEX_ATTRIB_ARRAY_ENABLED: number;\r\n    FRAMEBUFFER_INCOMPLETE_DIMENSIONS: number;\r\n    STENCIL_BUFFER_BIT: number;\r\n    RENDERER: number;\r\n    STENCIL_BACK_REF: number;\r\n    TEXTURE26: number;\r\n    RGB565: number;\r\n    DITHER: number;\r\n    CONSTANT_COLOR: number;\r\n    GENERATE_MIPMAP_HINT: number;\r\n    POINTS: number;\r\n    DECR: number;\r\n    INT_VEC3: number;\r\n    TEXTURE28: number;\r\n    ONE_MINUS_CONSTANT_ALPHA: number;\r\n    BACK: number;\r\n    RENDERBUFFER_STENCIL_SIZE: number;\r\n    UNPACK_FLIP_Y_WEBGL: number;\r\n    BLEND: number;\r\n    TEXTURE9: number;\r\n    ARRAY_BUFFER_BINDING: number;\r\n    MAX_VIEWPORT_DIMS: number;\r\n    INVALID_FRAMEBUFFER_OPERATION: number;\r\n    TEXTURE: number;\r\n    TEXTURE0: number;\r\n    TEXTURE31: number;\r\n    TEXTURE24: number;\r\n    HIGH_INT: number;\r\n    RENDERBUFFER_BINDING: number;\r\n    BLEND_COLOR: number;\r\n    FASTEST: number;\r\n    STENCIL_WRITEMASK: number;\r\n    ALIASED_POINT_SIZE_RANGE: number;\r\n    TEXTURE12: number;\r\n    DST_ALPHA: number;\r\n    BLEND_EQUATION_RGB: number;\r\n    FRAMEBUFFER_COMPLETE: number;\r\n    NEAREST_MIPMAP_NEAREST: number;\r\n    VERTEX_ATTRIB_ARRAY_SIZE: number;\r\n    TEXTURE3: number;\r\n    DEPTH_WRITEMASK: number;\r\n    CONTEXT_LOST_WEBGL: number;\r\n    INVALID_VALUE: number;\r\n    TEXTURE_MAG_FILTER: number;\r\n    ONE_MINUS_CONSTANT_COLOR: number;\r\n    ONE_MINUS_SRC_ALPHA: number;\r\n    TEXTURE_CUBE_MAP_POSITIVE_Z: number;\r\n    NOTEQUAL: number;\r\n    ALPHA: number;\r\n    DEPTH_STENCIL: number;\r\n    MAX_VERTEX_UNIFORM_VECTORS: number;\r\n    DEPTH_COMPONENT: number;\r\n    RENDERBUFFER_RED_SIZE: number;\r\n    TEXTURE20: number;\r\n    RED_BITS: number;\r\n    RENDERBUFFER_BLUE_SIZE: number;\r\n    SCISSOR_BOX: number;\r\n    VENDOR: number;\r\n    FRONT_AND_BACK: number;\r\n    CONSTANT_ALPHA: number;\r\n    VERTEX_ATTRIB_ARRAY_BUFFER_BINDING: number;\r\n    NEAREST: number;\r\n    CULL_FACE: number;\r\n    ALIASED_LINE_WIDTH_RANGE: number;\r\n    TEXTURE19: number;\r\n    FRONT: number;\r\n    DEPTH_CLEAR_VALUE: number;\r\n    GREEN_BITS: number;\r\n    TEXTURE29: number;\r\n    TEXTURE23: number;\r\n    MAX_RENDERBUFFER_SIZE: number;\r\n    STENCIL_ATTACHMENT: number;\r\n    TEXTURE27: number;\r\n    BOOL_VEC2: number;\r\n    OUT_OF_MEMORY: number;\r\n    MIRRORED_REPEAT: number;\r\n    POLYGON_OFFSET_UNITS: number;\r\n    TEXTURE_MIN_FILTER: number;\r\n    STENCIL_BACK_PASS_DEPTH_PASS: number;\r\n    LINE_LOOP: number;\r\n    FLOAT_MAT3: number;\r\n    TEXTURE14: number;\r\n    LINEAR: number;\r\n    RGB5_A1: number;\r\n    ONE_MINUS_SRC_COLOR: number;\r\n    SAMPLE_COVERAGE_INVERT: number;\r\n    DONT_CARE: number;\r\n    FRAMEBUFFER_BINDING: number;\r\n    RENDERBUFFER_ALPHA_SIZE: number;\r\n    STENCIL_REF: number;\r\n    ZERO: number;\r\n    DECR_WRAP: number;\r\n    SAMPLE_COVERAGE: number;\r\n    STENCIL_BACK_FUNC: number;\r\n    TEXTURE30: number;\r\n    VIEWPORT: number;\r\n    STENCIL_BITS: number;\r\n    FLOAT: number;\r\n    COLOR_WRITEMASK: number;\r\n    SAMPLE_COVERAGE_VALUE: number;\r\n    TEXTURE_CUBE_MAP_NEGATIVE_Y: number;\r\n    STENCIL_BACK_FAIL: number;\r\n    FLOAT_MAT4: number;\r\n    UNSIGNED_SHORT_4_4_4_4: number;\r\n    TEXTURE6: number;\r\n    RENDERBUFFER_WIDTH: number;\r\n    RGBA4: number;\r\n    ALWAYS: number;\r\n    BLEND_EQUATION_ALPHA: number;\r\n    COLOR_BUFFER_BIT: number;\r\n    TEXTURE_CUBE_MAP: number;\r\n    DEPTH_BUFFER_BIT: number;\r\n    STENCIL_CLEAR_VALUE: number;\r\n    BLEND_EQUATION: number;\r\n    RENDERBUFFER_GREEN_SIZE: number;\r\n    NEAREST_MIPMAP_LINEAR: number;\r\n    VERTEX_ATTRIB_ARRAY_TYPE: number;\r\n    INCR_WRAP: number;\r\n    ONE_MINUS_DST_COLOR: number;\r\n    HIGH_FLOAT: number;\r\n    BYTE: number;\r\n    FRONT_FACE: number;\r\n    SAMPLE_ALPHA_TO_COVERAGE: number;\r\n    CCW: number;\r\n    TEXTURE13: number;\r\n    MAX_VERTEX_ATTRIBS: number;\r\n    MAX_VERTEX_TEXTURE_IMAGE_UNITS: number;\r\n    TEXTURE_WRAP_T: number;\r\n    UNPACK_PREMULTIPLY_ALPHA_WEBGL: number;\r\n    FLOAT_VEC2: number;\r\n    LUMINANCE: number;\r\n    GREATER: number;\r\n    INT_VEC2: number;\r\n    VALIDATE_STATUS: number;\r\n    FRAMEBUFFER: number;\r\n    FRAMEBUFFER_UNSUPPORTED: number;\r\n    TEXTURE5: number;\r\n    FUNC_SUBTRACT: number;\r\n    BLEND_DST_ALPHA: number;\r\n    SAMPLER_CUBE: number;\r\n    ONE_MINUS_DST_ALPHA: number;\r\n    LESS: number;\r\n    TEXTURE_CUBE_MAP_POSITIVE_X: number;\r\n    BLUE_BITS: number;\r\n    DEPTH_TEST: number;\r\n    VERTEX_ATTRIB_ARRAY_STRIDE: number;\r\n    DELETE_STATUS: number;\r\n    TEXTURE18: number;\r\n    POLYGON_OFFSET_FACTOR: number;\r\n    UNSIGNED_INT: number;\r\n    TEXTURE_2D: number;\r\n    DST_COLOR: number;\r\n    FLOAT_MAT2: number;\r\n    COMPRESSED_TEXTURE_FORMATS: number;\r\n    MAX_FRAGMENT_UNIFORM_VECTORS: number;\r\n    DEPTH_STENCIL_ATTACHMENT: number;\r\n    LUMINANCE_ALPHA: number;\r\n    CW: number;\r\n    VERTEX_ATTRIB_ARRAY_NORMALIZED: number;\r\n    TEXTURE_CUBE_MAP_NEGATIVE_Z: number;\r\n    LINEAR_MIPMAP_LINEAR: number;\r\n    BUFFER_SIZE: number;\r\n    SAMPLE_BUFFERS: number;\r\n    TEXTURE15: number;\r\n    ACTIVE_TEXTURE: number;\r\n    VERTEX_SHADER: number;\r\n    TEXTURE22: number;\r\n    VERTEX_ATTRIB_ARRAY_POINTER: number;\r\n    INCR: number;\r\n    COMPILE_STATUS: number;\r\n    MAX_COMBINED_TEXTURE_IMAGE_UNITS: number;\r\n    TEXTURE7: number;\r\n    UNSIGNED_SHORT_5_5_5_1: number;\r\n    DEPTH_BITS: number;\r\n    RGBA: number;\r\n    TRIANGLE_STRIP: number;\r\n    COLOR_CLEAR_VALUE: number;\r\n    BROWSER_DEFAULT_WEBGL: number;\r\n    INVALID_ENUM: number;\r\n    SCISSOR_TEST: number;\r\n    LINE_STRIP: number;\r\n    FRAMEBUFFER_INCOMPLETE_ATTACHMENT: number;\r\n    STENCIL_FUNC: number;\r\n    FRAMEBUFFER_ATTACHMENT_OBJECT_NAME: number;\r\n    RENDERBUFFER_HEIGHT: number;\r\n    TEXTURE8: number;\r\n    TRIANGLES: number;\r\n    FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE: number;\r\n    STENCIL_BACK_VALUE_MASK: number;\r\n    TEXTURE25: number;\r\n    RENDERBUFFER: number;\r\n    LEQUAL: number;\r\n    TEXTURE1: number;\r\n    STENCIL_INDEX8: number;\r\n    FUNC_ADD: number;\r\n    STENCIL_FAIL: number;\r\n    BLEND_SRC_ALPHA: number;\r\n    BOOL: number;\r\n    ALPHA_BITS: number;\r\n    LOW_INT: number;\r\n    TEXTURE10: number;\r\n    SRC_COLOR: number;\r\n    MAX_VARYING_VECTORS: number;\r\n    BLEND_DST_RGB: number;\r\n    TEXTURE_BINDING_CUBE_MAP: number;\r\n    STENCIL_INDEX: number;\r\n    TEXTURE_BINDING_2D: number;\r\n    MEDIUM_INT: number;\r\n    SHADER_TYPE: number;\r\n    POLYGON_OFFSET_FILL: number;\r\n    DYNAMIC_DRAW: number;\r\n    TEXTURE4: number;\r\n    STENCIL_BACK_PASS_DEPTH_FAIL: number;\r\n    STREAM_DRAW: number;\r\n    MAX_CUBE_MAP_TEXTURE_SIZE: number;\r\n    TEXTURE17: number;\r\n    TRIANGLE_FAN: number;\r\n    UNPACK_ALIGNMENT: number;\r\n    CURRENT_PROGRAM: number;\r\n    LINES: number;\r\n    INVALID_OPERATION: number;\r\n    FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT: number;\r\n    LINEAR_MIPMAP_NEAREST: number;\r\n    CLAMP_TO_EDGE: number;\r\n    RENDERBUFFER_DEPTH_SIZE: number;\r\n    TEXTURE_WRAP_S: number;\r\n    ELEMENT_ARRAY_BUFFER: number;\r\n    UNSIGNED_SHORT_5_6_5: number;\r\n    ACTIVE_UNIFORMS: number;\r\n    FLOAT_VEC3: number;\r\n    NO_ERROR: number;\r\n    ATTACHED_SHADERS: number;\r\n    DEPTH_ATTACHMENT: number;\r\n    TEXTURE11: number;\r\n    STENCIL_TEST: number;\r\n    ONE: number;\r\n    FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE: number;\r\n    STATIC_DRAW: number;\r\n    GEQUAL: number;\r\n    BOOL_VEC4: number;\r\n    COLOR_ATTACHMENT0: number;\r\n    PACK_ALIGNMENT: number;\r\n    MAX_TEXTURE_SIZE: number;\r\n    STENCIL_PASS_DEPTH_FAIL: number;\r\n    CULL_FACE_MODE: number;\r\n    TEXTURE16: number;\r\n    STENCIL_BACK_WRITEMASK: number;\r\n    SRC_ALPHA: number;\r\n    UNSIGNED_SHORT: number;\r\n    TEXTURE21: number;\r\n    FUNC_REVERSE_SUBTRACT: number;\r\n    SHADING_LANGUAGE_VERSION: number;\r\n    EQUAL: number;\r\n    FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL: number;\r\n    BOOL_VEC3: number;\r\n    SAMPLER_2D: number;\r\n    TEXTURE_CUBE_MAP_NEGATIVE_X: number;\r\n    MAX_TEXTURE_IMAGE_UNITS: number;\r\n    TEXTURE_CUBE_MAP_POSITIVE_Y: number;\r\n    RENDERBUFFER_INTERNAL_FORMAT: number;\r\n    STENCIL_VALUE_MASK: number;\r\n    ELEMENT_ARRAY_BUFFER_BINDING: number;\r\n    ARRAY_BUFFER: number;\r\n    DEPTH_RANGE: number;\r\n    NICEST: number;\r\n    ACTIVE_ATTRIBUTES: number;\r\n    NEVER: number;\r\n    FLOAT_VEC4: number;\r\n    CURRENT_VERTEX_ATTRIB: number;\r\n    STENCIL_PASS_DEPTH_PASS: number;\r\n    INVERT: number;\r\n    LINK_STATUS: number;\r\n    RGB: number;\r\n    INT_VEC4: number;\r\n    TEXTURE2: number;\r\n    UNPACK_COLORSPACE_CONVERSION_WEBGL: number;\r\n    MEDIUM_FLOAT: number;\r\n    SRC_ALPHA_SATURATE: number;\r\n    BUFFER_USAGE: number;\r\n    SHORT: number;\r\n    NONE: number;\r\n    UNSIGNED_BYTE: number;\r\n    INT: number;\r\n    SUBPIXEL_BITS: number;\r\n    KEEP: number;\r\n    SAMPLES: number;\r\n    FRAGMENT_SHADER: number;\r\n    LINE_WIDTH: number;\r\n    BLEND_SRC_RGB: number;\r\n    LOW_FLOAT: number;\r\n    VERSION: number;\r\n}\r\n\r\ninterface WebGLProgram extends WebGLObject {\r\n}\r\ndeclare var WebGLProgram: {\r\n    prototype: WebGLProgram;\r\n    new(): WebGLProgram;\r\n}\r\n\r\ninterface OES_standard_derivatives {\r\n    FRAGMENT_SHADER_DERIVATIVE_HINT_OES: number;\r\n}\r\ndeclare var OES_standard_derivatives: {\r\n    prototype: OES_standard_derivatives;\r\n    new(): OES_standard_derivatives;\r\n    FRAGMENT_SHADER_DERIVATIVE_HINT_OES: number;\r\n}\r\n\r\ninterface WebGLFramebuffer extends WebGLObject {\r\n}\r\ndeclare var WebGLFramebuffer: {\r\n    prototype: WebGLFramebuffer;\r\n    new(): WebGLFramebuffer;\r\n}\r\n\r\ninterface WebGLShader extends WebGLObject {\r\n}\r\ndeclare var WebGLShader: {\r\n    prototype: WebGLShader;\r\n    new(): WebGLShader;\r\n}\r\n\r\ninterface OES_texture_float_linear {\r\n}\r\ndeclare var OES_texture_float_linear: {\r\n    prototype: OES_texture_float_linear;\r\n    new(): OES_texture_float_linear;\r\n}\r\n\r\ninterface WebGLObject {\r\n}\r\ndeclare var WebGLObject: {\r\n    prototype: WebGLObject;\r\n    new(): WebGLObject;\r\n}\r\n\r\ninterface WebGLBuffer extends WebGLObject {\r\n}\r\ndeclare var WebGLBuffer: {\r\n    prototype: WebGLBuffer;\r\n    new(): WebGLBuffer;\r\n}\r\n\r\ninterface WebGLShaderPrecisionFormat {\r\n    rangeMin: number;\r\n    rangeMax: number;\r\n    precision: number;\r\n}\r\ndeclare var WebGLShaderPrecisionFormat: {\r\n    prototype: WebGLShaderPrecisionFormat;\r\n    new(): WebGLShaderPrecisionFormat;\r\n}\r\n\r\ninterface EXT_texture_filter_anisotropic {\r\n    TEXTURE_MAX_ANISOTROPY_EXT: number;\r\n    MAX_TEXTURE_MAX_ANISOTROPY_EXT: number;\r\n}\r\ndeclare var EXT_texture_filter_anisotropic: {\r\n    prototype: EXT_texture_filter_anisotropic;\r\n    new(): EXT_texture_filter_anisotropic;\r\n    TEXTURE_MAX_ANISOTROPY_EXT: number;\r\n    MAX_TEXTURE_MAX_ANISOTROPY_EXT: number;\r\n}\r\n\r\ndeclare var Option: { new(text?: string, value?: string, defaultSelected?: boolean, selected?:boolean): HTMLOptionElement; };\r\ndeclare var Image: { new(width?: number, height?: number): HTMLImageElement; };\r\ndeclare var Audio: { new(src?: string): HTMLAudioElement; };\r\n\r\ndeclare var ondragend: (ev: DragEvent) => any;\r\ndeclare var onkeydown: (ev: KeyboardEvent) => any;\r\ndeclare var ondragover: (ev: DragEvent) => any;\r\ndeclare var onkeyup: (ev: KeyboardEvent) => any;\r\ndeclare var onreset: (ev: Event) => any;\r\ndeclare var onmouseup: (ev: MouseEvent) => any;\r\ndeclare var ondragstart: (ev: DragEvent) => any;\r\ndeclare var ondrag: (ev: DragEvent) => any;\r\ndeclare var screenX: number;\r\ndeclare var onmouseover: (ev: MouseEvent) => any;\r\ndeclare var ondragleave: (ev: DragEvent) => any;\r\ndeclare var history: History;\r\ndeclare var pageXOffset: number;\r\ndeclare var name: string;\r\ndeclare var onafterprint: (ev: Event) => any;\r\ndeclare var onpause: (ev: Event) => any;\r\ndeclare var onbeforeprint: (ev: Event) => any;\r\ndeclare var top: Window;\r\ndeclare var onmousedown: (ev: MouseEvent) => any;\r\ndeclare var onseeked: (ev: Event) => any;\r\ndeclare var opener: Window;\r\ndeclare var onclick: (ev: MouseEvent) => any;\r\ndeclare var innerHeight: number;\r\ndeclare var onwaiting: (ev: Event) => any;\r\ndeclare var ononline: (ev: Event) => any;\r\ndeclare var ondurationchange: (ev: Event) => any;\r\ndeclare var frames: Window;\r\ndeclare var onblur: (ev: FocusEvent) => any;\r\ndeclare var onemptied: (ev: Event) => any;\r\ndeclare var onseeking: (ev: Event) => any;\r\ndeclare var oncanplay: (ev: Event) => any;\r\ndeclare var outerWidth: number;\r\ndeclare var onstalled: (ev: Event) => any;\r\ndeclare var onmousemove: (ev: MouseEvent) => any;\r\ndeclare var innerWidth: number;\r\ndeclare var onoffline: (ev: Event) => any;\r\ndeclare var length: number;\r\ndeclare var screen: Screen;\r\ndeclare var onbeforeunload: (ev: BeforeUnloadEvent) => any;\r\ndeclare var onratechange: (ev: Event) => any;\r\ndeclare var onstorage: (ev: StorageEvent) => any;\r\ndeclare var onloadstart: (ev: Event) => any;\r\ndeclare var ondragenter: (ev: DragEvent) => any;\r\ndeclare var onsubmit: (ev: Event) => any;\r\ndeclare var self: Window;\r\ndeclare var document: Document;\r\ndeclare var onprogress: (ev: ProgressEvent) => any;\r\ndeclare var ondblclick: (ev: MouseEvent) => any;\r\ndeclare var pageYOffset: number;\r\ndeclare var oncontextmenu: (ev: MouseEvent) => any;\r\ndeclare var onchange: (ev: Event) => any;\r\ndeclare var onloadedmetadata: (ev: Event) => any;\r\ndeclare var onplay: (ev: Event) => any;\r\ndeclare var onerror: ErrorEventHandler;\r\ndeclare var onplaying: (ev: Event) => any;\r\ndeclare var parent: Window;\r\ndeclare var location: Location;\r\ndeclare var oncanplaythrough: (ev: Event) => any;\r\ndeclare var onabort: (ev: UIEvent) => any;\r\ndeclare var onreadystatechange: (ev: Event) => any;\r\ndeclare var outerHeight: number;\r\ndeclare var onkeypress: (ev: KeyboardEvent) => any;\r\ndeclare var frameElement: Element;\r\ndeclare var onloadeddata: (ev: Event) => any;\r\ndeclare var onsuspend: (ev: Event) => any;\r\ndeclare var window: Window;\r\ndeclare var onfocus: (ev: FocusEvent) => any;\r\ndeclare var onmessage: (ev: MessageEvent) => any;\r\ndeclare var ontimeupdate: (ev: Event) => any;\r\ndeclare var onresize: (ev: UIEvent) => any;\r\ndeclare var onselect: (ev: UIEvent) => any;\r\ndeclare var navigator: Navigator;\r\ndeclare var styleMedia: StyleMedia;\r\ndeclare var ondrop: (ev: DragEvent) => any;\r\ndeclare var onmouseout: (ev: MouseEvent) => any;\r\ndeclare var onended: (ev: Event) => any;\r\ndeclare var onhashchange: (ev: Event) => any;\r\ndeclare var onunload: (ev: Event) => any;\r\ndeclare var onscroll: (ev: UIEvent) => any;\r\ndeclare var screenY: number;\r\ndeclare var onmousewheel: (ev: MouseWheelEvent) => any;\r\ndeclare var onload: (ev: Event) => any;\r\ndeclare var onvolumechange: (ev: Event) => any;\r\ndeclare var oninput: (ev: Event) => any;\r\ndeclare var performance: Performance;\r\ndeclare var onmspointerdown: (ev: any) => any;\r\ndeclare var animationStartTime: number;\r\ndeclare var onmsgesturedoubletap: (ev: any) => any;\r\ndeclare var onmspointerhover: (ev: any) => any;\r\ndeclare var onmsgesturehold: (ev: any) => any;\r\ndeclare var onmspointermove: (ev: any) => any;\r\ndeclare var onmsgesturechange: (ev: any) => any;\r\ndeclare var onmsgesturestart: (ev: any) => any;\r\ndeclare var onmspointercancel: (ev: any) => any;\r\ndeclare var onmsgestureend: (ev: any) => any;\r\ndeclare var onmsgesturetap: (ev: any) => any;\r\ndeclare var onmspointerout: (ev: any) => any;\r\ndeclare var msAnimationStartTime: number;\r\ndeclare var applicationCache: ApplicationCache;\r\ndeclare var onmsinertiastart: (ev: any) => any;\r\ndeclare var onmspointerover: (ev: any) => any;\r\ndeclare var onpopstate: (ev: PopStateEvent) => any;\r\ndeclare var onmspointerup: (ev: any) => any;\r\ndeclare var onpageshow: (ev: PageTransitionEvent) => any;\r\ndeclare var ondevicemotion: (ev: DeviceMotionEvent) => any;\r\ndeclare var devicePixelRatio: number;\r\ndeclare var msCrypto: Crypto;\r\ndeclare var ondeviceorientation: (ev: DeviceOrientationEvent) => any;\r\ndeclare var doNotTrack: string;\r\ndeclare var onmspointerenter: (ev: any) => any;\r\ndeclare var onpagehide: (ev: PageTransitionEvent) => any;\r\ndeclare var onmspointerleave: (ev: any) => any;\r\ndeclare function alert(message?: any): void;\r\ndeclare function scroll(x?: number, y?: number): void;\r\ndeclare function focus(): void;\r\ndeclare function scrollTo(x?: number, y?: number): void;\r\ndeclare function print(): void;\r\ndeclare function prompt(message?: string, _default?: string): string;\r\ndeclare function toString(): string;\r\ndeclare function open(url?: string, target?: string, features?: string, replace?: boolean): Window;\r\ndeclare function scrollBy(x?: number, y?: number): void;\r\ndeclare function confirm(message?: string): boolean;\r\ndeclare function close(): void;\r\ndeclare function postMessage(message: any, targetOrigin: string, ports?: any): void;\r\ndeclare function showModalDialog(url?: string, argument?: any, options?: any): any;\r\ndeclare function blur(): void;\r\ndeclare function getSelection(): Selection;\r\ndeclare function getComputedStyle(elt: Element, pseudoElt?: string): CSSStyleDeclaration;\r\ndeclare function msCancelRequestAnimationFrame(handle: number): void;\r\ndeclare function matchMedia(mediaQuery: string): MediaQueryList;\r\ndeclare function cancelAnimationFrame(handle: number): void;\r\ndeclare function msIsStaticHTML(html: string): boolean;\r\ndeclare function msMatchMedia(mediaQuery: string): MediaQueryList;\r\ndeclare function requestAnimationFrame(callback: FrameRequestCallback): number;\r\ndeclare function msRequestAnimationFrame(callback: FrameRequestCallback): number;\r\ndeclare function removeEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\ndeclare function dispatchEvent(evt: Event): boolean;\r\ndeclare function attachEvent(event: string, listener: EventListener): boolean;\r\ndeclare function detachEvent(event: string, listener: EventListener): void;\r\ndeclare var localStorage: Storage;\r\ndeclare var status: string;\r\ndeclare var onmouseleave: (ev: MouseEvent) => any;\r\ndeclare var screenLeft: number;\r\ndeclare var offscreenBuffering: any;\r\ndeclare var maxConnectionsPerServer: number;\r\ndeclare var onmouseenter: (ev: MouseEvent) => any;\r\ndeclare var clipboardData: DataTransfer;\r\ndeclare var defaultStatus: string;\r\ndeclare var clientInformation: Navigator;\r\ndeclare var closed: boolean;\r\ndeclare var onhelp: (ev: Event) => any;\r\ndeclare var external: External;\r\ndeclare var event: MSEventObj;\r\ndeclare var onfocusout: (ev: FocusEvent) => any;\r\ndeclare var screenTop: number;\r\ndeclare var onfocusin: (ev: FocusEvent) => any;\r\ndeclare function showModelessDialog(url?: string, argument?: any, options?: any): Window;\r\ndeclare function navigate(url: string): void;\r\ndeclare function resizeBy(x?: number, y?: number): void;\r\ndeclare function item(index: any): any;\r\ndeclare function resizeTo(x?: number, y?: number): void;\r\ndeclare function createPopup(arguments?: any): MSPopupWindow;\r\ndeclare function toStaticHTML(html: string): string;\r\ndeclare function execScript(code: string, language?: string): any;\r\ndeclare function msWriteProfilerMark(profilerMarkName: string): void;\r\ndeclare function moveTo(x?: number, y?: number): void;\r\ndeclare function moveBy(x?: number, y?: number): void;\r\ndeclare function showHelp(url: string, helpArg?: any, features?: string): void;\r\ndeclare function captureEvents(): void;\r\ndeclare function releaseEvents(): void;\r\ndeclare var sessionStorage: Storage;\r\ndeclare function clearTimeout(handle: number): void;\r\ndeclare function setTimeout(handler: any, timeout?: any, ...args: any[]): number;\r\ndeclare function clearInterval(handle: number): void;\r\ndeclare function setInterval(handler: any, timeout?: any, ...args: any[]): number;\r\ndeclare function msSetImmediate(expression: any, ...args: any[]): number;\r\ndeclare function clearImmediate(handle: number): void;\r\ndeclare function msClearImmediate(handle: number): void;\r\ndeclare function setImmediate(expression: any, ...args: any[]): number;\r\ndeclare function btoa(rawString: string): string;\r\ndeclare function atob(encodedString: string): string;\r\ndeclare var msIndexedDB: IDBFactory;\r\ndeclare var indexedDB: IDBFactory;\r\ndeclare var console: Console;\r\ndeclare var onpointerenter: (ev: PointerEvent) => any;\r\ndeclare var onpointerout: (ev: PointerEvent) => any;\r\ndeclare var onpointerdown: (ev: PointerEvent) => any;\r\ndeclare var onpointerup: (ev: PointerEvent) => any;\r\ndeclare var onpointercancel: (ev: PointerEvent) => any;\r\ndeclare var onpointerover: (ev: PointerEvent) => any;\r\ndeclare var onpointermove: (ev: PointerEvent) => any;\r\ndeclare var onpointerleave: (ev: PointerEvent) => any;\r\ndeclare function addEventListener(type: \"mouseleave\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mouseenter\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"help\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"focusout\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"focusin\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pointerenter\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pointerout\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pointerdown\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pointerup\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pointercancel\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pointerover\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pointermove\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pointerleave\", listener: (ev: PointerEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"dragend\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"keydown\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"dragover\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"keyup\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"reset\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mouseup\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"dragstart\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"drag\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mouseover\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"dragleave\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"afterprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pause\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"beforeprint\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mousedown\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"seeked\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"click\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"waiting\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"online\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"durationchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"blur\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"emptied\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"seeking\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"canplay\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"stalled\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mousemove\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"offline\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"beforeunload\", listener: (ev: BeforeUnloadEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"ratechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"storage\", listener: (ev: StorageEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"loadstart\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"dragenter\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"submit\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"progress\", listener: (ev: ProgressEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"dblclick\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"contextmenu\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"change\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"loadedmetadata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"play\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"playing\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"canplaythrough\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"abort\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"readystatechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"keypress\", listener: (ev: KeyboardEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"loadeddata\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"suspend\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"focus\", listener: (ev: FocusEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"message\", listener: (ev: MessageEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"timeupdate\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"resize\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"select\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"drop\", listener: (ev: DragEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mouseout\", listener: (ev: MouseEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"ended\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"hashchange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"unload\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"scroll\", listener: (ev: UIEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mousewheel\", listener: (ev: MouseWheelEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"load\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"volumechange\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"input\", listener: (ev: Event) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mspointerdown\", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"msgesturedoubletap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mspointerhover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"msgesturehold\", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mspointermove\", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"msgesturechange\", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"msgesturestart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mspointercancel\", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"msgestureend\", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"msgesturetap\", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mspointerout\", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"msinertiastart\", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mspointerover\", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"popstate\", listener: (ev: PopStateEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mspointerup\", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pageshow\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"devicemotion\", listener: (ev: DeviceMotionEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"deviceorientation\", listener: (ev: DeviceOrientationEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mspointerenter\", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"pagehide\", listener: (ev: PageTransitionEvent) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: \"mspointerleave\", listener: (ev: any) => any, useCapture?: boolean): void;\r\ndeclare function addEventListener(type: string, listener: EventListener, useCapture?: boolean): void;\r\n" + fix
});



},{}]},{},[1]);
